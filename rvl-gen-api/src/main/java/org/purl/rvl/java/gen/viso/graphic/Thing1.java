/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) on 17.08.15 19:14
 */
package org.purl.rvl.java.gen.viso.graphic;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
 *
 * This class manages access to these properties:
 * <ul>
 *   <li>Binarygraphico2orelationto</li>
 *   <li>ColorRGBBlue</li>
 *   <li>ColorRGBGreen</li>
 *   <li>ColorRGBRed</li>
 *   <li>Colorhslhue</li>
 *   <li>Containedby</li>
 *   <li>Containmentcontainee</li>
 *   <li>Containmentcontainer</li>
 *   <li>Graphicattribute</li>
 *   <li>Graphicrelations</li>
 *   <li>Labeledwith</li>
 *   <li>Labels</li>
 *   <li>Linkedfrom</li>
 *   <li>Linkedto</li>
 *   <li>Linkedwith</li>
 *   <li>N_arygraphico2orelationto</li>
 *   <li>N_aryrelationhelperproperties</li>
 *   <li>Nominalvalue</li>
 *   <li>Non_spatialgraphicattribute</li>
 *   <li>Ordinalvalue</li>
 *   <li>Position</li>
 *   <li>Quantitativevalue</li>
 *   <li>Relativedistanceto</li>
 *   <li>Spatialgraphicattribute</li>
 *   <li>Superimposedby</li>
 *   <li>Superimposes</li>
 *   <li>Syntacticroles</li>
 *   <li>Xposition</li>
 *   <li>Yposition</li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 17.08.15 19:14
 */
public class Thing1 extends org.ontoware.rdfreactor.schema.rdfs.Class {

    private static final long serialVersionUID = 21560320291469636L;

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://purl.org/viso/graphic/has_binary_graphic_o_2_o_relation_to */
	public static final URI BINARYGRAPHICO2ORELATIONTO = new URIImpl("http://purl.org/viso/graphic/has_binary_graphic_o_2_o_relation_to", false);

    /** http://purl.org/viso/graphic/color_rgb_b */
	public static final URI COLORRGBBLUE = new URIImpl("http://purl.org/viso/graphic/color_rgb_b", false);

    /** http://purl.org/viso/graphic/color_rgb_g */
	public static final URI COLORRGBGREEN = new URIImpl("http://purl.org/viso/graphic/color_rgb_g", false);

    /** http://purl.org/viso/graphic/color_rgb_r */
	public static final URI COLORRGBRED = new URIImpl("http://purl.org/viso/graphic/color_rgb_r", false);

    /** http://purl.org/viso/graphic/color_hsl_hue */
	public static final URI COLORHSLHUE = new URIImpl("http://purl.org/viso/graphic/color_hsl_hue", false);

    /** http://purl.org/viso/graphic/contained_by */
	public static final URI CONTAINEDBY = new URIImpl("http://purl.org/viso/graphic/contained_by", false);

    /** http://purl.org/viso/graphic/containment_containee */
	public static final URI CONTAINMENTCONTAINEE = new URIImpl("http://purl.org/viso/graphic/containment_containee", false);

    /** http://purl.org/viso/graphic/containment_container */
	public static final URI CONTAINMENTCONTAINER = new URIImpl("http://purl.org/viso/graphic/containment_container", false);

    /** http://purl.org/viso/graphic/has_graphic_attribute */
	public static final URI GRAPHICATTRIBUTE = new URIImpl("http://purl.org/viso/graphic/has_graphic_attribute", false);

    /** http://purl.org/viso/graphic/graphic_relations */
	public static final URI GRAPHICRELATIONS = new URIImpl("http://purl.org/viso/graphic/graphic_relations", false);

    /** http://purl.org/viso/graphic/labeled_with */
	public static final URI LABELEDWITH = new URIImpl("http://purl.org/viso/graphic/labeled_with", false);

    /** http://purl.org/viso/graphic/labels */
	public static final URI LABELS = new URIImpl("http://purl.org/viso/graphic/labels", false);

    /** http://purl.org/viso/graphic/linked_from */
	public static final URI LINKEDFROM = new URIImpl("http://purl.org/viso/graphic/linked_from", false);

    /** http://purl.org/viso/graphic/linked_to */
	public static final URI LINKEDTO = new URIImpl("http://purl.org/viso/graphic/linked_to", false);

    /** http://purl.org/viso/graphic/linked_with */
	public static final URI LINKEDWITH = new URIImpl("http://purl.org/viso/graphic/linked_with", false);

    /** http://purl.org/viso/graphic/has_n-ary_graphic_o_2_o_relation_to */
	public static final URI N_ARYGRAPHICO2ORELATIONTO = new URIImpl("http://purl.org/viso/graphic/has_n-ary_graphic_o_2_o_relation_to", false);

    /** http://purl.org/viso/graphic/n-ary_relation_helper_properties */
	public static final URI N_ARYRELATIONHELPERPROPERTIES = new URIImpl("http://purl.org/viso/graphic/n-ary_relation_helper_properties", false);

    /** http://purl.org/viso/data/has_nominal_value */
	public static final URI NOMINALVALUE = new URIImpl("http://purl.org/viso/data/has_nominal_value", false);

    /** http://purl.org/viso/graphic/has_non-spatial_graphic_attribute */
	public static final URI NON_SPATIALGRAPHICATTRIBUTE = new URIImpl("http://purl.org/viso/graphic/has_non-spatial_graphic_attribute", false);

    /** http://purl.org/viso/data/has_ordinal_value */
	public static final URI ORDINALVALUE = new URIImpl("http://purl.org/viso/data/has_ordinal_value", false);

    /** http://purl.org/viso/graphic/position */
	public static final URI POSITION = new URIImpl("http://purl.org/viso/graphic/position", false);

    /** http://purl.org/viso/data/has_quantitative_value */
	public static final URI QUANTITATIVEVALUE = new URIImpl("http://purl.org/viso/data/has_quantitative_value", false);

    /** http://purl.org/viso/graphic/relative_distance_to */
	public static final URI RELATIVEDISTANCETO = new URIImpl("http://purl.org/viso/graphic/relative_distance_to", false);

    /** http://purl.org/viso/graphic/has_spatial_graphic_attribute */
	public static final URI SPATIALGRAPHICATTRIBUTE = new URIImpl("http://purl.org/viso/graphic/has_spatial_graphic_attribute", false);

    /** http://purl.org/viso/graphic/superimposed_by */
	public static final URI SUPERIMPOSEDBY = new URIImpl("http://purl.org/viso/graphic/superimposed_by", false);

    /** http://purl.org/viso/graphic/superimposes */
	public static final URI SUPERIMPOSES = new URIImpl("http://purl.org/viso/graphic/superimposes", false);

    /** http://purl.org/viso/graphic/syntactic_roles */
	public static final URI SYNTACTICROLES = new URIImpl("http://purl.org/viso/graphic/syntactic_roles", false);

    /** http://purl.org/viso/graphic/x_position */
	public static final URI XPOSITION = new URIImpl("http://purl.org/viso/graphic/x_position", false);

    /** http://purl.org/viso/graphic/y_position */
	public static final URI YPOSITION = new URIImpl("http://purl.org/viso/graphic/y_position", false);

    /**
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/viso/graphic/has_binary_graphic_o_2_o_relation_to", false),
      new URIImpl("http://purl.org/viso/graphic/color_rgb_b", false),
      new URIImpl("http://purl.org/viso/graphic/color_rgb_g", false),
      new URIImpl("http://purl.org/viso/graphic/color_rgb_r", false),
      new URIImpl("http://purl.org/viso/graphic/color_hsl_hue", false),
      new URIImpl("http://purl.org/viso/graphic/contained_by", false),
      new URIImpl("http://purl.org/viso/graphic/containment_containee", false),
      new URIImpl("http://purl.org/viso/graphic/containment_container", false),
      new URIImpl("http://purl.org/viso/graphic/has_graphic_attribute", false),
      new URIImpl("http://purl.org/viso/graphic/graphic_relations", false),
      new URIImpl("http://purl.org/viso/graphic/labeled_with", false),
      new URIImpl("http://purl.org/viso/graphic/labels", false),
      new URIImpl("http://purl.org/viso/graphic/linked_from", false),
      new URIImpl("http://purl.org/viso/graphic/linked_to", false),
      new URIImpl("http://purl.org/viso/graphic/linked_with", false),
      new URIImpl("http://purl.org/viso/graphic/has_n-ary_graphic_o_2_o_relation_to", false),
      new URIImpl("http://purl.org/viso/graphic/n-ary_relation_helper_properties", false),
      new URIImpl("http://purl.org/viso/data/has_nominal_value", false),
      new URIImpl("http://purl.org/viso/graphic/has_non-spatial_graphic_attribute", false),
      new URIImpl("http://purl.org/viso/data/has_ordinal_value", false),
      new URIImpl("http://purl.org/viso/graphic/position", false),
      new URIImpl("http://purl.org/viso/data/has_quantitative_value", false),
      new URIImpl("http://purl.org/viso/graphic/relative_distance_to", false),
      new URIImpl("http://purl.org/viso/graphic/has_spatial_graphic_attribute", false),
      new URIImpl("http://purl.org/viso/graphic/superimposed_by", false),
      new URIImpl("http://purl.org/viso/graphic/superimposes", false),
      new URIImpl("http://purl.org/viso/graphic/syntactic_roles", false),
      new URIImpl("http://purl.org/viso/graphic/x_position", false),
      new URIImpl("http://purl.org/viso/graphic/y_position", false)
    };


	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected Thing1 (Model model, URI classURI, Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2]
	 */
	public Thing1 (Model model, Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7]
	 */
	public Thing1 (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8]
	 */
	public Thing1 (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9]
	 */
	public Thing1 (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing1 or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0]
	 */
	public static Thing1 getInstance(Model model, Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing1.class);
	}

	/**
	 * Create a new instance of this class in the model.
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1]
	 */
	public static void createInstance(Model model, Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2]
	 */
	public static boolean hasInstance(Model model, Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3]
	 */
	public static ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as]
	 */
	public static ReactorResult<? extends Thing1> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing1.class );
	}

    /**
	 * Remove triple {@code (this, rdf:type, Thing1)} from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4]
	 */
	public static void deleteInstance(Model model, Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class5]
	 */
	public static void deleteAllProperties(Model model,	Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Binarygraphico2orelationto' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllBinarygraphico2orelationto_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.BINARYGRAPHICO2ORELATIONTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Binarygraphico2orelationto' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllBinarygraphico2orelationto_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.BINARYGRAPHICO2ORELATIONTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Binarygraphico2orelationto' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllBinarygraphico2orelationto_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.BINARYGRAPHICO2ORELATIONTO, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Containedby' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllContainedby_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.CONTAINEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Containedby' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllContainedby_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.CONTAINEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Containedby' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllContainedby_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.CONTAINEDBY, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Containmentcontainee' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllContainmentcontainee_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.CONTAINMENTCONTAINEE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Containmentcontainee' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllContainmentcontainee_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.CONTAINMENTCONTAINEE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Containmentcontainee' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllContainmentcontainee_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.CONTAINMENTCONTAINEE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Containmentcontainer' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllContainmentcontainer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.CONTAINMENTCONTAINER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Containmentcontainer' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllContainmentcontainer_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.CONTAINMENTCONTAINER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Containmentcontainer' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllContainmentcontainer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.CONTAINMENTCONTAINER, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Graphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllGraphicattribute_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.GRAPHICATTRIBUTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Graphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllGraphicattribute_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.GRAPHICATTRIBUTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Graphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllGraphicattribute_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.GRAPHICATTRIBUTE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Graphicrelations' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllGraphicrelations_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.GRAPHICRELATIONS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Graphicrelations' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllGraphicrelations_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.GRAPHICRELATIONS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Graphicrelations' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllGraphicrelations_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.GRAPHICRELATIONS, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'N_arygraphico2orelationto' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllN_arygraphico2orelationto_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.N_ARYGRAPHICO2ORELATIONTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'N_arygraphico2orelationto' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllN_arygraphico2orelationto_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.N_ARYGRAPHICO2ORELATIONTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'N_arygraphico2orelationto' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllN_arygraphico2orelationto_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.N_ARYGRAPHICO2ORELATIONTO, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'N_aryrelationhelperproperties' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllN_aryrelationhelperproperties_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.N_ARYRELATIONHELPERPROPERTIES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'N_aryrelationhelperproperties' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllN_aryrelationhelperproperties_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.N_ARYRELATIONHELPERPROPERTIES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'N_aryrelationhelperproperties' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllN_aryrelationhelperproperties_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.N_ARYRELATIONHELPERPROPERTIES, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Nominalvalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllNominalvalue_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.NOMINALVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Nominalvalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllNominalvalue_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.NOMINALVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Nominalvalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllNominalvalue_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.NOMINALVALUE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Non_spatialgraphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllNon_spatialgraphicattribute_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.NON_SPATIALGRAPHICATTRIBUTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Non_spatialgraphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllNon_spatialgraphicattribute_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.NON_SPATIALGRAPHICATTRIBUTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Non_spatialgraphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllNon_spatialgraphicattribute_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.NON_SPATIALGRAPHICATTRIBUTE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Ordinalvalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllOrdinalvalue_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.ORDINALVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Ordinalvalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllOrdinalvalue_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.ORDINALVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Ordinalvalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllOrdinalvalue_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.ORDINALVALUE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Position' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllPosition_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.POSITION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Position' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllPosition_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.POSITION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Position' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllPosition_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.POSITION, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Quantitativevalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllQuantitativevalue_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.QUANTITATIVEVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Quantitativevalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllQuantitativevalue_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.QUANTITATIVEVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Quantitativevalue' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllQuantitativevalue_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.QUANTITATIVEVALUE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Spatialgraphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllSpatialgraphicattribute_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.SPATIALGRAPHICATTRIBUTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Spatialgraphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllSpatialgraphicattribute_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.SPATIALGRAPHICATTRIBUTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Spatialgraphicattribute' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllSpatialgraphicattribute_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.SPATIALGRAPHICATTRIBUTE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Syntacticroles' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllSyntacticroles_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.SYNTACTICROLES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Syntacticroles' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllSyntacticroles_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.SYNTACTICROLES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Syntacticroles' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllSyntacticroles_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.SYNTACTICROLES, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Endnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllEndnode_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, DirectedLinking.ENDNODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Endnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllEndnode_Inverse() {
		return Base.getAll_Inverse(this.model, DirectedLinking.ENDNODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Endnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllEndnode_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, DirectedLinking.ENDNODE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Startnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllStartnode_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, DirectedLinking.STARTNODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Startnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllStartnode_Inverse() {
		return Base.getAll_Inverse(this.model, DirectedLinking.STARTNODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Startnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllStartnode_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, DirectedLinking.STARTNODE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Relativelydistantobject' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllRelativelydistantobject_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, RelativeDistance.RELATIVELYDISTANTOBJECT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Relativelydistantobject' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllRelativelydistantobject_Inverse() {
		return Base.getAll_Inverse(this.model, RelativeDistance.RELATIVELYDISTANTOBJECT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Relativelydistantobject' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllRelativelydistantobject_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, RelativeDistance.RELATIVELYDISTANTOBJECT, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Linkingnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllLinkingnode_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, UndirectedLinking.LINKINGNODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Linkingnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllLinkingnode_Inverse() {
		return Base.getAll_Inverse(this.model, UndirectedLinking.LINKINGNODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Linkingnode' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllLinkingnode_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, UndirectedLinking.LINKINGNODE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SuperimpositionbyPercent' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllSuperimpositionbyPercent_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Superimposition.SUPERIMPOSITIONBYPERCENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SuperimpositionbyPercent' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllSuperimpositionbyPercent_Inverse() {
		return Base.getAll_Inverse(this.model, Superimposition.SUPERIMPOSITIONBYPERCENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SuperimpositionbyPercent' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllSuperimpositionbyPercent_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Superimposition.SUPERIMPOSITIONBYPERCENT, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SuperimpositionoverlappingPart' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllSuperimpositionoverlappingPart_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Superimposition.SUPERIMPOSITIONOVERLAPPINGPART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SuperimpositionoverlappingPart' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllSuperimpositionoverlappingPart_Inverse() {
		return Base.getAll_Inverse(this.model, Superimposition.SUPERIMPOSITIONOVERLAPPINGPART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SuperimpositionoverlappingPart' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllSuperimpositionoverlappingPart_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Superimposition.SUPERIMPOSITIONOVERLAPPINGPART, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Superimpositionsuperimposee' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllSuperimpositionsuperimposee_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Superimposition.SUPERIMPOSITIONSUPERIMPOSEE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Superimpositionsuperimposee' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllSuperimpositionsuperimposee_Inverse() {
		return Base.getAll_Inverse(this.model, Superimposition.SUPERIMPOSITIONSUPERIMPOSEE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Superimpositionsuperimposee' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllSuperimpositionsuperimposee_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Superimposition.SUPERIMPOSITIONSUPERIMPOSEE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Superimpositionsuperimposer' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllSuperimpositionsuperimposer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Superimposition.SUPERIMPOSITIONSUPERIMPOSER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Superimpositionsuperimposer' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllSuperimpositionsuperimposer_Inverse() {
		return Base.getAll_Inverse(this.model, Superimposition.SUPERIMPOSITIONSUPERIMPOSER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Superimpositionsuperimposer' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllSuperimpositionsuperimposer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Superimposition.SUPERIMPOSITIONSUPERIMPOSER, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Labelingbase' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllLabelingbase_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Labeling.LABELINGBASE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Labelingbase' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllLabelingbase_Inverse() {
		return Base.getAll_Inverse(this.model, Labeling.LABELINGBASE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Labelingbase' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllLabelingbase_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Labeling.LABELINGBASE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Labelinglabel' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllLabelinglabel_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Labeling.LABELINGLABEL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Labelinglabel' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllLabelinglabel_Inverse() {
		return Base.getAll_Inverse(this.model, Labeling.LABELINGLABEL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Labelinglabel' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllLabelinglabel_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Labeling.LABELINGLABEL, objectValue, Resource.class);
	}



    /**
     * Check if {@code Binarygraphico2orelationto} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasBinarygraphico2orelationto(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, BINARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Check if {@code Binarygraphico2orelationto} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasBinarygraphico2orelationto() {
		return Base.has(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Check if {@code Binarygraphico2orelationto} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasBinarygraphico2orelationto(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Check if {@code Binarygraphico2orelationto} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasBinarygraphico2orelationto( Node value ) {
		return Base.hasValue(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, value);
	}

     /**
     * Get all values of property {@code Binarygraphico2orelationto} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllBinarygraphico2orelationto_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BINARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Get all values of property {@code Binarygraphico2orelationto} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllBinarygraphico2orelationto_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, Node.class);
	}

    /**
     * Get all values of property {@code Binarygraphico2orelationto} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllBinarygraphico2orelationto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Get all values of property {@code Binarygraphico2orelationto} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllBinarygraphico2orelationto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, Node.class);
	}
 
    /**
     * Get all values of property {@code Binarygraphico2orelationto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllBinarygraphico2orelationto(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, Thing1.class);
	}

    /**
     * Get all values of property {@code Binarygraphico2orelationto} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllBinarygraphico2orelationto_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, Thing1.class);
	}

    /**
     * Get all values of property {@code Binarygraphico2orelationto}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllBinarygraphico2orelationto() {
		return Base.getAll(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, Thing1.class);
	}

    /**
     * Get all values of property {@code Binarygraphico2orelationto} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllBinarygraphico2orelationto_as() {
		return Base.getAll_as(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Binarygraphico2orelationto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addBinarygraphico2orelationto(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Adds a value to property {@code Binarygraphico2orelationto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addBinarygraphico2orelationto(Node value) {
		Base.add(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, value);
	}
    /**
     * Adds a value to property {@code Binarygraphico2orelationto} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addBinarygraphico2orelationto(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Adds a value to property {@code Binarygraphico2orelationto} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addBinarygraphico2orelationto(Thing1 value) {
		Base.add(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, value);
	}
  

    /**
     * Sets a value of property {@code Binarygraphico2orelationto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setBinarygraphico2orelationto(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Sets a value of property {@code Binarygraphico2orelationto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setBinarygraphico2orelationto(Node value) {
		Base.set(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, value);
	}
    /**
     * Sets a value of property {@code Binarygraphico2orelationto} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setBinarygraphico2orelationto(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Sets a value of property {@code Binarygraphico2orelationto} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setBinarygraphico2orelationto(Thing1 value) {
		Base.set(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, value);
	}
  


    /**
     * Removes a value of property {@code Binarygraphico2orelationto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeBinarygraphico2orelationto(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Removes a value of property {@code Binarygraphico2orelationto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeBinarygraphico2orelationto(Node value) {
		Base.remove(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, value);
	}
    /**
     * Removes a value of property {@code Binarygraphico2orelationto} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeBinarygraphico2orelationto(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, BINARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Removes a value of property {@code Binarygraphico2orelationto} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeBinarygraphico2orelationto(Thing1 value) {
		Base.remove(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO, value);
	}
  
    /**
     * Removes all values of property {@code Binarygraphico2orelationto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllBinarygraphico2orelationto(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, BINARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Removes all values of property {@code Binarygraphico2orelationto}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllBinarygraphico2orelationto() {
		Base.removeAll(this.model, this.getResource(), BINARYGRAPHICO2ORELATIONTO);
	}
     /**
     * Check if {@code ColorRGBBlue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasColorRGBBlue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, COLORRGBBLUE);
	}

    /**
     * Check if {@code ColorRGBBlue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasColorRGBBlue() {
		return Base.has(this.model, this.getResource(), COLORRGBBLUE);
	}

    /**
     * Check if {@code ColorRGBBlue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasColorRGBBlue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, COLORRGBBLUE, value);
	}

    /**
     * Check if {@code ColorRGBBlue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasColorRGBBlue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORRGBBLUE, value);
	}

     /**
     * Get all values of property {@code ColorRGBBlue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllColorRGBBlue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORRGBBLUE);
	}

    /**
     * Get all values of property {@code ColorRGBBlue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllColorRGBBlue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORRGBBLUE, Node.class);
	}

    /**
     * Get all values of property {@code ColorRGBBlue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllColorRGBBlue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORRGBBLUE);
	}

    /**
     * Get all values of property {@code ColorRGBBlue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllColorRGBBlue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORRGBBLUE, Node.class);
	}
 
    /**
     * Get all values of property {@code ColorRGBBlue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllColorRGBBlue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORRGBBLUE, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBBlue} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllColorRGBBlue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORRGBBLUE, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBBlue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllColorRGBBlue() {
		return Base.getAll(this.model, this.getResource(), COLORRGBBLUE, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBBlue} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllColorRGBBlue_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORRGBBLUE, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code ColorRGBBlue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addColorRGBBlue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, COLORRGBBLUE, value);
	}

    /**
     * Adds a value to property {@code ColorRGBBlue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addColorRGBBlue(Node value) {
		Base.add(this.model, this.getResource(), COLORRGBBLUE, value);
	}
    /**
     * Adds a value to property {@code ColorRGBBlue} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addColorRGBBlue(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, COLORRGBBLUE, value);
	}

    /**
     * Adds a value to property {@code ColorRGBBlue} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addColorRGBBlue(java.lang.Float value) {
		Base.add(this.model, this.getResource(), COLORRGBBLUE, value);
	}
  

    /**
     * Sets a value of property {@code ColorRGBBlue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setColorRGBBlue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, COLORRGBBLUE, value);
	}

    /**
     * Sets a value of property {@code ColorRGBBlue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setColorRGBBlue(Node value) {
		Base.set(this.model, this.getResource(), COLORRGBBLUE, value);
	}
    /**
     * Sets a value of property {@code ColorRGBBlue} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setColorRGBBlue(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, COLORRGBBLUE, value);
	}

    /**
     * Sets a value of property {@code ColorRGBBlue} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setColorRGBBlue(java.lang.Float value) {
		Base.set(this.model, this.getResource(), COLORRGBBLUE, value);
	}
  


    /**
     * Removes a value of property {@code ColorRGBBlue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeColorRGBBlue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, COLORRGBBLUE, value);
	}

    /**
     * Removes a value of property {@code ColorRGBBlue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeColorRGBBlue(Node value) {
		Base.remove(this.model, this.getResource(), COLORRGBBLUE, value);
	}
    /**
     * Removes a value of property {@code ColorRGBBlue} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeColorRGBBlue(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, COLORRGBBLUE, value);
	}

    /**
     * Removes a value of property {@code ColorRGBBlue} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeColorRGBBlue(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), COLORRGBBLUE, value);
	}
  
    /**
     * Removes all values of property {@code ColorRGBBlue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllColorRGBBlue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORRGBBLUE);
	}

    /**
     * Removes all values of property {@code ColorRGBBlue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllColorRGBBlue() {
		Base.removeAll(this.model, this.getResource(), COLORRGBBLUE);
	}
     /**
     * Check if {@code ColorRGBGreen} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasColorRGBGreen(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, COLORRGBGREEN);
	}

    /**
     * Check if {@code ColorRGBGreen} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasColorRGBGreen() {
		return Base.has(this.model, this.getResource(), COLORRGBGREEN);
	}

    /**
     * Check if {@code ColorRGBGreen} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasColorRGBGreen(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, COLORRGBGREEN, value);
	}

    /**
     * Check if {@code ColorRGBGreen} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasColorRGBGreen( Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORRGBGREEN, value);
	}

     /**
     * Get all values of property {@code ColorRGBGreen} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllColorRGBGreen_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORRGBGREEN);
	}

    /**
     * Get all values of property {@code ColorRGBGreen} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllColorRGBGreen_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORRGBGREEN, Node.class);
	}

    /**
     * Get all values of property {@code ColorRGBGreen} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllColorRGBGreen_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORRGBGREEN);
	}

    /**
     * Get all values of property {@code ColorRGBGreen} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllColorRGBGreen_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORRGBGREEN, Node.class);
	}
 
    /**
     * Get all values of property {@code ColorRGBGreen}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllColorRGBGreen(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORRGBGREEN, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBGreen} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllColorRGBGreen_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORRGBGREEN, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBGreen}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllColorRGBGreen() {
		return Base.getAll(this.model, this.getResource(), COLORRGBGREEN, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBGreen} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllColorRGBGreen_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORRGBGREEN, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code ColorRGBGreen} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addColorRGBGreen(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, COLORRGBGREEN, value);
	}

    /**
     * Adds a value to property {@code ColorRGBGreen} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addColorRGBGreen(Node value) {
		Base.add(this.model, this.getResource(), COLORRGBGREEN, value);
	}
    /**
     * Adds a value to property {@code ColorRGBGreen} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addColorRGBGreen(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, COLORRGBGREEN, value);
	}

    /**
     * Adds a value to property {@code ColorRGBGreen} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addColorRGBGreen(java.lang.Float value) {
		Base.add(this.model, this.getResource(), COLORRGBGREEN, value);
	}
  

    /**
     * Sets a value of property {@code ColorRGBGreen} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setColorRGBGreen(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, COLORRGBGREEN, value);
	}

    /**
     * Sets a value of property {@code ColorRGBGreen} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setColorRGBGreen(Node value) {
		Base.set(this.model, this.getResource(), COLORRGBGREEN, value);
	}
    /**
     * Sets a value of property {@code ColorRGBGreen} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setColorRGBGreen(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, COLORRGBGREEN, value);
	}

    /**
     * Sets a value of property {@code ColorRGBGreen} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setColorRGBGreen(java.lang.Float value) {
		Base.set(this.model, this.getResource(), COLORRGBGREEN, value);
	}
  


    /**
     * Removes a value of property {@code ColorRGBGreen} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeColorRGBGreen(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, COLORRGBGREEN, value);
	}

    /**
     * Removes a value of property {@code ColorRGBGreen} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeColorRGBGreen(Node value) {
		Base.remove(this.model, this.getResource(), COLORRGBGREEN, value);
	}
    /**
     * Removes a value of property {@code ColorRGBGreen} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeColorRGBGreen(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, COLORRGBGREEN, value);
	}

    /**
     * Removes a value of property {@code ColorRGBGreen} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeColorRGBGreen(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), COLORRGBGREEN, value);
	}
  
    /**
     * Removes all values of property {@code ColorRGBGreen}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllColorRGBGreen(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORRGBGREEN);
	}

    /**
     * Removes all values of property {@code ColorRGBGreen}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllColorRGBGreen() {
		Base.removeAll(this.model, this.getResource(), COLORRGBGREEN);
	}
     /**
     * Check if {@code ColorRGBRed} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasColorRGBRed(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, COLORRGBRED);
	}

    /**
     * Check if {@code ColorRGBRed} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasColorRGBRed() {
		return Base.has(this.model, this.getResource(), COLORRGBRED);
	}

    /**
     * Check if {@code ColorRGBRed} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasColorRGBRed(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, COLORRGBRED, value);
	}

    /**
     * Check if {@code ColorRGBRed} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasColorRGBRed( Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORRGBRED, value);
	}

     /**
     * Get all values of property {@code ColorRGBRed} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllColorRGBRed_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORRGBRED);
	}

    /**
     * Get all values of property {@code ColorRGBRed} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllColorRGBRed_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORRGBRED, Node.class);
	}

    /**
     * Get all values of property {@code ColorRGBRed} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllColorRGBRed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORRGBRED);
	}

    /**
     * Get all values of property {@code ColorRGBRed} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllColorRGBRed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORRGBRED, Node.class);
	}
 
    /**
     * Get all values of property {@code ColorRGBRed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllColorRGBRed(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORRGBRED, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBRed} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllColorRGBRed_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORRGBRED, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBRed}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllColorRGBRed() {
		return Base.getAll(this.model, this.getResource(), COLORRGBRED, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code ColorRGBRed} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllColorRGBRed_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORRGBRED, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code ColorRGBRed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addColorRGBRed(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, COLORRGBRED, value);
	}

    /**
     * Adds a value to property {@code ColorRGBRed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addColorRGBRed(Node value) {
		Base.add(this.model, this.getResource(), COLORRGBRED, value);
	}
    /**
     * Adds a value to property {@code ColorRGBRed} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addColorRGBRed(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, COLORRGBRED, value);
	}

    /**
     * Adds a value to property {@code ColorRGBRed} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addColorRGBRed(java.lang.Float value) {
		Base.add(this.model, this.getResource(), COLORRGBRED, value);
	}
  

    /**
     * Sets a value of property {@code ColorRGBRed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setColorRGBRed(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, COLORRGBRED, value);
	}

    /**
     * Sets a value of property {@code ColorRGBRed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setColorRGBRed(Node value) {
		Base.set(this.model, this.getResource(), COLORRGBRED, value);
	}
    /**
     * Sets a value of property {@code ColorRGBRed} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setColorRGBRed(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, COLORRGBRED, value);
	}

    /**
     * Sets a value of property {@code ColorRGBRed} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setColorRGBRed(java.lang.Float value) {
		Base.set(this.model, this.getResource(), COLORRGBRED, value);
	}
  


    /**
     * Removes a value of property {@code ColorRGBRed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeColorRGBRed(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, COLORRGBRED, value);
	}

    /**
     * Removes a value of property {@code ColorRGBRed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeColorRGBRed(Node value) {
		Base.remove(this.model, this.getResource(), COLORRGBRED, value);
	}
    /**
     * Removes a value of property {@code ColorRGBRed} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeColorRGBRed(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, COLORRGBRED, value);
	}

    /**
     * Removes a value of property {@code ColorRGBRed} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeColorRGBRed(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), COLORRGBRED, value);
	}
  
    /**
     * Removes all values of property {@code ColorRGBRed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllColorRGBRed(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORRGBRED);
	}

    /**
     * Removes all values of property {@code ColorRGBRed}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllColorRGBRed() {
		Base.removeAll(this.model, this.getResource(), COLORRGBRED);
	}
     /**
     * Check if {@code Colorhslhue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasColorhslhue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, COLORHSLHUE);
	}

    /**
     * Check if {@code Colorhslhue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasColorhslhue() {
		return Base.has(this.model, this.getResource(), COLORHSLHUE);
	}

    /**
     * Check if {@code Colorhslhue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasColorhslhue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, COLORHSLHUE, value);
	}

    /**
     * Check if {@code Colorhslhue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasColorhslhue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORHSLHUE, value);
	}

     /**
     * Get all values of property {@code Colorhslhue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllColorhslhue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORHSLHUE);
	}

    /**
     * Get all values of property {@code Colorhslhue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllColorhslhue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORHSLHUE, Node.class);
	}

    /**
     * Get all values of property {@code Colorhslhue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllColorhslhue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORHSLHUE);
	}

    /**
     * Get all values of property {@code Colorhslhue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllColorhslhue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORHSLHUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Colorhslhue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllColorhslhue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORHSLHUE, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Colorhslhue} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllColorhslhue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORHSLHUE, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Colorhslhue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllColorhslhue() {
		return Base.getAll(this.model, this.getResource(), COLORHSLHUE, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Colorhslhue} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllColorhslhue_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORHSLHUE, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code Colorhslhue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addColorhslhue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, COLORHSLHUE, value);
	}

    /**
     * Adds a value to property {@code Colorhslhue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addColorhslhue(Node value) {
		Base.add(this.model, this.getResource(), COLORHSLHUE, value);
	}
    /**
     * Adds a value to property {@code Colorhslhue} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addColorhslhue(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, COLORHSLHUE, value);
	}

    /**
     * Adds a value to property {@code Colorhslhue} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addColorhslhue(java.lang.Float value) {
		Base.add(this.model, this.getResource(), COLORHSLHUE, value);
	}
  

    /**
     * Sets a value of property {@code Colorhslhue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setColorhslhue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, COLORHSLHUE, value);
	}

    /**
     * Sets a value of property {@code Colorhslhue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setColorhslhue(Node value) {
		Base.set(this.model, this.getResource(), COLORHSLHUE, value);
	}
    /**
     * Sets a value of property {@code Colorhslhue} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setColorhslhue(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, COLORHSLHUE, value);
	}

    /**
     * Sets a value of property {@code Colorhslhue} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setColorhslhue(java.lang.Float value) {
		Base.set(this.model, this.getResource(), COLORHSLHUE, value);
	}
  


    /**
     * Removes a value of property {@code Colorhslhue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeColorhslhue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, COLORHSLHUE, value);
	}

    /**
     * Removes a value of property {@code Colorhslhue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeColorhslhue(Node value) {
		Base.remove(this.model, this.getResource(), COLORHSLHUE, value);
	}
    /**
     * Removes a value of property {@code Colorhslhue} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeColorhslhue(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, COLORHSLHUE, value);
	}

    /**
     * Removes a value of property {@code Colorhslhue} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeColorhslhue(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), COLORHSLHUE, value);
	}
  
    /**
     * Removes all values of property {@code Colorhslhue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllColorhslhue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORHSLHUE);
	}

    /**
     * Removes all values of property {@code Colorhslhue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllColorhslhue() {
		Base.removeAll(this.model, this.getResource(), COLORHSLHUE);
	}
     /**
     * Check if {@code Containedby} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasContainedby(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, CONTAINEDBY);
	}

    /**
     * Check if {@code Containedby} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasContainedby() {
		return Base.has(this.model, this.getResource(), CONTAINEDBY);
	}

    /**
     * Check if {@code Containedby} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasContainedby(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, CONTAINEDBY, value);
	}

    /**
     * Check if {@code Containedby} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasContainedby( Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTAINEDBY, value);
	}

     /**
     * Get all values of property {@code Containedby} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllContainedby_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTAINEDBY);
	}

    /**
     * Get all values of property {@code Containedby} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllContainedby_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINEDBY, Node.class);
	}

    /**
     * Get all values of property {@code Containedby} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllContainedby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTAINEDBY);
	}

    /**
     * Get all values of property {@code Containedby} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllContainedby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINEDBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Containedby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllContainedby(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTAINEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Containedby} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllContainedby_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Containedby}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllContainedby() {
		return Base.getAll(this.model, this.getResource(), CONTAINEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Containedby} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllContainedby_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINEDBY, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Containedby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addContainedby(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, CONTAINEDBY, value);
	}

    /**
     * Adds a value to property {@code Containedby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addContainedby(Node value) {
		Base.add(this.model, this.getResource(), CONTAINEDBY, value);
	}
    /**
     * Adds a value to property {@code Containedby} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addContainedby(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, CONTAINEDBY, value);
	}

    /**
     * Adds a value to property {@code Containedby} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addContainedby(Thing1 value) {
		Base.add(this.model, this.getResource(), CONTAINEDBY, value);
	}
  

    /**
     * Sets a value of property {@code Containedby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setContainedby(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, CONTAINEDBY, value);
	}

    /**
     * Sets a value of property {@code Containedby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setContainedby(Node value) {
		Base.set(this.model, this.getResource(), CONTAINEDBY, value);
	}
    /**
     * Sets a value of property {@code Containedby} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setContainedby(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, CONTAINEDBY, value);
	}

    /**
     * Sets a value of property {@code Containedby} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setContainedby(Thing1 value) {
		Base.set(this.model, this.getResource(), CONTAINEDBY, value);
	}
  


    /**
     * Removes a value of property {@code Containedby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeContainedby(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, CONTAINEDBY, value);
	}

    /**
     * Removes a value of property {@code Containedby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeContainedby(Node value) {
		Base.remove(this.model, this.getResource(), CONTAINEDBY, value);
	}
    /**
     * Removes a value of property {@code Containedby} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeContainedby(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, CONTAINEDBY, value);
	}

    /**
     * Removes a value of property {@code Containedby} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeContainedby(Thing1 value) {
		Base.remove(this.model, this.getResource(), CONTAINEDBY, value);
	}
  
    /**
     * Removes all values of property {@code Containedby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllContainedby(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTAINEDBY);
	}

    /**
     * Removes all values of property {@code Containedby}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllContainedby() {
		Base.removeAll(this.model, this.getResource(), CONTAINEDBY);
	}
     /**
     * Check if {@code Containmentcontainee} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasContainmentcontainee(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, CONTAINMENTCONTAINEE);
	}

    /**
     * Check if {@code Containmentcontainee} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasContainmentcontainee() {
		return Base.has(this.model, this.getResource(), CONTAINMENTCONTAINEE);
	}

    /**
     * Check if {@code Containmentcontainee} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasContainmentcontainee(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, CONTAINMENTCONTAINEE, value);
	}

    /**
     * Check if {@code Containmentcontainee} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasContainmentcontainee( Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTAINMENTCONTAINEE, value);
	}

     /**
     * Get all values of property {@code Containmentcontainee} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllContainmentcontainee_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTAINMENTCONTAINEE);
	}

    /**
     * Get all values of property {@code Containmentcontainee} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllContainmentcontainee_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINMENTCONTAINEE, Node.class);
	}

    /**
     * Get all values of property {@code Containmentcontainee} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllContainmentcontainee_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTAINMENTCONTAINEE);
	}

    /**
     * Get all values of property {@code Containmentcontainee} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllContainmentcontainee_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINMENTCONTAINEE, Node.class);
	}
 
    /**
     * Get all values of property {@code Containmentcontainee}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllContainmentcontainee(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTAINMENTCONTAINEE, Thing1.class);
	}

    /**
     * Get all values of property {@code Containmentcontainee} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllContainmentcontainee_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINMENTCONTAINEE, Thing1.class);
	}

    /**
     * Get all values of property {@code Containmentcontainee}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllContainmentcontainee() {
		return Base.getAll(this.model, this.getResource(), CONTAINMENTCONTAINEE, Thing1.class);
	}

    /**
     * Get all values of property {@code Containmentcontainee} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllContainmentcontainee_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINMENTCONTAINEE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Containmentcontainee} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addContainmentcontainee(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, CONTAINMENTCONTAINEE, value);
	}

    /**
     * Adds a value to property {@code Containmentcontainee} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addContainmentcontainee(Node value) {
		Base.add(this.model, this.getResource(), CONTAINMENTCONTAINEE, value);
	}
    /**
     * Adds a value to property {@code Containmentcontainee} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addContainmentcontainee(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, CONTAINMENTCONTAINEE, value);
	}

    /**
     * Adds a value to property {@code Containmentcontainee} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addContainmentcontainee(Thing1 value) {
		Base.add(this.model, this.getResource(), CONTAINMENTCONTAINEE, value);
	}
  

    /**
     * Sets a value of property {@code Containmentcontainee} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setContainmentcontainee(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, CONTAINMENTCONTAINEE, value);
	}

    /**
     * Sets a value of property {@code Containmentcontainee} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setContainmentcontainee(Node value) {
		Base.set(this.model, this.getResource(), CONTAINMENTCONTAINEE, value);
	}
    /**
     * Sets a value of property {@code Containmentcontainee} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setContainmentcontainee(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, CONTAINMENTCONTAINEE, value);
	}

    /**
     * Sets a value of property {@code Containmentcontainee} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setContainmentcontainee(Thing1 value) {
		Base.set(this.model, this.getResource(), CONTAINMENTCONTAINEE, value);
	}
  


    /**
     * Removes a value of property {@code Containmentcontainee} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeContainmentcontainee(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, CONTAINMENTCONTAINEE, value);
	}

    /**
     * Removes a value of property {@code Containmentcontainee} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeContainmentcontainee(Node value) {
		Base.remove(this.model, this.getResource(), CONTAINMENTCONTAINEE, value);
	}
    /**
     * Removes a value of property {@code Containmentcontainee} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeContainmentcontainee(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, CONTAINMENTCONTAINEE, value);
	}

    /**
     * Removes a value of property {@code Containmentcontainee} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeContainmentcontainee(Thing1 value) {
		Base.remove(this.model, this.getResource(), CONTAINMENTCONTAINEE, value);
	}
  
    /**
     * Removes all values of property {@code Containmentcontainee}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllContainmentcontainee(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTAINMENTCONTAINEE);
	}

    /**
     * Removes all values of property {@code Containmentcontainee}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllContainmentcontainee() {
		Base.removeAll(this.model, this.getResource(), CONTAINMENTCONTAINEE);
	}
     /**
     * Check if {@code Containmentcontainer} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasContainmentcontainer(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, CONTAINMENTCONTAINER);
	}

    /**
     * Check if {@code Containmentcontainer} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasContainmentcontainer() {
		return Base.has(this.model, this.getResource(), CONTAINMENTCONTAINER);
	}

    /**
     * Check if {@code Containmentcontainer} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasContainmentcontainer(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, CONTAINMENTCONTAINER, value);
	}

    /**
     * Check if {@code Containmentcontainer} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasContainmentcontainer( Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTAINMENTCONTAINER, value);
	}

     /**
     * Get all values of property {@code Containmentcontainer} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllContainmentcontainer_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTAINMENTCONTAINER);
	}

    /**
     * Get all values of property {@code Containmentcontainer} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllContainmentcontainer_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINMENTCONTAINER, Node.class);
	}

    /**
     * Get all values of property {@code Containmentcontainer} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllContainmentcontainer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTAINMENTCONTAINER);
	}

    /**
     * Get all values of property {@code Containmentcontainer} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllContainmentcontainer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINMENTCONTAINER, Node.class);
	}
 
    /**
     * Get all values of property {@code Containmentcontainer}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllContainmentcontainer(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTAINMENTCONTAINER, Thing1.class);
	}

    /**
     * Get all values of property {@code Containmentcontainer} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllContainmentcontainer_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINMENTCONTAINER, Thing1.class);
	}

    /**
     * Get all values of property {@code Containmentcontainer}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllContainmentcontainer() {
		return Base.getAll(this.model, this.getResource(), CONTAINMENTCONTAINER, Thing1.class);
	}

    /**
     * Get all values of property {@code Containmentcontainer} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllContainmentcontainer_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINMENTCONTAINER, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Containmentcontainer} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addContainmentcontainer(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, CONTAINMENTCONTAINER, value);
	}

    /**
     * Adds a value to property {@code Containmentcontainer} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addContainmentcontainer(Node value) {
		Base.add(this.model, this.getResource(), CONTAINMENTCONTAINER, value);
	}
    /**
     * Adds a value to property {@code Containmentcontainer} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addContainmentcontainer(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, CONTAINMENTCONTAINER, value);
	}

    /**
     * Adds a value to property {@code Containmentcontainer} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addContainmentcontainer(Thing1 value) {
		Base.add(this.model, this.getResource(), CONTAINMENTCONTAINER, value);
	}
  

    /**
     * Sets a value of property {@code Containmentcontainer} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setContainmentcontainer(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, CONTAINMENTCONTAINER, value);
	}

    /**
     * Sets a value of property {@code Containmentcontainer} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setContainmentcontainer(Node value) {
		Base.set(this.model, this.getResource(), CONTAINMENTCONTAINER, value);
	}
    /**
     * Sets a value of property {@code Containmentcontainer} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setContainmentcontainer(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, CONTAINMENTCONTAINER, value);
	}

    /**
     * Sets a value of property {@code Containmentcontainer} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setContainmentcontainer(Thing1 value) {
		Base.set(this.model, this.getResource(), CONTAINMENTCONTAINER, value);
	}
  


    /**
     * Removes a value of property {@code Containmentcontainer} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeContainmentcontainer(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, CONTAINMENTCONTAINER, value);
	}

    /**
     * Removes a value of property {@code Containmentcontainer} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeContainmentcontainer(Node value) {
		Base.remove(this.model, this.getResource(), CONTAINMENTCONTAINER, value);
	}
    /**
     * Removes a value of property {@code Containmentcontainer} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeContainmentcontainer(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, CONTAINMENTCONTAINER, value);
	}

    /**
     * Removes a value of property {@code Containmentcontainer} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeContainmentcontainer(Thing1 value) {
		Base.remove(this.model, this.getResource(), CONTAINMENTCONTAINER, value);
	}
  
    /**
     * Removes all values of property {@code Containmentcontainer}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllContainmentcontainer(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTAINMENTCONTAINER);
	}

    /**
     * Removes all values of property {@code Containmentcontainer}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllContainmentcontainer() {
		Base.removeAll(this.model, this.getResource(), CONTAINMENTCONTAINER);
	}
     /**
     * Check if {@code Graphicattribute} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasGraphicattribute(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, GRAPHICATTRIBUTE);
	}

    /**
     * Check if {@code Graphicattribute} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasGraphicattribute() {
		return Base.has(this.model, this.getResource(), GRAPHICATTRIBUTE);
	}

    /**
     * Check if {@code Graphicattribute} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasGraphicattribute(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, GRAPHICATTRIBUTE, value);
	}

    /**
     * Check if {@code Graphicattribute} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasGraphicattribute( Node value ) {
		return Base.hasValue(this.model, this.getResource(), GRAPHICATTRIBUTE, value);
	}

     /**
     * Get all values of property {@code Graphicattribute} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllGraphicattribute_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GRAPHICATTRIBUTE);
	}

    /**
     * Get all values of property {@code Graphicattribute} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllGraphicattribute_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GRAPHICATTRIBUTE, Node.class);
	}

    /**
     * Get all values of property {@code Graphicattribute} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllGraphicattribute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GRAPHICATTRIBUTE);
	}

    /**
     * Get all values of property {@code Graphicattribute} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllGraphicattribute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GRAPHICATTRIBUTE, Node.class);
	}
 
    /**
     * Get all values of property {@code Graphicattribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllGraphicattribute(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, GRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Graphicattribute} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllGraphicattribute_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Graphicattribute}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllGraphicattribute() {
		return Base.getAll(this.model, this.getResource(), GRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Graphicattribute} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllGraphicattribute_as() {
		return Base.getAll_as(this.model, this.getResource(), GRAPHICATTRIBUTE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Graphicattribute} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addGraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, GRAPHICATTRIBUTE, value);
	}

    /**
     * Adds a value to property {@code Graphicattribute} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addGraphicattribute(Node value) {
		Base.add(this.model, this.getResource(), GRAPHICATTRIBUTE, value);
	}
    /**
     * Adds a value to property {@code Graphicattribute} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addGraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, GRAPHICATTRIBUTE, value);
	}

    /**
     * Adds a value to property {@code Graphicattribute} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addGraphicattribute(Thing1 value) {
		Base.add(this.model, this.getResource(), GRAPHICATTRIBUTE, value);
	}
  

    /**
     * Sets a value of property {@code Graphicattribute} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setGraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, GRAPHICATTRIBUTE, value);
	}

    /**
     * Sets a value of property {@code Graphicattribute} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setGraphicattribute(Node value) {
		Base.set(this.model, this.getResource(), GRAPHICATTRIBUTE, value);
	}
    /**
     * Sets a value of property {@code Graphicattribute} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setGraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, GRAPHICATTRIBUTE, value);
	}

    /**
     * Sets a value of property {@code Graphicattribute} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setGraphicattribute(Thing1 value) {
		Base.set(this.model, this.getResource(), GRAPHICATTRIBUTE, value);
	}
  


    /**
     * Removes a value of property {@code Graphicattribute} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeGraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, GRAPHICATTRIBUTE, value);
	}

    /**
     * Removes a value of property {@code Graphicattribute} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeGraphicattribute(Node value) {
		Base.remove(this.model, this.getResource(), GRAPHICATTRIBUTE, value);
	}
    /**
     * Removes a value of property {@code Graphicattribute} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeGraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, GRAPHICATTRIBUTE, value);
	}

    /**
     * Removes a value of property {@code Graphicattribute} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeGraphicattribute(Thing1 value) {
		Base.remove(this.model, this.getResource(), GRAPHICATTRIBUTE, value);
	}
  
    /**
     * Removes all values of property {@code Graphicattribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllGraphicattribute(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, GRAPHICATTRIBUTE);
	}

    /**
     * Removes all values of property {@code Graphicattribute}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllGraphicattribute() {
		Base.removeAll(this.model, this.getResource(), GRAPHICATTRIBUTE);
	}
     /**
     * Check if {@code Graphicrelations} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasGraphicrelations(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, GRAPHICRELATIONS);
	}

    /**
     * Check if {@code Graphicrelations} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasGraphicrelations() {
		return Base.has(this.model, this.getResource(), GRAPHICRELATIONS);
	}

    /**
     * Check if {@code Graphicrelations} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasGraphicrelations(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, GRAPHICRELATIONS, value);
	}

    /**
     * Check if {@code Graphicrelations} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasGraphicrelations( Node value ) {
		return Base.hasValue(this.model, this.getResource(), GRAPHICRELATIONS, value);
	}

     /**
     * Get all values of property {@code Graphicrelations} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllGraphicrelations_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GRAPHICRELATIONS);
	}

    /**
     * Get all values of property {@code Graphicrelations} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllGraphicrelations_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GRAPHICRELATIONS, Node.class);
	}

    /**
     * Get all values of property {@code Graphicrelations} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllGraphicrelations_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GRAPHICRELATIONS);
	}

    /**
     * Get all values of property {@code Graphicrelations} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllGraphicrelations_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GRAPHICRELATIONS, Node.class);
	}
 
    /**
     * Get all values of property {@code Graphicrelations}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllGraphicrelations(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, GRAPHICRELATIONS, Thing1.class);
	}

    /**
     * Get all values of property {@code Graphicrelations} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllGraphicrelations_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GRAPHICRELATIONS, Thing1.class);
	}

    /**
     * Get all values of property {@code Graphicrelations}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllGraphicrelations() {
		return Base.getAll(this.model, this.getResource(), GRAPHICRELATIONS, Thing1.class);
	}

    /**
     * Get all values of property {@code Graphicrelations} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllGraphicrelations_as() {
		return Base.getAll_as(this.model, this.getResource(), GRAPHICRELATIONS, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Graphicrelations} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addGraphicrelations(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, GRAPHICRELATIONS, value);
	}

    /**
     * Adds a value to property {@code Graphicrelations} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addGraphicrelations(Node value) {
		Base.add(this.model, this.getResource(), GRAPHICRELATIONS, value);
	}
    /**
     * Adds a value to property {@code Graphicrelations} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addGraphicrelations(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, GRAPHICRELATIONS, value);
	}

    /**
     * Adds a value to property {@code Graphicrelations} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addGraphicrelations(Thing1 value) {
		Base.add(this.model, this.getResource(), GRAPHICRELATIONS, value);
	}
  

    /**
     * Sets a value of property {@code Graphicrelations} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setGraphicrelations(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, GRAPHICRELATIONS, value);
	}

    /**
     * Sets a value of property {@code Graphicrelations} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setGraphicrelations(Node value) {
		Base.set(this.model, this.getResource(), GRAPHICRELATIONS, value);
	}
    /**
     * Sets a value of property {@code Graphicrelations} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setGraphicrelations(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, GRAPHICRELATIONS, value);
	}

    /**
     * Sets a value of property {@code Graphicrelations} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setGraphicrelations(Thing1 value) {
		Base.set(this.model, this.getResource(), GRAPHICRELATIONS, value);
	}
  


    /**
     * Removes a value of property {@code Graphicrelations} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeGraphicrelations(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, GRAPHICRELATIONS, value);
	}

    /**
     * Removes a value of property {@code Graphicrelations} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeGraphicrelations(Node value) {
		Base.remove(this.model, this.getResource(), GRAPHICRELATIONS, value);
	}
    /**
     * Removes a value of property {@code Graphicrelations} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeGraphicrelations(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, GRAPHICRELATIONS, value);
	}

    /**
     * Removes a value of property {@code Graphicrelations} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeGraphicrelations(Thing1 value) {
		Base.remove(this.model, this.getResource(), GRAPHICRELATIONS, value);
	}
  
    /**
     * Removes all values of property {@code Graphicrelations}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllGraphicrelations(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, GRAPHICRELATIONS);
	}

    /**
     * Removes all values of property {@code Graphicrelations}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllGraphicrelations() {
		Base.removeAll(this.model, this.getResource(), GRAPHICRELATIONS);
	}
     /**
     * Check if {@code Labeledwith} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLabeledwith(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LABELEDWITH);
	}

    /**
     * Check if {@code Labeledwith} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLabeledwith() {
		return Base.has(this.model, this.getResource(), LABELEDWITH);
	}

    /**
     * Check if {@code Labeledwith} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLabeledwith(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LABELEDWITH, value);
	}

    /**
     * Check if {@code Labeledwith} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLabeledwith( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LABELEDWITH, value);
	}

     /**
     * Get all values of property {@code Labeledwith} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLabeledwith_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LABELEDWITH);
	}

    /**
     * Get all values of property {@code Labeledwith} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLabeledwith_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELEDWITH, Node.class);
	}

    /**
     * Get all values of property {@code Labeledwith} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLabeledwith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LABELEDWITH);
	}

    /**
     * Get all values of property {@code Labeledwith} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLabeledwith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LABELEDWITH, Node.class);
	}
 
    /**
     * Get all values of property {@code Labeledwith}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Labeling> getAllLabeledwith(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LABELEDWITH, Labeling.class);
	}

    /**
     * Get all values of property {@code Labeledwith} as a ReactorResult of {@linkplain Labeling}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Labeling> getAllLabeledwith_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELEDWITH, Labeling.class);
	}

    /**
     * Get all values of property {@code Labeledwith}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Labeling> getAllLabeledwith() {
		return Base.getAll(this.model, this.getResource(), LABELEDWITH, Labeling.class);
	}

    /**
     * Get all values of property {@code Labeledwith} as a ReactorResult of {@linkplain Labeling}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Labeling> getAllLabeledwith_as() {
		return Base.getAll_as(this.model, this.getResource(), LABELEDWITH, Labeling.class);
	}

 
    /**
     * Adds a value to property {@code Labeledwith} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLabeledwith(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LABELEDWITH, value);
	}

    /**
     * Adds a value to property {@code Labeledwith} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLabeledwith(Node value) {
		Base.add(this.model, this.getResource(), LABELEDWITH, value);
	}
    /**
     * Adds a value to property {@code Labeledwith} from an instance of {@linkplain Labeling}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLabeledwith(Model model, Resource instanceResource, Labeling value) {
		Base.add(model, instanceResource, LABELEDWITH, value);
	}

    /**
     * Adds a value to property {@code Labeledwith} from an instance of {@linkplain Labeling}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLabeledwith(Labeling value) {
		Base.add(this.model, this.getResource(), LABELEDWITH, value);
	}
  

    /**
     * Sets a value of property {@code Labeledwith} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLabeledwith(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LABELEDWITH, value);
	}

    /**
     * Sets a value of property {@code Labeledwith} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLabeledwith(Node value) {
		Base.set(this.model, this.getResource(), LABELEDWITH, value);
	}
    /**
     * Sets a value of property {@code Labeledwith} from an instance of {@linkplain Labeling}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLabeledwith(Model model, Resource instanceResource, Labeling value) {
		Base.set(model, instanceResource, LABELEDWITH, value);
	}

    /**
     * Sets a value of property {@code Labeledwith} from an instance of {@linkplain Labeling}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLabeledwith(Labeling value) {
		Base.set(this.model, this.getResource(), LABELEDWITH, value);
	}
  


    /**
     * Removes a value of property {@code Labeledwith} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLabeledwith(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LABELEDWITH, value);
	}

    /**
     * Removes a value of property {@code Labeledwith} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLabeledwith(Node value) {
		Base.remove(this.model, this.getResource(), LABELEDWITH, value);
	}
    /**
     * Removes a value of property {@code Labeledwith} given as an instance of {@linkplain Labeling}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLabeledwith(Model model, Resource instanceResource, Labeling value) {
		Base.remove(model, instanceResource, LABELEDWITH, value);
	}

    /**
     * Removes a value of property {@code Labeledwith} given as an instance of {@linkplain Labeling}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLabeledwith(Labeling value) {
		Base.remove(this.model, this.getResource(), LABELEDWITH, value);
	}
  
    /**
     * Removes all values of property {@code Labeledwith}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLabeledwith(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LABELEDWITH);
	}

    /**
     * Removes all values of property {@code Labeledwith}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLabeledwith() {
		Base.removeAll(this.model, this.getResource(), LABELEDWITH);
	}
     /**
     * Check if {@code Labels} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLabels(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LABELS);
	}

    /**
     * Check if {@code Labels} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLabels() {
		return Base.has(this.model, this.getResource(), LABELS);
	}

    /**
     * Check if {@code Labels} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLabels(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LABELS, value);
	}

    /**
     * Check if {@code Labels} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLabels( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LABELS, value);
	}

     /**
     * Get all values of property {@code Labels} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLabels_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LABELS);
	}

    /**
     * Get all values of property {@code Labels} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLabels_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELS, Node.class);
	}

    /**
     * Get all values of property {@code Labels} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLabels_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LABELS);
	}

    /**
     * Get all values of property {@code Labels} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLabels_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LABELS, Node.class);
	}
 
    /**
     * Get all values of property {@code Labels}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Labeling> getAllLabels(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LABELS, Labeling.class);
	}

    /**
     * Get all values of property {@code Labels} as a ReactorResult of {@linkplain Labeling}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Labeling> getAllLabels_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELS, Labeling.class);
	}

    /**
     * Get all values of property {@code Labels}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Labeling> getAllLabels() {
		return Base.getAll(this.model, this.getResource(), LABELS, Labeling.class);
	}

    /**
     * Get all values of property {@code Labels} as a ReactorResult of {@linkplain Labeling}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Labeling> getAllLabels_as() {
		return Base.getAll_as(this.model, this.getResource(), LABELS, Labeling.class);
	}

 
    /**
     * Adds a value to property {@code Labels} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLabels(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LABELS, value);
	}

    /**
     * Adds a value to property {@code Labels} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLabels(Node value) {
		Base.add(this.model, this.getResource(), LABELS, value);
	}
    /**
     * Adds a value to property {@code Labels} from an instance of {@linkplain Labeling}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLabels(Model model, Resource instanceResource, Labeling value) {
		Base.add(model, instanceResource, LABELS, value);
	}

    /**
     * Adds a value to property {@code Labels} from an instance of {@linkplain Labeling}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLabels(Labeling value) {
		Base.add(this.model, this.getResource(), LABELS, value);
	}
  

    /**
     * Sets a value of property {@code Labels} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLabels(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LABELS, value);
	}

    /**
     * Sets a value of property {@code Labels} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLabels(Node value) {
		Base.set(this.model, this.getResource(), LABELS, value);
	}
    /**
     * Sets a value of property {@code Labels} from an instance of {@linkplain Labeling}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLabels(Model model, Resource instanceResource, Labeling value) {
		Base.set(model, instanceResource, LABELS, value);
	}

    /**
     * Sets a value of property {@code Labels} from an instance of {@linkplain Labeling}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLabels(Labeling value) {
		Base.set(this.model, this.getResource(), LABELS, value);
	}
  


    /**
     * Removes a value of property {@code Labels} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLabels(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LABELS, value);
	}

    /**
     * Removes a value of property {@code Labels} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLabels(Node value) {
		Base.remove(this.model, this.getResource(), LABELS, value);
	}
    /**
     * Removes a value of property {@code Labels} given as an instance of {@linkplain Labeling}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLabels(Model model, Resource instanceResource, Labeling value) {
		Base.remove(model, instanceResource, LABELS, value);
	}

    /**
     * Removes a value of property {@code Labels} given as an instance of {@linkplain Labeling}.
     * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLabels(Labeling value) {
		Base.remove(this.model, this.getResource(), LABELS, value);
	}
  
    /**
     * Removes all values of property {@code Labels}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLabels(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LABELS);
	}

    /**
     * Removes all values of property {@code Labels}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLabels() {
		Base.removeAll(this.model, this.getResource(), LABELS);
	}
     /**
     * Check if {@code Linkedfrom} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLinkedfrom(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LINKEDFROM);
	}

    /**
     * Check if {@code Linkedfrom} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLinkedfrom() {
		return Base.has(this.model, this.getResource(), LINKEDFROM);
	}

    /**
     * Check if {@code Linkedfrom} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLinkedfrom(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LINKEDFROM, value);
	}

    /**
     * Check if {@code Linkedfrom} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLinkedfrom( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LINKEDFROM, value);
	}

     /**
     * Get all values of property {@code Linkedfrom} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLinkedfrom_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LINKEDFROM);
	}

    /**
     * Get all values of property {@code Linkedfrom} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLinkedfrom_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKEDFROM, Node.class);
	}

    /**
     * Get all values of property {@code Linkedfrom} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLinkedfrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LINKEDFROM);
	}

    /**
     * Get all values of property {@code Linkedfrom} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLinkedfrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LINKEDFROM, Node.class);
	}
 
    /**
     * Get all values of property {@code Linkedfrom}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<DirectedLinking> getAllLinkedfrom(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LINKEDFROM, DirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedfrom} as a ReactorResult of {@linkplain DirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<DirectedLinking> getAllLinkedfrom_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKEDFROM, DirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedfrom}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<DirectedLinking> getAllLinkedfrom() {
		return Base.getAll(this.model, this.getResource(), LINKEDFROM, DirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedfrom} as a ReactorResult of {@linkplain DirectedLinking}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<DirectedLinking> getAllLinkedfrom_as() {
		return Base.getAll_as(this.model, this.getResource(), LINKEDFROM, DirectedLinking.class);
	}

 
    /**
     * Adds a value to property {@code Linkedfrom} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLinkedfrom(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LINKEDFROM, value);
	}

    /**
     * Adds a value to property {@code Linkedfrom} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLinkedfrom(Node value) {
		Base.add(this.model, this.getResource(), LINKEDFROM, value);
	}
    /**
     * Adds a value to property {@code Linkedfrom} from an instance of {@linkplain DirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLinkedfrom(Model model, Resource instanceResource, DirectedLinking value) {
		Base.add(model, instanceResource, LINKEDFROM, value);
	}

    /**
     * Adds a value to property {@code Linkedfrom} from an instance of {@linkplain DirectedLinking}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLinkedfrom(DirectedLinking value) {
		Base.add(this.model, this.getResource(), LINKEDFROM, value);
	}
  

    /**
     * Sets a value of property {@code Linkedfrom} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLinkedfrom(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LINKEDFROM, value);
	}

    /**
     * Sets a value of property {@code Linkedfrom} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLinkedfrom(Node value) {
		Base.set(this.model, this.getResource(), LINKEDFROM, value);
	}
    /**
     * Sets a value of property {@code Linkedfrom} from an instance of {@linkplain DirectedLinking}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLinkedfrom(Model model, Resource instanceResource, DirectedLinking value) {
		Base.set(model, instanceResource, LINKEDFROM, value);
	}

    /**
     * Sets a value of property {@code Linkedfrom} from an instance of {@linkplain DirectedLinking}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLinkedfrom(DirectedLinking value) {
		Base.set(this.model, this.getResource(), LINKEDFROM, value);
	}
  


    /**
     * Removes a value of property {@code Linkedfrom} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLinkedfrom(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LINKEDFROM, value);
	}

    /**
     * Removes a value of property {@code Linkedfrom} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLinkedfrom(Node value) {
		Base.remove(this.model, this.getResource(), LINKEDFROM, value);
	}
    /**
     * Removes a value of property {@code Linkedfrom} given as an instance of {@linkplain DirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLinkedfrom(Model model, Resource instanceResource, DirectedLinking value) {
		Base.remove(model, instanceResource, LINKEDFROM, value);
	}

    /**
     * Removes a value of property {@code Linkedfrom} given as an instance of {@linkplain DirectedLinking}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLinkedfrom(DirectedLinking value) {
		Base.remove(this.model, this.getResource(), LINKEDFROM, value);
	}
  
    /**
     * Removes all values of property {@code Linkedfrom}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLinkedfrom(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LINKEDFROM);
	}

    /**
     * Removes all values of property {@code Linkedfrom}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLinkedfrom() {
		Base.removeAll(this.model, this.getResource(), LINKEDFROM);
	}
     /**
     * Check if {@code Linkedto} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLinkedto(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LINKEDTO);
	}

    /**
     * Check if {@code Linkedto} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLinkedto() {
		return Base.has(this.model, this.getResource(), LINKEDTO);
	}

    /**
     * Check if {@code Linkedto} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLinkedto(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LINKEDTO, value);
	}

    /**
     * Check if {@code Linkedto} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLinkedto( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LINKEDTO, value);
	}

     /**
     * Get all values of property {@code Linkedto} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLinkedto_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LINKEDTO);
	}

    /**
     * Get all values of property {@code Linkedto} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLinkedto_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKEDTO, Node.class);
	}

    /**
     * Get all values of property {@code Linkedto} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLinkedto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LINKEDTO);
	}

    /**
     * Get all values of property {@code Linkedto} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLinkedto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LINKEDTO, Node.class);
	}
 
    /**
     * Get all values of property {@code Linkedto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<DirectedLinking> getAllLinkedto(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LINKEDTO, DirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedto} as a ReactorResult of {@linkplain DirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<DirectedLinking> getAllLinkedto_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKEDTO, DirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedto}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<DirectedLinking> getAllLinkedto() {
		return Base.getAll(this.model, this.getResource(), LINKEDTO, DirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedto} as a ReactorResult of {@linkplain DirectedLinking}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<DirectedLinking> getAllLinkedto_as() {
		return Base.getAll_as(this.model, this.getResource(), LINKEDTO, DirectedLinking.class);
	}

 
    /**
     * Adds a value to property {@code Linkedto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLinkedto(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LINKEDTO, value);
	}

    /**
     * Adds a value to property {@code Linkedto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLinkedto(Node value) {
		Base.add(this.model, this.getResource(), LINKEDTO, value);
	}
    /**
     * Adds a value to property {@code Linkedto} from an instance of {@linkplain DirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLinkedto(Model model, Resource instanceResource, DirectedLinking value) {
		Base.add(model, instanceResource, LINKEDTO, value);
	}

    /**
     * Adds a value to property {@code Linkedto} from an instance of {@linkplain DirectedLinking}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLinkedto(DirectedLinking value) {
		Base.add(this.model, this.getResource(), LINKEDTO, value);
	}
  

    /**
     * Sets a value of property {@code Linkedto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLinkedto(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LINKEDTO, value);
	}

    /**
     * Sets a value of property {@code Linkedto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLinkedto(Node value) {
		Base.set(this.model, this.getResource(), LINKEDTO, value);
	}
    /**
     * Sets a value of property {@code Linkedto} from an instance of {@linkplain DirectedLinking}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLinkedto(Model model, Resource instanceResource, DirectedLinking value) {
		Base.set(model, instanceResource, LINKEDTO, value);
	}

    /**
     * Sets a value of property {@code Linkedto} from an instance of {@linkplain DirectedLinking}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLinkedto(DirectedLinking value) {
		Base.set(this.model, this.getResource(), LINKEDTO, value);
	}
  


    /**
     * Removes a value of property {@code Linkedto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLinkedto(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LINKEDTO, value);
	}

    /**
     * Removes a value of property {@code Linkedto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLinkedto(Node value) {
		Base.remove(this.model, this.getResource(), LINKEDTO, value);
	}
    /**
     * Removes a value of property {@code Linkedto} given as an instance of {@linkplain DirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLinkedto(Model model, Resource instanceResource, DirectedLinking value) {
		Base.remove(model, instanceResource, LINKEDTO, value);
	}

    /**
     * Removes a value of property {@code Linkedto} given as an instance of {@linkplain DirectedLinking}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLinkedto(DirectedLinking value) {
		Base.remove(this.model, this.getResource(), LINKEDTO, value);
	}
  
    /**
     * Removes all values of property {@code Linkedto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLinkedto(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LINKEDTO);
	}

    /**
     * Removes all values of property {@code Linkedto}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLinkedto() {
		Base.removeAll(this.model, this.getResource(), LINKEDTO);
	}
     /**
     * Check if {@code Linkedwith} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLinkedwith(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LINKEDWITH);
	}

    /**
     * Check if {@code Linkedwith} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLinkedwith() {
		return Base.has(this.model, this.getResource(), LINKEDWITH);
	}

    /**
     * Check if {@code Linkedwith} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLinkedwith(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LINKEDWITH, value);
	}

    /**
     * Check if {@code Linkedwith} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLinkedwith( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LINKEDWITH, value);
	}

     /**
     * Get all values of property {@code Linkedwith} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLinkedwith_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LINKEDWITH);
	}

    /**
     * Get all values of property {@code Linkedwith} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLinkedwith_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKEDWITH, Node.class);
	}

    /**
     * Get all values of property {@code Linkedwith} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLinkedwith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LINKEDWITH);
	}

    /**
     * Get all values of property {@code Linkedwith} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLinkedwith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LINKEDWITH, Node.class);
	}
 
    /**
     * Get all values of property {@code Linkedwith}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<UndirectedLinking> getAllLinkedwith(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LINKEDWITH, UndirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedwith} as a ReactorResult of {@linkplain UndirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<UndirectedLinking> getAllLinkedwith_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKEDWITH, UndirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedwith}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<UndirectedLinking> getAllLinkedwith() {
		return Base.getAll(this.model, this.getResource(), LINKEDWITH, UndirectedLinking.class);
	}

    /**
     * Get all values of property {@code Linkedwith} as a ReactorResult of {@linkplain UndirectedLinking}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<UndirectedLinking> getAllLinkedwith_as() {
		return Base.getAll_as(this.model, this.getResource(), LINKEDWITH, UndirectedLinking.class);
	}

 
    /**
     * Adds a value to property {@code Linkedwith} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLinkedwith(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LINKEDWITH, value);
	}

    /**
     * Adds a value to property {@code Linkedwith} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLinkedwith(Node value) {
		Base.add(this.model, this.getResource(), LINKEDWITH, value);
	}
    /**
     * Adds a value to property {@code Linkedwith} from an instance of {@linkplain UndirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLinkedwith(Model model, Resource instanceResource, UndirectedLinking value) {
		Base.add(model, instanceResource, LINKEDWITH, value);
	}

    /**
     * Adds a value to property {@code Linkedwith} from an instance of {@linkplain UndirectedLinking}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLinkedwith(UndirectedLinking value) {
		Base.add(this.model, this.getResource(), LINKEDWITH, value);
	}
  

    /**
     * Sets a value of property {@code Linkedwith} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLinkedwith(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LINKEDWITH, value);
	}

    /**
     * Sets a value of property {@code Linkedwith} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLinkedwith(Node value) {
		Base.set(this.model, this.getResource(), LINKEDWITH, value);
	}
    /**
     * Sets a value of property {@code Linkedwith} from an instance of {@linkplain UndirectedLinking}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLinkedwith(Model model, Resource instanceResource, UndirectedLinking value) {
		Base.set(model, instanceResource, LINKEDWITH, value);
	}

    /**
     * Sets a value of property {@code Linkedwith} from an instance of {@linkplain UndirectedLinking}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLinkedwith(UndirectedLinking value) {
		Base.set(this.model, this.getResource(), LINKEDWITH, value);
	}
  


    /**
     * Removes a value of property {@code Linkedwith} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLinkedwith(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LINKEDWITH, value);
	}

    /**
     * Removes a value of property {@code Linkedwith} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLinkedwith(Node value) {
		Base.remove(this.model, this.getResource(), LINKEDWITH, value);
	}
    /**
     * Removes a value of property {@code Linkedwith} given as an instance of {@linkplain UndirectedLinking}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLinkedwith(Model model, Resource instanceResource, UndirectedLinking value) {
		Base.remove(model, instanceResource, LINKEDWITH, value);
	}

    /**
     * Removes a value of property {@code Linkedwith} given as an instance of {@linkplain UndirectedLinking}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLinkedwith(UndirectedLinking value) {
		Base.remove(this.model, this.getResource(), LINKEDWITH, value);
	}
  
    /**
     * Removes all values of property {@code Linkedwith}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLinkedwith(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LINKEDWITH);
	}

    /**
     * Removes all values of property {@code Linkedwith}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLinkedwith() {
		Base.removeAll(this.model, this.getResource(), LINKEDWITH);
	}
     /**
     * Check if {@code N_arygraphico2orelationto} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasN_arygraphico2orelationto(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Check if {@code N_arygraphico2orelationto} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasN_arygraphico2orelationto() {
		return Base.has(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Check if {@code N_arygraphico2orelationto} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasN_arygraphico2orelationto(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Check if {@code N_arygraphico2orelationto} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasN_arygraphico2orelationto( Node value ) {
		return Base.hasValue(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, value);
	}

     /**
     * Get all values of property {@code N_arygraphico2orelationto} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllN_arygraphico2orelationto_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Get all values of property {@code N_arygraphico2orelationto} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllN_arygraphico2orelationto_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, Node.class);
	}

    /**
     * Get all values of property {@code N_arygraphico2orelationto} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllN_arygraphico2orelationto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Get all values of property {@code N_arygraphico2orelationto} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllN_arygraphico2orelationto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, Node.class);
	}
 
    /**
     * Get all values of property {@code N_arygraphico2orelationto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllN_arygraphico2orelationto(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, Thing1.class);
	}

    /**
     * Get all values of property {@code N_arygraphico2orelationto} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllN_arygraphico2orelationto_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, Thing1.class);
	}

    /**
     * Get all values of property {@code N_arygraphico2orelationto}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllN_arygraphico2orelationto() {
		return Base.getAll(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, Thing1.class);
	}

    /**
     * Get all values of property {@code N_arygraphico2orelationto} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllN_arygraphico2orelationto_as() {
		return Base.getAll_as(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code N_arygraphico2orelationto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addN_arygraphico2orelationto(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Adds a value to property {@code N_arygraphico2orelationto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addN_arygraphico2orelationto(Node value) {
		Base.add(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, value);
	}
    /**
     * Adds a value to property {@code N_arygraphico2orelationto} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addN_arygraphico2orelationto(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Adds a value to property {@code N_arygraphico2orelationto} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addN_arygraphico2orelationto(Thing1 value) {
		Base.add(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, value);
	}
  

    /**
     * Sets a value of property {@code N_arygraphico2orelationto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setN_arygraphico2orelationto(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Sets a value of property {@code N_arygraphico2orelationto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setN_arygraphico2orelationto(Node value) {
		Base.set(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, value);
	}
    /**
     * Sets a value of property {@code N_arygraphico2orelationto} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setN_arygraphico2orelationto(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Sets a value of property {@code N_arygraphico2orelationto} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setN_arygraphico2orelationto(Thing1 value) {
		Base.set(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, value);
	}
  


    /**
     * Removes a value of property {@code N_arygraphico2orelationto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeN_arygraphico2orelationto(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Removes a value of property {@code N_arygraphico2orelationto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeN_arygraphico2orelationto(Node value) {
		Base.remove(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, value);
	}
    /**
     * Removes a value of property {@code N_arygraphico2orelationto} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeN_arygraphico2orelationto(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO, value);
	}

    /**
     * Removes a value of property {@code N_arygraphico2orelationto} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeN_arygraphico2orelationto(Thing1 value) {
		Base.remove(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO, value);
	}
  
    /**
     * Removes all values of property {@code N_arygraphico2orelationto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllN_arygraphico2orelationto(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, N_ARYGRAPHICO2ORELATIONTO);
	}

    /**
     * Removes all values of property {@code N_arygraphico2orelationto}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllN_arygraphico2orelationto() {
		Base.removeAll(this.model, this.getResource(), N_ARYGRAPHICO2ORELATIONTO);
	}
     /**
     * Check if {@code N_aryrelationhelperproperties} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasN_aryrelationhelperproperties(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES);
	}

    /**
     * Check if {@code N_aryrelationhelperproperties} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasN_aryrelationhelperproperties() {
		return Base.has(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES);
	}

    /**
     * Check if {@code N_aryrelationhelperproperties} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasN_aryrelationhelperproperties(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, value);
	}

    /**
     * Check if {@code N_aryrelationhelperproperties} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasN_aryrelationhelperproperties( Node value ) {
		return Base.hasValue(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, value);
	}

     /**
     * Get all values of property {@code N_aryrelationhelperproperties} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllN_aryrelationhelperproperties_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES);
	}

    /**
     * Get all values of property {@code N_aryrelationhelperproperties} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllN_aryrelationhelperproperties_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, Node.class);
	}

    /**
     * Get all values of property {@code N_aryrelationhelperproperties} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllN_aryrelationhelperproperties_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES);
	}

    /**
     * Get all values of property {@code N_aryrelationhelperproperties} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllN_aryrelationhelperproperties_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, Node.class);
	}
 
    /**
     * Get all values of property {@code N_aryrelationhelperproperties}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllN_aryrelationhelperproperties(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, Thing1.class);
	}

    /**
     * Get all values of property {@code N_aryrelationhelperproperties} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllN_aryrelationhelperproperties_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, Thing1.class);
	}

    /**
     * Get all values of property {@code N_aryrelationhelperproperties}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllN_aryrelationhelperproperties() {
		return Base.getAll(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, Thing1.class);
	}

    /**
     * Get all values of property {@code N_aryrelationhelperproperties} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllN_aryrelationhelperproperties_as() {
		return Base.getAll_as(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code N_aryrelationhelperproperties} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addN_aryrelationhelperproperties(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, value);
	}

    /**
     * Adds a value to property {@code N_aryrelationhelperproperties} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addN_aryrelationhelperproperties(Node value) {
		Base.add(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, value);
	}
    /**
     * Adds a value to property {@code N_aryrelationhelperproperties} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addN_aryrelationhelperproperties(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, value);
	}

    /**
     * Adds a value to property {@code N_aryrelationhelperproperties} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addN_aryrelationhelperproperties(Thing1 value) {
		Base.add(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, value);
	}
  

    /**
     * Sets a value of property {@code N_aryrelationhelperproperties} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setN_aryrelationhelperproperties(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, value);
	}

    /**
     * Sets a value of property {@code N_aryrelationhelperproperties} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setN_aryrelationhelperproperties(Node value) {
		Base.set(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, value);
	}
    /**
     * Sets a value of property {@code N_aryrelationhelperproperties} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setN_aryrelationhelperproperties(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, value);
	}

    /**
     * Sets a value of property {@code N_aryrelationhelperproperties} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setN_aryrelationhelperproperties(Thing1 value) {
		Base.set(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, value);
	}
  


    /**
     * Removes a value of property {@code N_aryrelationhelperproperties} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeN_aryrelationhelperproperties(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, value);
	}

    /**
     * Removes a value of property {@code N_aryrelationhelperproperties} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeN_aryrelationhelperproperties(Node value) {
		Base.remove(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, value);
	}
    /**
     * Removes a value of property {@code N_aryrelationhelperproperties} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeN_aryrelationhelperproperties(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES, value);
	}

    /**
     * Removes a value of property {@code N_aryrelationhelperproperties} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeN_aryrelationhelperproperties(Thing1 value) {
		Base.remove(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES, value);
	}
  
    /**
     * Removes all values of property {@code N_aryrelationhelperproperties}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllN_aryrelationhelperproperties(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, N_ARYRELATIONHELPERPROPERTIES);
	}

    /**
     * Removes all values of property {@code N_aryrelationhelperproperties}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllN_aryrelationhelperproperties() {
		Base.removeAll(this.model, this.getResource(), N_ARYRELATIONHELPERPROPERTIES);
	}
     /**
     * Check if {@code Nominalvalue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasNominalvalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, NOMINALVALUE);
	}

    /**
     * Check if {@code Nominalvalue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasNominalvalue() {
		return Base.has(this.model, this.getResource(), NOMINALVALUE);
	}

    /**
     * Check if {@code Nominalvalue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasNominalvalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, NOMINALVALUE, value);
	}

    /**
     * Check if {@code Nominalvalue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasNominalvalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), NOMINALVALUE, value);
	}

     /**
     * Get all values of property {@code Nominalvalue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllNominalvalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NOMINALVALUE);
	}

    /**
     * Get all values of property {@code Nominalvalue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllNominalvalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NOMINALVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Nominalvalue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllNominalvalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NOMINALVALUE);
	}

    /**
     * Get all values of property {@code Nominalvalue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllNominalvalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NOMINALVALUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Nominalvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllNominalvalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, NOMINALVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Nominalvalue} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllNominalvalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NOMINALVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Nominalvalue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllNominalvalue() {
		return Base.getAll(this.model, this.getResource(), NOMINALVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Nominalvalue} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllNominalvalue_as() {
		return Base.getAll_as(this.model, this.getResource(), NOMINALVALUE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Nominalvalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addNominalvalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, NOMINALVALUE, value);
	}

    /**
     * Adds a value to property {@code Nominalvalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addNominalvalue(Node value) {
		Base.add(this.model, this.getResource(), NOMINALVALUE, value);
	}
    /**
     * Adds a value to property {@code Nominalvalue} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addNominalvalue(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, NOMINALVALUE, value);
	}

    /**
     * Adds a value to property {@code Nominalvalue} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addNominalvalue(Thing1 value) {
		Base.add(this.model, this.getResource(), NOMINALVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Nominalvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setNominalvalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, NOMINALVALUE, value);
	}

    /**
     * Sets a value of property {@code Nominalvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setNominalvalue(Node value) {
		Base.set(this.model, this.getResource(), NOMINALVALUE, value);
	}
    /**
     * Sets a value of property {@code Nominalvalue} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setNominalvalue(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, NOMINALVALUE, value);
	}

    /**
     * Sets a value of property {@code Nominalvalue} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setNominalvalue(Thing1 value) {
		Base.set(this.model, this.getResource(), NOMINALVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Nominalvalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeNominalvalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, NOMINALVALUE, value);
	}

    /**
     * Removes a value of property {@code Nominalvalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeNominalvalue(Node value) {
		Base.remove(this.model, this.getResource(), NOMINALVALUE, value);
	}
    /**
     * Removes a value of property {@code Nominalvalue} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeNominalvalue(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, NOMINALVALUE, value);
	}

    /**
     * Removes a value of property {@code Nominalvalue} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeNominalvalue(Thing1 value) {
		Base.remove(this.model, this.getResource(), NOMINALVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Nominalvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllNominalvalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, NOMINALVALUE);
	}

    /**
     * Removes all values of property {@code Nominalvalue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllNominalvalue() {
		Base.removeAll(this.model, this.getResource(), NOMINALVALUE);
	}
     /**
     * Check if {@code Non_spatialgraphicattribute} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasNon_spatialgraphicattribute(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Check if {@code Non_spatialgraphicattribute} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasNon_spatialgraphicattribute() {
		return Base.has(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Check if {@code Non_spatialgraphicattribute} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasNon_spatialgraphicattribute(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Check if {@code Non_spatialgraphicattribute} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasNon_spatialgraphicattribute( Node value ) {
		return Base.hasValue(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, value);
	}

     /**
     * Get all values of property {@code Non_spatialgraphicattribute} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllNon_spatialgraphicattribute_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Get all values of property {@code Non_spatialgraphicattribute} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllNon_spatialgraphicattribute_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, Node.class);
	}

    /**
     * Get all values of property {@code Non_spatialgraphicattribute} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllNon_spatialgraphicattribute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Get all values of property {@code Non_spatialgraphicattribute} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllNon_spatialgraphicattribute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, Node.class);
	}
 
    /**
     * Get all values of property {@code Non_spatialgraphicattribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllNon_spatialgraphicattribute(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Non_spatialgraphicattribute} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllNon_spatialgraphicattribute_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Non_spatialgraphicattribute}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllNon_spatialgraphicattribute() {
		return Base.getAll(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Non_spatialgraphicattribute} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllNon_spatialgraphicattribute_as() {
		return Base.getAll_as(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Non_spatialgraphicattribute} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addNon_spatialgraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Adds a value to property {@code Non_spatialgraphicattribute} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addNon_spatialgraphicattribute(Node value) {
		Base.add(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, value);
	}
    /**
     * Adds a value to property {@code Non_spatialgraphicattribute} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addNon_spatialgraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Adds a value to property {@code Non_spatialgraphicattribute} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addNon_spatialgraphicattribute(Thing1 value) {
		Base.add(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, value);
	}
  

    /**
     * Sets a value of property {@code Non_spatialgraphicattribute} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setNon_spatialgraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Sets a value of property {@code Non_spatialgraphicattribute} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setNon_spatialgraphicattribute(Node value) {
		Base.set(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, value);
	}
    /**
     * Sets a value of property {@code Non_spatialgraphicattribute} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setNon_spatialgraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Sets a value of property {@code Non_spatialgraphicattribute} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setNon_spatialgraphicattribute(Thing1 value) {
		Base.set(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, value);
	}
  


    /**
     * Removes a value of property {@code Non_spatialgraphicattribute} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeNon_spatialgraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Removes a value of property {@code Non_spatialgraphicattribute} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeNon_spatialgraphicattribute(Node value) {
		Base.remove(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, value);
	}
    /**
     * Removes a value of property {@code Non_spatialgraphicattribute} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeNon_spatialgraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Removes a value of property {@code Non_spatialgraphicattribute} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeNon_spatialgraphicattribute(Thing1 value) {
		Base.remove(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE, value);
	}
  
    /**
     * Removes all values of property {@code Non_spatialgraphicattribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllNon_spatialgraphicattribute(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, NON_SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Removes all values of property {@code Non_spatialgraphicattribute}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllNon_spatialgraphicattribute() {
		Base.removeAll(this.model, this.getResource(), NON_SPATIALGRAPHICATTRIBUTE);
	}
     /**
     * Check if {@code Ordinalvalue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasOrdinalvalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, ORDINALVALUE);
	}

    /**
     * Check if {@code Ordinalvalue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasOrdinalvalue() {
		return Base.has(this.model, this.getResource(), ORDINALVALUE);
	}

    /**
     * Check if {@code Ordinalvalue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasOrdinalvalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, ORDINALVALUE, value);
	}

    /**
     * Check if {@code Ordinalvalue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasOrdinalvalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORDINALVALUE, value);
	}

     /**
     * Get all values of property {@code Ordinalvalue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllOrdinalvalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORDINALVALUE);
	}

    /**
     * Get all values of property {@code Ordinalvalue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllOrdinalvalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDINALVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Ordinalvalue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllOrdinalvalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORDINALVALUE);
	}

    /**
     * Get all values of property {@code Ordinalvalue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllOrdinalvalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORDINALVALUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Ordinalvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllOrdinalvalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORDINALVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Ordinalvalue} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllOrdinalvalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDINALVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Ordinalvalue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllOrdinalvalue() {
		return Base.getAll(this.model, this.getResource(), ORDINALVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Ordinalvalue} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllOrdinalvalue_as() {
		return Base.getAll_as(this.model, this.getResource(), ORDINALVALUE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Ordinalvalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addOrdinalvalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, ORDINALVALUE, value);
	}

    /**
     * Adds a value to property {@code Ordinalvalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addOrdinalvalue(Node value) {
		Base.add(this.model, this.getResource(), ORDINALVALUE, value);
	}
    /**
     * Adds a value to property {@code Ordinalvalue} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addOrdinalvalue(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, ORDINALVALUE, value);
	}

    /**
     * Adds a value to property {@code Ordinalvalue} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addOrdinalvalue(Thing1 value) {
		Base.add(this.model, this.getResource(), ORDINALVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Ordinalvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setOrdinalvalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, ORDINALVALUE, value);
	}

    /**
     * Sets a value of property {@code Ordinalvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setOrdinalvalue(Node value) {
		Base.set(this.model, this.getResource(), ORDINALVALUE, value);
	}
    /**
     * Sets a value of property {@code Ordinalvalue} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setOrdinalvalue(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, ORDINALVALUE, value);
	}

    /**
     * Sets a value of property {@code Ordinalvalue} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setOrdinalvalue(Thing1 value) {
		Base.set(this.model, this.getResource(), ORDINALVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Ordinalvalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeOrdinalvalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, ORDINALVALUE, value);
	}

    /**
     * Removes a value of property {@code Ordinalvalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeOrdinalvalue(Node value) {
		Base.remove(this.model, this.getResource(), ORDINALVALUE, value);
	}
    /**
     * Removes a value of property {@code Ordinalvalue} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeOrdinalvalue(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, ORDINALVALUE, value);
	}

    /**
     * Removes a value of property {@code Ordinalvalue} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeOrdinalvalue(Thing1 value) {
		Base.remove(this.model, this.getResource(), ORDINALVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Ordinalvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllOrdinalvalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORDINALVALUE);
	}

    /**
     * Removes all values of property {@code Ordinalvalue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllOrdinalvalue() {
		Base.removeAll(this.model, this.getResource(), ORDINALVALUE);
	}
     /**
     * Check if {@code Position} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasPosition(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, POSITION);
	}

    /**
     * Check if {@code Position} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasPosition() {
		return Base.has(this.model, this.getResource(), POSITION);
	}

    /**
     * Check if {@code Position} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasPosition(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, POSITION, value);
	}

    /**
     * Check if {@code Position} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasPosition( Node value ) {
		return Base.hasValue(this.model, this.getResource(), POSITION, value);
	}

     /**
     * Get all values of property {@code Position} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllPosition_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, POSITION);
	}

    /**
     * Get all values of property {@code Position} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllPosition_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSITION, Node.class);
	}

    /**
     * Get all values of property {@code Position} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllPosition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), POSITION);
	}

    /**
     * Get all values of property {@code Position} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllPosition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), POSITION, Node.class);
	}
 
    /**
     * Get all values of property {@code Position}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllPosition(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, POSITION, Thing1.class);
	}

    /**
     * Get all values of property {@code Position} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllPosition_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSITION, Thing1.class);
	}

    /**
     * Get all values of property {@code Position}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllPosition() {
		return Base.getAll(this.model, this.getResource(), POSITION, Thing1.class);
	}

    /**
     * Get all values of property {@code Position} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllPosition_as() {
		return Base.getAll_as(this.model, this.getResource(), POSITION, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Position} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addPosition(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, POSITION, value);
	}

    /**
     * Adds a value to property {@code Position} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addPosition(Node value) {
		Base.add(this.model, this.getResource(), POSITION, value);
	}
    /**
     * Adds a value to property {@code Position} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addPosition(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, POSITION, value);
	}

    /**
     * Adds a value to property {@code Position} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addPosition(Thing1 value) {
		Base.add(this.model, this.getResource(), POSITION, value);
	}
  

    /**
     * Sets a value of property {@code Position} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setPosition(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, POSITION, value);
	}

    /**
     * Sets a value of property {@code Position} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setPosition(Node value) {
		Base.set(this.model, this.getResource(), POSITION, value);
	}
    /**
     * Sets a value of property {@code Position} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setPosition(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, POSITION, value);
	}

    /**
     * Sets a value of property {@code Position} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setPosition(Thing1 value) {
		Base.set(this.model, this.getResource(), POSITION, value);
	}
  


    /**
     * Removes a value of property {@code Position} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removePosition(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, POSITION, value);
	}

    /**
     * Removes a value of property {@code Position} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removePosition(Node value) {
		Base.remove(this.model, this.getResource(), POSITION, value);
	}
    /**
     * Removes a value of property {@code Position} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removePosition(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, POSITION, value);
	}

    /**
     * Removes a value of property {@code Position} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removePosition(Thing1 value) {
		Base.remove(this.model, this.getResource(), POSITION, value);
	}
  
    /**
     * Removes all values of property {@code Position}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllPosition(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, POSITION);
	}

    /**
     * Removes all values of property {@code Position}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllPosition() {
		Base.removeAll(this.model, this.getResource(), POSITION);
	}
     /**
     * Check if {@code Quantitativevalue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasQuantitativevalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, QUANTITATIVEVALUE);
	}

    /**
     * Check if {@code Quantitativevalue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasQuantitativevalue() {
		return Base.has(this.model, this.getResource(), QUANTITATIVEVALUE);
	}

    /**
     * Check if {@code Quantitativevalue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasQuantitativevalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, QUANTITATIVEVALUE, value);
	}

    /**
     * Check if {@code Quantitativevalue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasQuantitativevalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUANTITATIVEVALUE, value);
	}

     /**
     * Get all values of property {@code Quantitativevalue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllQuantitativevalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUANTITATIVEVALUE);
	}

    /**
     * Get all values of property {@code Quantitativevalue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllQuantitativevalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTITATIVEVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Quantitativevalue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllQuantitativevalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUANTITATIVEVALUE);
	}

    /**
     * Get all values of property {@code Quantitativevalue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllQuantitativevalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUANTITATIVEVALUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Quantitativevalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllQuantitativevalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUANTITATIVEVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Quantitativevalue} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllQuantitativevalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTITATIVEVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Quantitativevalue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllQuantitativevalue() {
		return Base.getAll(this.model, this.getResource(), QUANTITATIVEVALUE, Thing1.class);
	}

    /**
     * Get all values of property {@code Quantitativevalue} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllQuantitativevalue_as() {
		return Base.getAll_as(this.model, this.getResource(), QUANTITATIVEVALUE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Quantitativevalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addQuantitativevalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, QUANTITATIVEVALUE, value);
	}

    /**
     * Adds a value to property {@code Quantitativevalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addQuantitativevalue(Node value) {
		Base.add(this.model, this.getResource(), QUANTITATIVEVALUE, value);
	}
    /**
     * Adds a value to property {@code Quantitativevalue} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addQuantitativevalue(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, QUANTITATIVEVALUE, value);
	}

    /**
     * Adds a value to property {@code Quantitativevalue} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addQuantitativevalue(Thing1 value) {
		Base.add(this.model, this.getResource(), QUANTITATIVEVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Quantitativevalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setQuantitativevalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, QUANTITATIVEVALUE, value);
	}

    /**
     * Sets a value of property {@code Quantitativevalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setQuantitativevalue(Node value) {
		Base.set(this.model, this.getResource(), QUANTITATIVEVALUE, value);
	}
    /**
     * Sets a value of property {@code Quantitativevalue} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setQuantitativevalue(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, QUANTITATIVEVALUE, value);
	}

    /**
     * Sets a value of property {@code Quantitativevalue} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setQuantitativevalue(Thing1 value) {
		Base.set(this.model, this.getResource(), QUANTITATIVEVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Quantitativevalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeQuantitativevalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, QUANTITATIVEVALUE, value);
	}

    /**
     * Removes a value of property {@code Quantitativevalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeQuantitativevalue(Node value) {
		Base.remove(this.model, this.getResource(), QUANTITATIVEVALUE, value);
	}
    /**
     * Removes a value of property {@code Quantitativevalue} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeQuantitativevalue(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, QUANTITATIVEVALUE, value);
	}

    /**
     * Removes a value of property {@code Quantitativevalue} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeQuantitativevalue(Thing1 value) {
		Base.remove(this.model, this.getResource(), QUANTITATIVEVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Quantitativevalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllQuantitativevalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUANTITATIVEVALUE);
	}

    /**
     * Removes all values of property {@code Quantitativevalue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllQuantitativevalue() {
		Base.removeAll(this.model, this.getResource(), QUANTITATIVEVALUE);
	}
     /**
     * Check if {@code Relativedistanceto} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasRelativedistanceto(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, RELATIVEDISTANCETO);
	}

    /**
     * Check if {@code Relativedistanceto} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasRelativedistanceto() {
		return Base.has(this.model, this.getResource(), RELATIVEDISTANCETO);
	}

    /**
     * Check if {@code Relativedistanceto} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasRelativedistanceto(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, RELATIVEDISTANCETO, value);
	}

    /**
     * Check if {@code Relativedistanceto} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasRelativedistanceto( Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATIVEDISTANCETO, value);
	}

     /**
     * Get all values of property {@code Relativedistanceto} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllRelativedistanceto_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATIVEDISTANCETO);
	}

    /**
     * Get all values of property {@code Relativedistanceto} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllRelativedistanceto_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATIVEDISTANCETO, Node.class);
	}

    /**
     * Get all values of property {@code Relativedistanceto} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllRelativedistanceto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATIVEDISTANCETO);
	}

    /**
     * Get all values of property {@code Relativedistanceto} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllRelativedistanceto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATIVEDISTANCETO, Node.class);
	}
 
    /**
     * Get all values of property {@code Relativedistanceto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<RelativeDistance> getAllRelativedistanceto(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATIVEDISTANCETO, RelativeDistance.class);
	}

    /**
     * Get all values of property {@code Relativedistanceto} as a ReactorResult of {@linkplain RelativeDistance}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<RelativeDistance> getAllRelativedistanceto_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATIVEDISTANCETO, RelativeDistance.class);
	}

    /**
     * Get all values of property {@code Relativedistanceto}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<RelativeDistance> getAllRelativedistanceto() {
		return Base.getAll(this.model, this.getResource(), RELATIVEDISTANCETO, RelativeDistance.class);
	}

    /**
     * Get all values of property {@code Relativedistanceto} as a ReactorResult of {@linkplain RelativeDistance}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<RelativeDistance> getAllRelativedistanceto_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATIVEDISTANCETO, RelativeDistance.class);
	}

 
    /**
     * Adds a value to property {@code Relativedistanceto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addRelativedistanceto(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, RELATIVEDISTANCETO, value);
	}

    /**
     * Adds a value to property {@code Relativedistanceto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addRelativedistanceto(Node value) {
		Base.add(this.model, this.getResource(), RELATIVEDISTANCETO, value);
	}
    /**
     * Adds a value to property {@code Relativedistanceto} from an instance of {@linkplain RelativeDistance}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addRelativedistanceto(Model model, Resource instanceResource, RelativeDistance value) {
		Base.add(model, instanceResource, RELATIVEDISTANCETO, value);
	}

    /**
     * Adds a value to property {@code Relativedistanceto} from an instance of {@linkplain RelativeDistance}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addRelativedistanceto(RelativeDistance value) {
		Base.add(this.model, this.getResource(), RELATIVEDISTANCETO, value);
	}
  

    /**
     * Sets a value of property {@code Relativedistanceto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setRelativedistanceto(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, RELATIVEDISTANCETO, value);
	}

    /**
     * Sets a value of property {@code Relativedistanceto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setRelativedistanceto(Node value) {
		Base.set(this.model, this.getResource(), RELATIVEDISTANCETO, value);
	}
    /**
     * Sets a value of property {@code Relativedistanceto} from an instance of {@linkplain RelativeDistance}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setRelativedistanceto(Model model, Resource instanceResource, RelativeDistance value) {
		Base.set(model, instanceResource, RELATIVEDISTANCETO, value);
	}

    /**
     * Sets a value of property {@code Relativedistanceto} from an instance of {@linkplain RelativeDistance}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setRelativedistanceto(RelativeDistance value) {
		Base.set(this.model, this.getResource(), RELATIVEDISTANCETO, value);
	}
  


    /**
     * Removes a value of property {@code Relativedistanceto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeRelativedistanceto(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, RELATIVEDISTANCETO, value);
	}

    /**
     * Removes a value of property {@code Relativedistanceto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeRelativedistanceto(Node value) {
		Base.remove(this.model, this.getResource(), RELATIVEDISTANCETO, value);
	}
    /**
     * Removes a value of property {@code Relativedistanceto} given as an instance of {@linkplain RelativeDistance}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeRelativedistanceto(Model model, Resource instanceResource, RelativeDistance value) {
		Base.remove(model, instanceResource, RELATIVEDISTANCETO, value);
	}

    /**
     * Removes a value of property {@code Relativedistanceto} given as an instance of {@linkplain RelativeDistance}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeRelativedistanceto(RelativeDistance value) {
		Base.remove(this.model, this.getResource(), RELATIVEDISTANCETO, value);
	}
  
    /**
     * Removes all values of property {@code Relativedistanceto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllRelativedistanceto(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATIVEDISTANCETO);
	}

    /**
     * Removes all values of property {@code Relativedistanceto}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllRelativedistanceto() {
		Base.removeAll(this.model, this.getResource(), RELATIVEDISTANCETO);
	}
     /**
     * Check if {@code Spatialgraphicattribute} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSpatialgraphicattribute(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Check if {@code Spatialgraphicattribute} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSpatialgraphicattribute() {
		return Base.has(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Check if {@code Spatialgraphicattribute} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSpatialgraphicattribute(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Check if {@code Spatialgraphicattribute} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSpatialgraphicattribute( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, value);
	}

     /**
     * Get all values of property {@code Spatialgraphicattribute} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSpatialgraphicattribute_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Get all values of property {@code Spatialgraphicattribute} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSpatialgraphicattribute_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPATIALGRAPHICATTRIBUTE, Node.class);
	}

    /**
     * Get all values of property {@code Spatialgraphicattribute} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSpatialgraphicattribute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Get all values of property {@code Spatialgraphicattribute} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSpatialgraphicattribute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, Node.class);
	}
 
    /**
     * Get all values of property {@code Spatialgraphicattribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllSpatialgraphicattribute(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPATIALGRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Spatialgraphicattribute} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllSpatialgraphicattribute_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPATIALGRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Spatialgraphicattribute}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllSpatialgraphicattribute() {
		return Base.getAll(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, Thing1.class);
	}

    /**
     * Get all values of property {@code Spatialgraphicattribute} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllSpatialgraphicattribute_as() {
		return Base.getAll_as(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Spatialgraphicattribute} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSpatialgraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Adds a value to property {@code Spatialgraphicattribute} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSpatialgraphicattribute(Node value) {
		Base.add(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, value);
	}
    /**
     * Adds a value to property {@code Spatialgraphicattribute} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSpatialgraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Adds a value to property {@code Spatialgraphicattribute} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSpatialgraphicattribute(Thing1 value) {
		Base.add(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, value);
	}
  

    /**
     * Sets a value of property {@code Spatialgraphicattribute} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSpatialgraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Sets a value of property {@code Spatialgraphicattribute} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSpatialgraphicattribute(Node value) {
		Base.set(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, value);
	}
    /**
     * Sets a value of property {@code Spatialgraphicattribute} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSpatialgraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Sets a value of property {@code Spatialgraphicattribute} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSpatialgraphicattribute(Thing1 value) {
		Base.set(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, value);
	}
  


    /**
     * Removes a value of property {@code Spatialgraphicattribute} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSpatialgraphicattribute(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Removes a value of property {@code Spatialgraphicattribute} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSpatialgraphicattribute(Node value) {
		Base.remove(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, value);
	}
    /**
     * Removes a value of property {@code Spatialgraphicattribute} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSpatialgraphicattribute(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, SPATIALGRAPHICATTRIBUTE, value);
	}

    /**
     * Removes a value of property {@code Spatialgraphicattribute} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSpatialgraphicattribute(Thing1 value) {
		Base.remove(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE, value);
	}
  
    /**
     * Removes all values of property {@code Spatialgraphicattribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSpatialgraphicattribute(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPATIALGRAPHICATTRIBUTE);
	}

    /**
     * Removes all values of property {@code Spatialgraphicattribute}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSpatialgraphicattribute() {
		Base.removeAll(this.model, this.getResource(), SPATIALGRAPHICATTRIBUTE);
	}
     /**
     * Check if {@code Superimposedby} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSuperimposedby(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SUPERIMPOSEDBY);
	}

    /**
     * Check if {@code Superimposedby} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSuperimposedby() {
		return Base.has(this.model, this.getResource(), SUPERIMPOSEDBY);
	}

    /**
     * Check if {@code Superimposedby} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSuperimposedby(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SUPERIMPOSEDBY, value);
	}

    /**
     * Check if {@code Superimposedby} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSuperimposedby( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUPERIMPOSEDBY, value);
	}

     /**
     * Get all values of property {@code Superimposedby} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSuperimposedby_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUPERIMPOSEDBY);
	}

    /**
     * Get all values of property {@code Superimposedby} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSuperimposedby_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPERIMPOSEDBY, Node.class);
	}

    /**
     * Get all values of property {@code Superimposedby} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSuperimposedby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUPERIMPOSEDBY);
	}

    /**
     * Get all values of property {@code Superimposedby} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSuperimposedby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUPERIMPOSEDBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Superimposedby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Superimposition> getAllSuperimposedby(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUPERIMPOSEDBY, Superimposition.class);
	}

    /**
     * Get all values of property {@code Superimposedby} as a ReactorResult of {@linkplain Superimposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Superimposition> getAllSuperimposedby_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPERIMPOSEDBY, Superimposition.class);
	}

    /**
     * Get all values of property {@code Superimposedby}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Superimposition> getAllSuperimposedby() {
		return Base.getAll(this.model, this.getResource(), SUPERIMPOSEDBY, Superimposition.class);
	}

    /**
     * Get all values of property {@code Superimposedby} as a ReactorResult of {@linkplain Superimposition}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Superimposition> getAllSuperimposedby_as() {
		return Base.getAll_as(this.model, this.getResource(), SUPERIMPOSEDBY, Superimposition.class);
	}

 
    /**
     * Adds a value to property {@code Superimposedby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSuperimposedby(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SUPERIMPOSEDBY, value);
	}

    /**
     * Adds a value to property {@code Superimposedby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSuperimposedby(Node value) {
		Base.add(this.model, this.getResource(), SUPERIMPOSEDBY, value);
	}
    /**
     * Adds a value to property {@code Superimposedby} from an instance of {@linkplain Superimposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSuperimposedby(Model model, Resource instanceResource, Superimposition value) {
		Base.add(model, instanceResource, SUPERIMPOSEDBY, value);
	}

    /**
     * Adds a value to property {@code Superimposedby} from an instance of {@linkplain Superimposition}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSuperimposedby(Superimposition value) {
		Base.add(this.model, this.getResource(), SUPERIMPOSEDBY, value);
	}
  

    /**
     * Sets a value of property {@code Superimposedby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSuperimposedby(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SUPERIMPOSEDBY, value);
	}

    /**
     * Sets a value of property {@code Superimposedby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSuperimposedby(Node value) {
		Base.set(this.model, this.getResource(), SUPERIMPOSEDBY, value);
	}
    /**
     * Sets a value of property {@code Superimposedby} from an instance of {@linkplain Superimposition}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSuperimposedby(Model model, Resource instanceResource, Superimposition value) {
		Base.set(model, instanceResource, SUPERIMPOSEDBY, value);
	}

    /**
     * Sets a value of property {@code Superimposedby} from an instance of {@linkplain Superimposition}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSuperimposedby(Superimposition value) {
		Base.set(this.model, this.getResource(), SUPERIMPOSEDBY, value);
	}
  


    /**
     * Removes a value of property {@code Superimposedby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSuperimposedby(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SUPERIMPOSEDBY, value);
	}

    /**
     * Removes a value of property {@code Superimposedby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSuperimposedby(Node value) {
		Base.remove(this.model, this.getResource(), SUPERIMPOSEDBY, value);
	}
    /**
     * Removes a value of property {@code Superimposedby} given as an instance of {@linkplain Superimposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSuperimposedby(Model model, Resource instanceResource, Superimposition value) {
		Base.remove(model, instanceResource, SUPERIMPOSEDBY, value);
	}

    /**
     * Removes a value of property {@code Superimposedby} given as an instance of {@linkplain Superimposition}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSuperimposedby(Superimposition value) {
		Base.remove(this.model, this.getResource(), SUPERIMPOSEDBY, value);
	}
  
    /**
     * Removes all values of property {@code Superimposedby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSuperimposedby(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUPERIMPOSEDBY);
	}

    /**
     * Removes all values of property {@code Superimposedby}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSuperimposedby() {
		Base.removeAll(this.model, this.getResource(), SUPERIMPOSEDBY);
	}
     /**
     * Check if {@code Superimposes} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSuperimposes(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SUPERIMPOSES);
	}

    /**
     * Check if {@code Superimposes} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSuperimposes() {
		return Base.has(this.model, this.getResource(), SUPERIMPOSES);
	}

    /**
     * Check if {@code Superimposes} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSuperimposes(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SUPERIMPOSES, value);
	}

    /**
     * Check if {@code Superimposes} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSuperimposes( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUPERIMPOSES, value);
	}

     /**
     * Get all values of property {@code Superimposes} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSuperimposes_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUPERIMPOSES);
	}

    /**
     * Get all values of property {@code Superimposes} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSuperimposes_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPERIMPOSES, Node.class);
	}

    /**
     * Get all values of property {@code Superimposes} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSuperimposes_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUPERIMPOSES);
	}

    /**
     * Get all values of property {@code Superimposes} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSuperimposes_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUPERIMPOSES, Node.class);
	}
 
    /**
     * Get all values of property {@code Superimposes}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Superimposition> getAllSuperimposes(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUPERIMPOSES, Superimposition.class);
	}

    /**
     * Get all values of property {@code Superimposes} as a ReactorResult of {@linkplain Superimposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Superimposition> getAllSuperimposes_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPERIMPOSES, Superimposition.class);
	}

    /**
     * Get all values of property {@code Superimposes}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Superimposition> getAllSuperimposes() {
		return Base.getAll(this.model, this.getResource(), SUPERIMPOSES, Superimposition.class);
	}

    /**
     * Get all values of property {@code Superimposes} as a ReactorResult of {@linkplain Superimposition}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Superimposition> getAllSuperimposes_as() {
		return Base.getAll_as(this.model, this.getResource(), SUPERIMPOSES, Superimposition.class);
	}

 
    /**
     * Adds a value to property {@code Superimposes} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSuperimposes(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SUPERIMPOSES, value);
	}

    /**
     * Adds a value to property {@code Superimposes} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSuperimposes(Node value) {
		Base.add(this.model, this.getResource(), SUPERIMPOSES, value);
	}
    /**
     * Adds a value to property {@code Superimposes} from an instance of {@linkplain Superimposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSuperimposes(Model model, Resource instanceResource, Superimposition value) {
		Base.add(model, instanceResource, SUPERIMPOSES, value);
	}

    /**
     * Adds a value to property {@code Superimposes} from an instance of {@linkplain Superimposition}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSuperimposes(Superimposition value) {
		Base.add(this.model, this.getResource(), SUPERIMPOSES, value);
	}
  

    /**
     * Sets a value of property {@code Superimposes} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSuperimposes(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SUPERIMPOSES, value);
	}

    /**
     * Sets a value of property {@code Superimposes} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSuperimposes(Node value) {
		Base.set(this.model, this.getResource(), SUPERIMPOSES, value);
	}
    /**
     * Sets a value of property {@code Superimposes} from an instance of {@linkplain Superimposition}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSuperimposes(Model model, Resource instanceResource, Superimposition value) {
		Base.set(model, instanceResource, SUPERIMPOSES, value);
	}

    /**
     * Sets a value of property {@code Superimposes} from an instance of {@linkplain Superimposition}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSuperimposes(Superimposition value) {
		Base.set(this.model, this.getResource(), SUPERIMPOSES, value);
	}
  


    /**
     * Removes a value of property {@code Superimposes} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSuperimposes(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SUPERIMPOSES, value);
	}

    /**
     * Removes a value of property {@code Superimposes} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSuperimposes(Node value) {
		Base.remove(this.model, this.getResource(), SUPERIMPOSES, value);
	}
    /**
     * Removes a value of property {@code Superimposes} given as an instance of {@linkplain Superimposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSuperimposes(Model model, Resource instanceResource, Superimposition value) {
		Base.remove(model, instanceResource, SUPERIMPOSES, value);
	}

    /**
     * Removes a value of property {@code Superimposes} given as an instance of {@linkplain Superimposition}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSuperimposes(Superimposition value) {
		Base.remove(this.model, this.getResource(), SUPERIMPOSES, value);
	}
  
    /**
     * Removes all values of property {@code Superimposes}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSuperimposes(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUPERIMPOSES);
	}

    /**
     * Removes all values of property {@code Superimposes}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSuperimposes() {
		Base.removeAll(this.model, this.getResource(), SUPERIMPOSES);
	}
     /**
     * Check if {@code Syntacticroles} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSyntacticroles(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SYNTACTICROLES);
	}

    /**
     * Check if {@code Syntacticroles} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSyntacticroles() {
		return Base.has(this.model, this.getResource(), SYNTACTICROLES);
	}

    /**
     * Check if {@code Syntacticroles} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSyntacticroles(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SYNTACTICROLES, value);
	}

    /**
     * Check if {@code Syntacticroles} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSyntacticroles( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SYNTACTICROLES, value);
	}

     /**
     * Get all values of property {@code Syntacticroles} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSyntacticroles_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SYNTACTICROLES);
	}

    /**
     * Get all values of property {@code Syntacticroles} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSyntacticroles_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYNTACTICROLES, Node.class);
	}

    /**
     * Get all values of property {@code Syntacticroles} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSyntacticroles_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SYNTACTICROLES);
	}

    /**
     * Get all values of property {@code Syntacticroles} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSyntacticroles_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SYNTACTICROLES, Node.class);
	}
 
    /**
     * Get all values of property {@code Syntacticroles}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllSyntacticroles(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SYNTACTICROLES, Thing1.class);
	}

    /**
     * Get all values of property {@code Syntacticroles} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllSyntacticroles_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYNTACTICROLES, Thing1.class);
	}

    /**
     * Get all values of property {@code Syntacticroles}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllSyntacticroles() {
		return Base.getAll(this.model, this.getResource(), SYNTACTICROLES, Thing1.class);
	}

    /**
     * Get all values of property {@code Syntacticroles} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllSyntacticroles_as() {
		return Base.getAll_as(this.model, this.getResource(), SYNTACTICROLES, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Syntacticroles} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSyntacticroles(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SYNTACTICROLES, value);
	}

    /**
     * Adds a value to property {@code Syntacticroles} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSyntacticroles(Node value) {
		Base.add(this.model, this.getResource(), SYNTACTICROLES, value);
	}
    /**
     * Adds a value to property {@code Syntacticroles} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSyntacticroles(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, SYNTACTICROLES, value);
	}

    /**
     * Adds a value to property {@code Syntacticroles} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSyntacticroles(Thing1 value) {
		Base.add(this.model, this.getResource(), SYNTACTICROLES, value);
	}
  

    /**
     * Sets a value of property {@code Syntacticroles} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSyntacticroles(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SYNTACTICROLES, value);
	}

    /**
     * Sets a value of property {@code Syntacticroles} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSyntacticroles(Node value) {
		Base.set(this.model, this.getResource(), SYNTACTICROLES, value);
	}
    /**
     * Sets a value of property {@code Syntacticroles} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSyntacticroles(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, SYNTACTICROLES, value);
	}

    /**
     * Sets a value of property {@code Syntacticroles} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSyntacticroles(Thing1 value) {
		Base.set(this.model, this.getResource(), SYNTACTICROLES, value);
	}
  


    /**
     * Removes a value of property {@code Syntacticroles} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSyntacticroles(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SYNTACTICROLES, value);
	}

    /**
     * Removes a value of property {@code Syntacticroles} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSyntacticroles(Node value) {
		Base.remove(this.model, this.getResource(), SYNTACTICROLES, value);
	}
    /**
     * Removes a value of property {@code Syntacticroles} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSyntacticroles(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, SYNTACTICROLES, value);
	}

    /**
     * Removes a value of property {@code Syntacticroles} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSyntacticroles(Thing1 value) {
		Base.remove(this.model, this.getResource(), SYNTACTICROLES, value);
	}
  
    /**
     * Removes all values of property {@code Syntacticroles}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSyntacticroles(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SYNTACTICROLES);
	}

    /**
     * Removes all values of property {@code Syntacticroles}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSyntacticroles() {
		Base.removeAll(this.model, this.getResource(), SYNTACTICROLES);
	}
     /**
     * Check if {@code Xposition} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasXposition(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, XPOSITION);
	}

    /**
     * Check if {@code Xposition} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasXposition() {
		return Base.has(this.model, this.getResource(), XPOSITION);
	}

    /**
     * Check if {@code Xposition} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasXposition(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, XPOSITION, value);
	}

    /**
     * Check if {@code Xposition} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasXposition( Node value ) {
		return Base.hasValue(this.model, this.getResource(), XPOSITION, value);
	}

     /**
     * Get all values of property {@code Xposition} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllXposition_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, XPOSITION);
	}

    /**
     * Get all values of property {@code Xposition} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllXposition_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, XPOSITION, Node.class);
	}

    /**
     * Get all values of property {@code Xposition} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllXposition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), XPOSITION);
	}

    /**
     * Get all values of property {@code Xposition} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllXposition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), XPOSITION, Node.class);
	}
 
    /**
     * Get all values of property {@code Xposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllXposition(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, XPOSITION, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Xposition} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllXposition_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, XPOSITION, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Xposition}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllXposition() {
		return Base.getAll(this.model, this.getResource(), XPOSITION, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Xposition} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllXposition_as() {
		return Base.getAll_as(this.model, this.getResource(), XPOSITION, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code Xposition} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addXposition(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, XPOSITION, value);
	}

    /**
     * Adds a value to property {@code Xposition} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addXposition(Node value) {
		Base.add(this.model, this.getResource(), XPOSITION, value);
	}
    /**
     * Adds a value to property {@code Xposition} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addXposition(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, XPOSITION, value);
	}

    /**
     * Adds a value to property {@code Xposition} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addXposition(java.lang.Float value) {
		Base.add(this.model, this.getResource(), XPOSITION, value);
	}
  

    /**
     * Sets a value of property {@code Xposition} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setXposition(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, XPOSITION, value);
	}

    /**
     * Sets a value of property {@code Xposition} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setXposition(Node value) {
		Base.set(this.model, this.getResource(), XPOSITION, value);
	}
    /**
     * Sets a value of property {@code Xposition} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setXposition(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, XPOSITION, value);
	}

    /**
     * Sets a value of property {@code Xposition} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setXposition(java.lang.Float value) {
		Base.set(this.model, this.getResource(), XPOSITION, value);
	}
  


    /**
     * Removes a value of property {@code Xposition} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeXposition(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, XPOSITION, value);
	}

    /**
     * Removes a value of property {@code Xposition} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeXposition(Node value) {
		Base.remove(this.model, this.getResource(), XPOSITION, value);
	}
    /**
     * Removes a value of property {@code Xposition} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeXposition(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, XPOSITION, value);
	}

    /**
     * Removes a value of property {@code Xposition} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeXposition(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), XPOSITION, value);
	}
  
    /**
     * Removes all values of property {@code Xposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllXposition(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, XPOSITION);
	}

    /**
     * Removes all values of property {@code Xposition}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllXposition() {
		Base.removeAll(this.model, this.getResource(), XPOSITION);
	}
     /**
     * Check if {@code Yposition} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasYposition(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, YPOSITION);
	}

    /**
     * Check if {@code Yposition} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasYposition() {
		return Base.has(this.model, this.getResource(), YPOSITION);
	}

    /**
     * Check if {@code Yposition} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasYposition(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, YPOSITION, value);
	}

    /**
     * Check if {@code Yposition} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasYposition( Node value ) {
		return Base.hasValue(this.model, this.getResource(), YPOSITION, value);
	}

     /**
     * Get all values of property {@code Yposition} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllYposition_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, YPOSITION);
	}

    /**
     * Get all values of property {@code Yposition} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllYposition_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YPOSITION, Node.class);
	}

    /**
     * Get all values of property {@code Yposition} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllYposition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), YPOSITION);
	}

    /**
     * Get all values of property {@code Yposition} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllYposition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), YPOSITION, Node.class);
	}
 
    /**
     * Get all values of property {@code Yposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllYposition(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, YPOSITION, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Yposition} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllYposition_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YPOSITION, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Yposition}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllYposition() {
		return Base.getAll(this.model, this.getResource(), YPOSITION, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Yposition} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllYposition_as() {
		return Base.getAll_as(this.model, this.getResource(), YPOSITION, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code Yposition} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addYposition(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, YPOSITION, value);
	}

    /**
     * Adds a value to property {@code Yposition} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addYposition(Node value) {
		Base.add(this.model, this.getResource(), YPOSITION, value);
	}
    /**
     * Adds a value to property {@code Yposition} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addYposition(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, YPOSITION, value);
	}

    /**
     * Adds a value to property {@code Yposition} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addYposition(java.lang.Float value) {
		Base.add(this.model, this.getResource(), YPOSITION, value);
	}
  

    /**
     * Sets a value of property {@code Yposition} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setYposition(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, YPOSITION, value);
	}

    /**
     * Sets a value of property {@code Yposition} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setYposition(Node value) {
		Base.set(this.model, this.getResource(), YPOSITION, value);
	}
    /**
     * Sets a value of property {@code Yposition} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setYposition(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, YPOSITION, value);
	}

    /**
     * Sets a value of property {@code Yposition} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setYposition(java.lang.Float value) {
		Base.set(this.model, this.getResource(), YPOSITION, value);
	}
  


    /**
     * Removes a value of property {@code Yposition} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeYposition(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, YPOSITION, value);
	}

    /**
     * Removes a value of property {@code Yposition} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeYposition(Node value) {
		Base.remove(this.model, this.getResource(), YPOSITION, value);
	}
    /**
     * Removes a value of property {@code Yposition} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeYposition(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, YPOSITION, value);
	}

    /**
     * Removes a value of property {@code Yposition} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeYposition(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), YPOSITION, value);
	}
  
    /**
     * Removes all values of property {@code Yposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllYposition(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, YPOSITION);
	}

    /**
     * Removes all values of property {@code Yposition}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllYposition() {
		Base.removeAll(this.model, this.getResource(), YPOSITION);
	}
 }