/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) on 17.08.15 19:15
 */
package org.purl.rvl.java.gen.rvl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * Comment from schema: When a target graphic relation is used in multiple mappings, a warning should be issued, since ambiguities become possible.
 *
 * This class manages access to these properties:
 * <ul>
 *   <li>Existentialpropertymapping</li>
 *   <li>Inheritedby</li>
 *   <li>Invertsourceproperty</li>
 *   <li>Mapmissingvaluesto</li>
 *   <li>Missingsourcevalue</li>
 *   <li>Missingvaluemapping</li>
 *   <li>Objectfilter</li>
 *   <li>Passedto</li>
 *   <li>Sourceproperty</li>
 *   <li>Sourcevaluesoutofbounds</li>
 *   <li>Sub_graphic</li>
 *   <li>Sub_mapping</li>
 *   <li>Subjectfilter</li>
 *   <li>Targetgraphicrelation_abstract_</li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 17.08.15 19:15
 */
public class PropertyMapping extends Mapping {

    private static final long serialVersionUID = 2941625921965711807L;

    /** http://purl.org/rvl/PropertyMapping */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/rvl/PropertyMapping", false);

    /** http://purl.org/rvl/isExistentialPropertyMapping */
	public static final URI EXISTENTIALPROPERTYMAPPING = new URIImpl("http://purl.org/rvl/isExistentialPropertyMapping", false);

    /** http://purl.org/rvl/inheritedBy */
	public static final URI INHERITEDBY = new URIImpl("http://purl.org/rvl/inheritedBy", false);

    /** http://purl.org/rvl/invertSourceProperty */
	public static final URI INVERTSOURCEPROPERTY = new URIImpl("http://purl.org/rvl/invertSourceProperty", false);

    /** http://purl.org/rvl/mapMissingValuesTo */
	public static final URI MAPMISSINGVALUESTO = new URIImpl("http://purl.org/rvl/mapMissingValuesTo", false);

    /** http://purl.org/rvl/missingSourceValue */
	public static final URI MISSINGSOURCEVALUE = new URIImpl("http://purl.org/rvl/missingSourceValue", false);

    /** http://purl.org/rvl/missingValueMapping */
	public static final URI MISSINGVALUEMAPPING = new URIImpl("http://purl.org/rvl/missingValueMapping", false);

    /** http://purl.org/rvl/objectFilter */
	public static final URI OBJECTFILTER = new URIImpl("http://purl.org/rvl/objectFilter", false);

    /** http://purl.org/rvl/passedTo */
	public static final URI PASSEDTO = new URIImpl("http://purl.org/rvl/passedTo", false);

    /** http://purl.org/rvl/sourceProperty */
	public static final URI SOURCEPROPERTY = new URIImpl("http://purl.org/rvl/sourceProperty", false);

    /** http://purl.org/rvl/sourceValuesOutOfBounds */
	public static final URI SOURCEVALUESOUTOFBOUNDS = new URIImpl("http://purl.org/rvl/sourceValuesOutOfBounds", false);

    /** http://purl.org/rvl/subGraphic */
	public static final URI SUB_GRAPHIC = new URIImpl("http://purl.org/rvl/subGraphic", false);

    /** http://purl.org/rvl/subMapping */
	public static final URI SUB_MAPPING = new URIImpl("http://purl.org/rvl/subMapping", false);

    /** http://purl.org/rvl/subjectFilter */
	public static final URI SUBJECTFILTER = new URIImpl("http://purl.org/rvl/subjectFilter", false);

    /** http://purl.org/rvl/targetGraphicRelation */
	public static final URI TARGETGRAPHICRELATION_ABSTRACT_ = new URIImpl("http://purl.org/rvl/targetGraphicRelation", false);

    /**
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/rvl/isExistentialPropertyMapping", false),
      new URIImpl("http://purl.org/rvl/inheritedBy", false),
      new URIImpl("http://purl.org/rvl/invertSourceProperty", false),
      new URIImpl("http://purl.org/rvl/mapMissingValuesTo", false),
      new URIImpl("http://purl.org/rvl/missingSourceValue", false),
      new URIImpl("http://purl.org/rvl/missingValueMapping", false),
      new URIImpl("http://purl.org/rvl/objectFilter", false),
      new URIImpl("http://purl.org/rvl/passedTo", false),
      new URIImpl("http://purl.org/rvl/sourceProperty", false),
      new URIImpl("http://purl.org/rvl/sourceValuesOutOfBounds", false),
      new URIImpl("http://purl.org/rvl/subGraphic", false),
      new URIImpl("http://purl.org/rvl/subMapping", false),
      new URIImpl("http://purl.org/rvl/subjectFilter", false),
      new URIImpl("http://purl.org/rvl/targetGraphicRelation", false)
    };


	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected PropertyMapping (Model model, URI classURI, Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2]
	 */
	public PropertyMapping (Model model, Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7]
	 */
	public PropertyMapping (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8]
	 */
	public PropertyMapping (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9]
	 */
	public PropertyMapping (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of PropertyMapping or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0]
	 */
	public static PropertyMapping getInstance(Model model, Resource instanceResource) {
		return Base.getInstance(model, instanceResource, PropertyMapping.class);
	}

	/**
	 * Create a new instance of this class in the model.
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/rvl/PropertyMapping).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1]
	 */
	public static void createInstance(Model model, Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2]
	 */
	public static boolean hasInstance(Model model, Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3]
	 */
	public static ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as]
	 */
	public static ReactorResult<? extends PropertyMapping> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, PropertyMapping.class );
	}

    /**
	 * Remove triple {@code (this, rdf:type, PropertyMapping)} from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4]
	 */
	public static void deleteInstance(Model model, Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class5]
	 */
	public static void deleteAllProperties(Model model,	Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if {@code Existentialpropertymapping} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasExistentialpropertymapping(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Check if {@code Existentialpropertymapping} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasExistentialpropertymapping() {
		return Base.has(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Check if {@code Existentialpropertymapping} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasExistentialpropertymapping(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}

    /**
     * Check if {@code Existentialpropertymapping} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasExistentialpropertymapping( Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}

     /**
     * Get all values of property {@code Existentialpropertymapping} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllExistentialpropertymapping_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Get all values of property {@code Existentialpropertymapping} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllExistentialpropertymapping_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXISTENTIALPROPERTYMAPPING, Node.class);
	}

    /**
     * Get all values of property {@code Existentialpropertymapping} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllExistentialpropertymapping_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Get all values of property {@code Existentialpropertymapping} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllExistentialpropertymapping_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, Node.class);
	}
 
    /**
     * Get all values of property {@code Existentialpropertymapping}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Boolean> getAllExistentialpropertymapping(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXISTENTIALPROPERTYMAPPING, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Existentialpropertymapping} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Boolean> getAllExistentialpropertymapping_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXISTENTIALPROPERTYMAPPING, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Existentialpropertymapping}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Boolean> getAllExistentialpropertymapping() {
		return Base.getAll(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Existentialpropertymapping} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Boolean> getAllExistentialpropertymapping_as() {
		return Base.getAll_as(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, java.lang.Boolean.class);
	}

 
    /**
     * Adds a value to property {@code Existentialpropertymapping} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addExistentialpropertymapping(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}

    /**
     * Adds a value to property {@code Existentialpropertymapping} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addExistentialpropertymapping(Node value) {
		Base.add(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
    /**
     * Adds a value to property {@code Existentialpropertymapping} from an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addExistentialpropertymapping(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}

    /**
     * Adds a value to property {@code Existentialpropertymapping} from an instance of {@linkplain java.lang.Boolean}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addExistentialpropertymapping(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
  

    /**
     * Sets a value of property {@code Existentialpropertymapping} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setExistentialpropertymapping(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}

    /**
     * Sets a value of property {@code Existentialpropertymapping} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setExistentialpropertymapping(Node value) {
		Base.set(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
    /**
     * Sets a value of property {@code Existentialpropertymapping} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setExistentialpropertymapping(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}

    /**
     * Sets a value of property {@code Existentialpropertymapping} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setExistentialpropertymapping(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
  


    /**
     * Removes a value of property {@code Existentialpropertymapping} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeExistentialpropertymapping(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}

    /**
     * Removes a value of property {@code Existentialpropertymapping} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeExistentialpropertymapping(Node value) {
		Base.remove(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
    /**
     * Removes a value of property {@code Existentialpropertymapping} given as an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeExistentialpropertymapping(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}

    /**
     * Removes a value of property {@code Existentialpropertymapping} given as an instance of {@linkplain java.lang.Boolean}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeExistentialpropertymapping(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
  
    /**
     * Removes all values of property {@code Existentialpropertymapping}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllExistentialpropertymapping(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Removes all values of property {@code Existentialpropertymapping}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllExistentialpropertymapping() {
		Base.removeAll(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING);
	}
     /**
     * Check if {@code Inheritedby} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasInheritedby(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, INHERITEDBY);
	}

    /**
     * Check if {@code Inheritedby} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasInheritedby() {
		return Base.has(this.model, this.getResource(), INHERITEDBY);
	}

    /**
     * Check if {@code Inheritedby} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasInheritedby(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, INHERITEDBY, value);
	}

    /**
     * Check if {@code Inheritedby} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasInheritedby( Node value ) {
		return Base.hasValue(this.model, this.getResource(), INHERITEDBY, value);
	}

     /**
     * Get all values of property {@code Inheritedby} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllInheritedby_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INHERITEDBY);
	}

    /**
     * Get all values of property {@code Inheritedby} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllInheritedby_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INHERITEDBY, Node.class);
	}

    /**
     * Get all values of property {@code Inheritedby} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllInheritedby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INHERITEDBY);
	}

    /**
     * Get all values of property {@code Inheritedby} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllInheritedby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INHERITEDBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Inheritedby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllInheritedby(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, INHERITEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Inheritedby} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllInheritedby_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INHERITEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Inheritedby}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllInheritedby() {
		return Base.getAll(this.model, this.getResource(), INHERITEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Inheritedby} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllInheritedby_as() {
		return Base.getAll_as(this.model, this.getResource(), INHERITEDBY, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Inheritedby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addInheritedby(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, INHERITEDBY, value);
	}

    /**
     * Adds a value to property {@code Inheritedby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addInheritedby(Node value) {
		Base.add(this.model, this.getResource(), INHERITEDBY, value);
	}
    /**
     * Adds a value to property {@code Inheritedby} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addInheritedby(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, INHERITEDBY, value);
	}

    /**
     * Adds a value to property {@code Inheritedby} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addInheritedby(Thing1 value) {
		Base.add(this.model, this.getResource(), INHERITEDBY, value);
	}
  

    /**
     * Sets a value of property {@code Inheritedby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setInheritedby(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, INHERITEDBY, value);
	}

    /**
     * Sets a value of property {@code Inheritedby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setInheritedby(Node value) {
		Base.set(this.model, this.getResource(), INHERITEDBY, value);
	}
    /**
     * Sets a value of property {@code Inheritedby} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setInheritedby(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, INHERITEDBY, value);
	}

    /**
     * Sets a value of property {@code Inheritedby} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setInheritedby(Thing1 value) {
		Base.set(this.model, this.getResource(), INHERITEDBY, value);
	}
  


    /**
     * Removes a value of property {@code Inheritedby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeInheritedby(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, INHERITEDBY, value);
	}

    /**
     * Removes a value of property {@code Inheritedby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeInheritedby(Node value) {
		Base.remove(this.model, this.getResource(), INHERITEDBY, value);
	}
    /**
     * Removes a value of property {@code Inheritedby} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeInheritedby(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, INHERITEDBY, value);
	}

    /**
     * Removes a value of property {@code Inheritedby} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeInheritedby(Thing1 value) {
		Base.remove(this.model, this.getResource(), INHERITEDBY, value);
	}
  
    /**
     * Removes all values of property {@code Inheritedby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllInheritedby(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, INHERITEDBY);
	}

    /**
     * Removes all values of property {@code Inheritedby}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllInheritedby() {
		Base.removeAll(this.model, this.getResource(), INHERITEDBY);
	}
     /**
     * Check if {@code Invertsourceproperty} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasInvertsourceproperty(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, INVERTSOURCEPROPERTY);
	}

    /**
     * Check if {@code Invertsourceproperty} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasInvertsourceproperty() {
		return Base.has(this.model, this.getResource(), INVERTSOURCEPROPERTY);
	}

    /**
     * Check if {@code Invertsourceproperty} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasInvertsourceproperty(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}

    /**
     * Check if {@code Invertsourceproperty} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasInvertsourceproperty( Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}

     /**
     * Get all values of property {@code Invertsourceproperty} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllInvertsourceproperty_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERTSOURCEPROPERTY);
	}

    /**
     * Get all values of property {@code Invertsourceproperty} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllInvertsourceproperty_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERTSOURCEPROPERTY, Node.class);
	}

    /**
     * Get all values of property {@code Invertsourceproperty} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllInvertsourceproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERTSOURCEPROPERTY);
	}

    /**
     * Get all values of property {@code Invertsourceproperty} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllInvertsourceproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERTSOURCEPROPERTY, Node.class);
	}
 
    /**
     * Get all values of property {@code Invertsourceproperty}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Boolean> getAllInvertsourceproperty(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERTSOURCEPROPERTY, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Invertsourceproperty} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Boolean> getAllInvertsourceproperty_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERTSOURCEPROPERTY, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Invertsourceproperty}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Boolean> getAllInvertsourceproperty() {
		return Base.getAll(this.model, this.getResource(), INVERTSOURCEPROPERTY, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Invertsourceproperty} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Boolean> getAllInvertsourceproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERTSOURCEPROPERTY, java.lang.Boolean.class);
	}

 
    /**
     * Adds a value to property {@code Invertsourceproperty} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addInvertsourceproperty(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}

    /**
     * Adds a value to property {@code Invertsourceproperty} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addInvertsourceproperty(Node value) {
		Base.add(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
    /**
     * Adds a value to property {@code Invertsourceproperty} from an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addInvertsourceproperty(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}

    /**
     * Adds a value to property {@code Invertsourceproperty} from an instance of {@linkplain java.lang.Boolean}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addInvertsourceproperty(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
  

    /**
     * Sets a value of property {@code Invertsourceproperty} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setInvertsourceproperty(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}

    /**
     * Sets a value of property {@code Invertsourceproperty} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setInvertsourceproperty(Node value) {
		Base.set(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
    /**
     * Sets a value of property {@code Invertsourceproperty} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setInvertsourceproperty(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}

    /**
     * Sets a value of property {@code Invertsourceproperty} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setInvertsourceproperty(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
  


    /**
     * Removes a value of property {@code Invertsourceproperty} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeInvertsourceproperty(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}

    /**
     * Removes a value of property {@code Invertsourceproperty} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeInvertsourceproperty(Node value) {
		Base.remove(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
    /**
     * Removes a value of property {@code Invertsourceproperty} given as an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeInvertsourceproperty(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}

    /**
     * Removes a value of property {@code Invertsourceproperty} given as an instance of {@linkplain java.lang.Boolean}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeInvertsourceproperty(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
  
    /**
     * Removes all values of property {@code Invertsourceproperty}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllInvertsourceproperty(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERTSOURCEPROPERTY);
	}

    /**
     * Removes all values of property {@code Invertsourceproperty}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllInvertsourceproperty() {
		Base.removeAll(this.model, this.getResource(), INVERTSOURCEPROPERTY);
	}
     /**
     * Check if {@code Mapmissingvaluesto} has at least one value set.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasMapmissingvaluesto(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, MAPMISSINGVALUESTO);
	}

    /**
     * Check if {@code Mapmissingvaluesto} has at least one value set.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasMapmissingvaluesto() {
		return Base.has(this.model, this.getResource(), MAPMISSINGVALUESTO);
	}

    /**
     * Check if {@code Mapmissingvaluesto} has the given value (maybe among other values).
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasMapmissingvaluesto(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, MAPMISSINGVALUESTO, value);
	}

    /**
     * Check if {@code Mapmissingvaluesto} has the given value (maybe among other values).
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasMapmissingvaluesto( Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}

     /**
     * Get all values of property {@code Mapmissingvaluesto} as an Iterator over RDF2Go nodes.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllMapmissingvaluesto_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAPMISSINGVALUESTO);
	}

    /**
     * Get all values of property {@code Mapmissingvaluesto} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllMapmissingvaluesto_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAPMISSINGVALUESTO, Node.class);
	}

    /**
     * Get all values of property {@code Mapmissingvaluesto} as an Iterator over RDF2Go nodes
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllMapmissingvaluesto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAPMISSINGVALUESTO);
	}

    /**
     * Get all values of property {@code Mapmissingvaluesto} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllMapmissingvaluesto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAPMISSINGVALUESTO, Node.class);
	}
 
    /**
     * Get all values of property {@code Mapmissingvaluesto}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllMapmissingvaluesto(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAPMISSINGVALUESTO, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Mapmissingvaluesto} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllMapmissingvaluesto_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAPMISSINGVALUESTO, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Mapmissingvaluesto}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllMapmissingvaluesto() {
		return Base.getAll(this.model, this.getResource(), MAPMISSINGVALUESTO, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Mapmissingvaluesto} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllMapmissingvaluesto_as() {
		return Base.getAll_as(this.model, this.getResource(), MAPMISSINGVALUESTO, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

 
    /**
     * Adds a value to property {@code Mapmissingvaluesto} as an RDF2Go {@linkplain Node}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addMapmissingvaluesto(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, MAPMISSINGVALUESTO, value);
	}

    /**
     * Adds a value to property {@code Mapmissingvaluesto} as an RDF2Go {@linkplain Node}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addMapmissingvaluesto(Node value) {
		Base.add(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
    /**
     * Adds a value to property {@code Mapmissingvaluesto} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addMapmissingvaluesto(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, MAPMISSINGVALUESTO, value);
	}

    /**
     * Adds a value to property {@code Mapmissingvaluesto} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addMapmissingvaluesto(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
  

    /**
     * Sets a value of property {@code Mapmissingvaluesto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setMapmissingvaluesto(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, MAPMISSINGVALUESTO, value);
	}

    /**
     * Sets a value of property {@code Mapmissingvaluesto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setMapmissingvaluesto(Node value) {
		Base.set(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
    /**
     * Sets a value of property {@code Mapmissingvaluesto} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setMapmissingvaluesto(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, MAPMISSINGVALUESTO, value);
	}

    /**
     * Sets a value of property {@code Mapmissingvaluesto} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setMapmissingvaluesto(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
  


    /**
     * Removes a value of property {@code Mapmissingvaluesto} as an RDF2Go {@linkplain Node}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeMapmissingvaluesto(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, MAPMISSINGVALUESTO, value);
	}

    /**
     * Removes a value of property {@code Mapmissingvaluesto} as an RDF2Go {@linkplain Node}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeMapmissingvaluesto(Node value) {
		Base.remove(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
    /**
     * Removes a value of property {@code Mapmissingvaluesto} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeMapmissingvaluesto(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, MAPMISSINGVALUESTO, value);
	}

    /**
     * Removes a value of property {@code Mapmissingvaluesto} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeMapmissingvaluesto(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
  
    /**
     * Removes all values of property {@code Mapmissingvaluesto}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllMapmissingvaluesto(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAPMISSINGVALUESTO);
	}

    /**
     * Removes all values of property {@code Mapmissingvaluesto}.
     * Comment from schema: The range should be literals with string, int, float, boolean + discrete visual attributes
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllMapmissingvaluesto() {
		Base.removeAll(this.model, this.getResource(), MAPMISSINGVALUESTO);
	}
     /**
     * Check if {@code Missingsourcevalue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasMissingsourcevalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, MISSINGSOURCEVALUE);
	}

    /**
     * Check if {@code Missingsourcevalue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasMissingsourcevalue() {
		return Base.has(this.model, this.getResource(), MISSINGSOURCEVALUE);
	}

    /**
     * Check if {@code Missingsourcevalue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasMissingsourcevalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, MISSINGSOURCEVALUE, value);
	}

    /**
     * Check if {@code Missingsourcevalue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasMissingsourcevalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}

     /**
     * Get all values of property {@code Missingsourcevalue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllMissingsourcevalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MISSINGSOURCEVALUE);
	}

    /**
     * Get all values of property {@code Missingsourcevalue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllMissingsourcevalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MISSINGSOURCEVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Missingsourcevalue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllMissingsourcevalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MISSINGSOURCEVALUE);
	}

    /**
     * Get all values of property {@code Missingsourcevalue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllMissingsourcevalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MISSINGSOURCEVALUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Missingsourcevalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Missingsourcevaluehandlingtype> getAllMissingsourcevalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, MISSINGSOURCEVALUE, Missingsourcevaluehandlingtype.class);
	}

    /**
     * Get all values of property {@code Missingsourcevalue} as a ReactorResult of {@linkplain Missingsourcevaluehandlingtype}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Missingsourcevaluehandlingtype> getAllMissingsourcevalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MISSINGSOURCEVALUE, Missingsourcevaluehandlingtype.class);
	}

    /**
     * Get all values of property {@code Missingsourcevalue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Missingsourcevaluehandlingtype> getAllMissingsourcevalue() {
		return Base.getAll(this.model, this.getResource(), MISSINGSOURCEVALUE, Missingsourcevaluehandlingtype.class);
	}

    /**
     * Get all values of property {@code Missingsourcevalue} as a ReactorResult of {@linkplain Missingsourcevaluehandlingtype}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Missingsourcevaluehandlingtype> getAllMissingsourcevalue_as() {
		return Base.getAll_as(this.model, this.getResource(), MISSINGSOURCEVALUE, Missingsourcevaluehandlingtype.class);
	}

 
    /**
     * Adds a value to property {@code Missingsourcevalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addMissingsourcevalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, MISSINGSOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code Missingsourcevalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addMissingsourcevalue(Node value) {
		Base.add(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
    /**
     * Adds a value to property {@code Missingsourcevalue} from an instance of {@linkplain Missingsourcevaluehandlingtype}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addMissingsourcevalue(Model model, Resource instanceResource, Missingsourcevaluehandlingtype value) {
		Base.add(model, instanceResource, MISSINGSOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code Missingsourcevalue} from an instance of {@linkplain Missingsourcevaluehandlingtype}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addMissingsourcevalue(Missingsourcevaluehandlingtype value) {
		Base.add(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Missingsourcevalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setMissingsourcevalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, MISSINGSOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code Missingsourcevalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setMissingsourcevalue(Node value) {
		Base.set(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
    /**
     * Sets a value of property {@code Missingsourcevalue} from an instance of {@linkplain Missingsourcevaluehandlingtype}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setMissingsourcevalue(Model model, Resource instanceResource, Missingsourcevaluehandlingtype value) {
		Base.set(model, instanceResource, MISSINGSOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code Missingsourcevalue} from an instance of {@linkplain Missingsourcevaluehandlingtype}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setMissingsourcevalue(Missingsourcevaluehandlingtype value) {
		Base.set(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Missingsourcevalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeMissingsourcevalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, MISSINGSOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code Missingsourcevalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeMissingsourcevalue(Node value) {
		Base.remove(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
    /**
     * Removes a value of property {@code Missingsourcevalue} given as an instance of {@linkplain Missingsourcevaluehandlingtype}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeMissingsourcevalue(Model model, Resource instanceResource, Missingsourcevaluehandlingtype value) {
		Base.remove(model, instanceResource, MISSINGSOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code Missingsourcevalue} given as an instance of {@linkplain Missingsourcevaluehandlingtype}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeMissingsourcevalue(Missingsourcevaluehandlingtype value) {
		Base.remove(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Missingsourcevalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllMissingsourcevalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, MISSINGSOURCEVALUE);
	}

    /**
     * Removes all values of property {@code Missingsourcevalue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllMissingsourcevalue() {
		Base.removeAll(this.model, this.getResource(), MISSINGSOURCEVALUE);
	}
     /**
     * Check if {@code Missingvaluemapping} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasMissingvaluemapping(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, MISSINGVALUEMAPPING);
	}

    /**
     * Check if {@code Missingvaluemapping} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasMissingvaluemapping() {
		return Base.has(this.model, this.getResource(), MISSINGVALUEMAPPING);
	}

    /**
     * Check if {@code Missingvaluemapping} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasMissingvaluemapping(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, MISSINGVALUEMAPPING, value);
	}

    /**
     * Check if {@code Missingvaluemapping} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasMissingvaluemapping( Node value ) {
		return Base.hasValue(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}

     /**
     * Get all values of property {@code Missingvaluemapping} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllMissingvaluemapping_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MISSINGVALUEMAPPING);
	}

    /**
     * Get all values of property {@code Missingvaluemapping} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllMissingvaluemapping_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MISSINGVALUEMAPPING, Node.class);
	}

    /**
     * Get all values of property {@code Missingvaluemapping} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllMissingvaluemapping_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MISSINGVALUEMAPPING);
	}

    /**
     * Get all values of property {@code Missingvaluemapping} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllMissingvaluemapping_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MISSINGVALUEMAPPING, Node.class);
	}
 
    /**
     * Get all values of property {@code Missingvaluemapping}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Missingvaluemappinghandlingtype> getAllMissingvaluemapping(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, MISSINGVALUEMAPPING, Missingvaluemappinghandlingtype.class);
	}

    /**
     * Get all values of property {@code Missingvaluemapping} as a ReactorResult of {@linkplain Missingvaluemappinghandlingtype}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Missingvaluemappinghandlingtype> getAllMissingvaluemapping_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MISSINGVALUEMAPPING, Missingvaluemappinghandlingtype.class);
	}

    /**
     * Get all values of property {@code Missingvaluemapping}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Missingvaluemappinghandlingtype> getAllMissingvaluemapping() {
		return Base.getAll(this.model, this.getResource(), MISSINGVALUEMAPPING, Missingvaluemappinghandlingtype.class);
	}

    /**
     * Get all values of property {@code Missingvaluemapping} as a ReactorResult of {@linkplain Missingvaluemappinghandlingtype}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Missingvaluemappinghandlingtype> getAllMissingvaluemapping_as() {
		return Base.getAll_as(this.model, this.getResource(), MISSINGVALUEMAPPING, Missingvaluemappinghandlingtype.class);
	}

 
    /**
     * Adds a value to property {@code Missingvaluemapping} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addMissingvaluemapping(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, MISSINGVALUEMAPPING, value);
	}

    /**
     * Adds a value to property {@code Missingvaluemapping} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addMissingvaluemapping(Node value) {
		Base.add(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
    /**
     * Adds a value to property {@code Missingvaluemapping} from an instance of {@linkplain Missingvaluemappinghandlingtype}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addMissingvaluemapping(Model model, Resource instanceResource, Missingvaluemappinghandlingtype value) {
		Base.add(model, instanceResource, MISSINGVALUEMAPPING, value);
	}

    /**
     * Adds a value to property {@code Missingvaluemapping} from an instance of {@linkplain Missingvaluemappinghandlingtype}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addMissingvaluemapping(Missingvaluemappinghandlingtype value) {
		Base.add(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
  

    /**
     * Sets a value of property {@code Missingvaluemapping} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setMissingvaluemapping(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, MISSINGVALUEMAPPING, value);
	}

    /**
     * Sets a value of property {@code Missingvaluemapping} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setMissingvaluemapping(Node value) {
		Base.set(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
    /**
     * Sets a value of property {@code Missingvaluemapping} from an instance of {@linkplain Missingvaluemappinghandlingtype}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setMissingvaluemapping(Model model, Resource instanceResource, Missingvaluemappinghandlingtype value) {
		Base.set(model, instanceResource, MISSINGVALUEMAPPING, value);
	}

    /**
     * Sets a value of property {@code Missingvaluemapping} from an instance of {@linkplain Missingvaluemappinghandlingtype}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setMissingvaluemapping(Missingvaluemappinghandlingtype value) {
		Base.set(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
  


    /**
     * Removes a value of property {@code Missingvaluemapping} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeMissingvaluemapping(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, MISSINGVALUEMAPPING, value);
	}

    /**
     * Removes a value of property {@code Missingvaluemapping} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeMissingvaluemapping(Node value) {
		Base.remove(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
    /**
     * Removes a value of property {@code Missingvaluemapping} given as an instance of {@linkplain Missingvaluemappinghandlingtype}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeMissingvaluemapping(Model model, Resource instanceResource, Missingvaluemappinghandlingtype value) {
		Base.remove(model, instanceResource, MISSINGVALUEMAPPING, value);
	}

    /**
     * Removes a value of property {@code Missingvaluemapping} given as an instance of {@linkplain Missingvaluemappinghandlingtype}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeMissingvaluemapping(Missingvaluemappinghandlingtype value) {
		Base.remove(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
  
    /**
     * Removes all values of property {@code Missingvaluemapping}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllMissingvaluemapping(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, MISSINGVALUEMAPPING);
	}

    /**
     * Removes all values of property {@code Missingvaluemapping}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllMissingvaluemapping() {
		Base.removeAll(this.model, this.getResource(), MISSINGVALUEMAPPING);
	}
     /**
     * Check if {@code Objectfilter} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasObjectfilter(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, OBJECTFILTER);
	}

    /**
     * Check if {@code Objectfilter} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasObjectfilter() {
		return Base.has(this.model, this.getResource(), OBJECTFILTER);
	}

    /**
     * Check if {@code Objectfilter} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasObjectfilter(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, OBJECTFILTER, value);
	}

    /**
     * Check if {@code Objectfilter} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasObjectfilter( Node value ) {
		return Base.hasValue(this.model, this.getResource(), OBJECTFILTER, value);
	}

     /**
     * Get all values of property {@code Objectfilter} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllObjectfilter_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OBJECTFILTER);
	}

    /**
     * Get all values of property {@code Objectfilter} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllObjectfilter_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OBJECTFILTER, Node.class);
	}

    /**
     * Get all values of property {@code Objectfilter} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllObjectfilter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OBJECTFILTER);
	}

    /**
     * Get all values of property {@code Objectfilter} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllObjectfilter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OBJECTFILTER, Node.class);
	}
 
    /**
     * Get all values of property {@code Objectfilter}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<SPARQLselector> getAllObjectfilter(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, OBJECTFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Objectfilter} as a ReactorResult of {@linkplain SPARQLselector}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<SPARQLselector> getAllObjectfilter_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OBJECTFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Objectfilter}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<SPARQLselector> getAllObjectfilter() {
		return Base.getAll(this.model, this.getResource(), OBJECTFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Objectfilter} as a ReactorResult of {@linkplain SPARQLselector}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<SPARQLselector> getAllObjectfilter_as() {
		return Base.getAll_as(this.model, this.getResource(), OBJECTFILTER, SPARQLselector.class);
	}

 
    /**
     * Adds a value to property {@code Objectfilter} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addObjectfilter(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, OBJECTFILTER, value);
	}

    /**
     * Adds a value to property {@code Objectfilter} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addObjectfilter(Node value) {
		Base.add(this.model, this.getResource(), OBJECTFILTER, value);
	}
    /**
     * Adds a value to property {@code Objectfilter} from an instance of {@linkplain SPARQLselector}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addObjectfilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.add(model, instanceResource, OBJECTFILTER, value);
	}

    /**
     * Adds a value to property {@code Objectfilter} from an instance of {@linkplain SPARQLselector}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addObjectfilter(SPARQLselector value) {
		Base.add(this.model, this.getResource(), OBJECTFILTER, value);
	}
  

    /**
     * Sets a value of property {@code Objectfilter} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setObjectfilter(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, OBJECTFILTER, value);
	}

    /**
     * Sets a value of property {@code Objectfilter} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setObjectfilter(Node value) {
		Base.set(this.model, this.getResource(), OBJECTFILTER, value);
	}
    /**
     * Sets a value of property {@code Objectfilter} from an instance of {@linkplain SPARQLselector}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setObjectfilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.set(model, instanceResource, OBJECTFILTER, value);
	}

    /**
     * Sets a value of property {@code Objectfilter} from an instance of {@linkplain SPARQLselector}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setObjectfilter(SPARQLselector value) {
		Base.set(this.model, this.getResource(), OBJECTFILTER, value);
	}
  


    /**
     * Removes a value of property {@code Objectfilter} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeObjectfilter(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, OBJECTFILTER, value);
	}

    /**
     * Removes a value of property {@code Objectfilter} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeObjectfilter(Node value) {
		Base.remove(this.model, this.getResource(), OBJECTFILTER, value);
	}
    /**
     * Removes a value of property {@code Objectfilter} given as an instance of {@linkplain SPARQLselector}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeObjectfilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.remove(model, instanceResource, OBJECTFILTER, value);
	}

    /**
     * Removes a value of property {@code Objectfilter} given as an instance of {@linkplain SPARQLselector}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeObjectfilter(SPARQLselector value) {
		Base.remove(this.model, this.getResource(), OBJECTFILTER, value);
	}
  
    /**
     * Removes all values of property {@code Objectfilter}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllObjectfilter(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, OBJECTFILTER);
	}

    /**
     * Removes all values of property {@code Objectfilter}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllObjectfilter() {
		Base.removeAll(this.model, this.getResource(), OBJECTFILTER);
	}
     /**
     * Check if {@code Passedto} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasPassedto(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, PASSEDTO);
	}

    /**
     * Check if {@code Passedto} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasPassedto() {
		return Base.has(this.model, this.getResource(), PASSEDTO);
	}

    /**
     * Check if {@code Passedto} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasPassedto(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, PASSEDTO, value);
	}

    /**
     * Check if {@code Passedto} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasPassedto( Node value ) {
		return Base.hasValue(this.model, this.getResource(), PASSEDTO, value);
	}

     /**
     * Get all values of property {@code Passedto} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllPassedto_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PASSEDTO);
	}

    /**
     * Get all values of property {@code Passedto} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllPassedto_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PASSEDTO, Node.class);
	}

    /**
     * Get all values of property {@code Passedto} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllPassedto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PASSEDTO);
	}

    /**
     * Get all values of property {@code Passedto} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllPassedto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PASSEDTO, Node.class);
	}
 
    /**
     * Get all values of property {@code Passedto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllPassedto(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, PASSEDTO, Thing1.class);
	}

    /**
     * Get all values of property {@code Passedto} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllPassedto_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PASSEDTO, Thing1.class);
	}

    /**
     * Get all values of property {@code Passedto}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllPassedto() {
		return Base.getAll(this.model, this.getResource(), PASSEDTO, Thing1.class);
	}

    /**
     * Get all values of property {@code Passedto} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllPassedto_as() {
		return Base.getAll_as(this.model, this.getResource(), PASSEDTO, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Passedto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addPassedto(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, PASSEDTO, value);
	}

    /**
     * Adds a value to property {@code Passedto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addPassedto(Node value) {
		Base.add(this.model, this.getResource(), PASSEDTO, value);
	}
    /**
     * Adds a value to property {@code Passedto} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addPassedto(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, PASSEDTO, value);
	}

    /**
     * Adds a value to property {@code Passedto} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addPassedto(Thing1 value) {
		Base.add(this.model, this.getResource(), PASSEDTO, value);
	}
  

    /**
     * Sets a value of property {@code Passedto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setPassedto(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, PASSEDTO, value);
	}

    /**
     * Sets a value of property {@code Passedto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setPassedto(Node value) {
		Base.set(this.model, this.getResource(), PASSEDTO, value);
	}
    /**
     * Sets a value of property {@code Passedto} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setPassedto(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, PASSEDTO, value);
	}

    /**
     * Sets a value of property {@code Passedto} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setPassedto(Thing1 value) {
		Base.set(this.model, this.getResource(), PASSEDTO, value);
	}
  


    /**
     * Removes a value of property {@code Passedto} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removePassedto(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, PASSEDTO, value);
	}

    /**
     * Removes a value of property {@code Passedto} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removePassedto(Node value) {
		Base.remove(this.model, this.getResource(), PASSEDTO, value);
	}
    /**
     * Removes a value of property {@code Passedto} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removePassedto(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, PASSEDTO, value);
	}

    /**
     * Removes a value of property {@code Passedto} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removePassedto(Thing1 value) {
		Base.remove(this.model, this.getResource(), PASSEDTO, value);
	}
  
    /**
     * Removes all values of property {@code Passedto}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllPassedto(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, PASSEDTO);
	}

    /**
     * Removes all values of property {@code Passedto}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllPassedto() {
		Base.removeAll(this.model, this.getResource(), PASSEDTO);
	}
     /**
     * Check if {@code Sourceproperty} has at least one value set.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourceproperty(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEPROPERTY);
	}

    /**
     * Check if {@code Sourceproperty} has at least one value set.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourceproperty() {
		return Base.has(this.model, this.getResource(), SOURCEPROPERTY);
	}

    /**
     * Check if {@code Sourceproperty} has the given value (maybe among other values).
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourceproperty(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEPROPERTY, value);
	}

    /**
     * Check if {@code Sourceproperty} has the given value (maybe among other values).
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourceproperty( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEPROPERTY, value);
	}

     /**
     * Get all values of property {@code Sourceproperty} as an Iterator over RDF2Go nodes.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourceproperty_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEPROPERTY);
	}

    /**
     * Get all values of property {@code Sourceproperty} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourceproperty_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEPROPERTY, Node.class);
	}

    /**
     * Get all values of property {@code Sourceproperty} as an Iterator over RDF2Go nodes
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourceproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEPROPERTY);
	}

    /**
     * Get all values of property {@code Sourceproperty} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourceproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEPROPERTY, Node.class);
	}
 
    /**
     * Get all values of property {@code Sourceproperty}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllSourceproperty(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Sourceproperty} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllSourceproperty_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Sourceproperty}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllSourceproperty() {
		return Base.getAll(this.model, this.getResource(), SOURCEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Sourceproperty} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllSourceproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

 
    /**
     * Adds a value to property {@code Sourceproperty} as an RDF2Go {@linkplain Node}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourceproperty(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEPROPERTY, value);
	}

    /**
     * Adds a value to property {@code Sourceproperty} as an RDF2Go {@linkplain Node}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourceproperty(Node value) {
		Base.add(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
    /**
     * Adds a value to property {@code Sourceproperty} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourceproperty(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, SOURCEPROPERTY, value);
	}

    /**
     * Adds a value to property {@code Sourceproperty} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourceproperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
  

    /**
     * Sets a value of property {@code Sourceproperty} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourceproperty(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEPROPERTY, value);
	}

    /**
     * Sets a value of property {@code Sourceproperty} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourceproperty(Node value) {
		Base.set(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
    /**
     * Sets a value of property {@code Sourceproperty} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourceproperty(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, SOURCEPROPERTY, value);
	}

    /**
     * Sets a value of property {@code Sourceproperty} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourceproperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
  


    /**
     * Removes a value of property {@code Sourceproperty} as an RDF2Go {@linkplain Node}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourceproperty(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEPROPERTY, value);
	}

    /**
     * Removes a value of property {@code Sourceproperty} as an RDF2Go {@linkplain Node}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourceproperty(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
    /**
     * Removes a value of property {@code Sourceproperty} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourceproperty(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, SOURCEPROPERTY, value);
	}

    /**
     * Removes a value of property {@code Sourceproperty} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourceproperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
  
    /**
     * Removes all values of property {@code Sourceproperty}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourceproperty(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEPROPERTY);
	}

    /**
     * Removes all values of property {@code Sourceproperty}.
     * Comment from schema: A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourceproperty() {
		Base.removeAll(this.model, this.getResource(), SOURCEPROPERTY);
	}
     /**
     * Check if {@code Sourcevaluesoutofbounds} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourcevaluesoutofbounds(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Check if {@code Sourcevaluesoutofbounds} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourcevaluesoutofbounds() {
		return Base.has(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Check if {@code Sourcevaluesoutofbounds} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourcevaluesoutofbounds(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}

    /**
     * Check if {@code Sourcevaluesoutofbounds} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourcevaluesoutofbounds( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}

     /**
     * Get all values of property {@code Sourcevaluesoutofbounds} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourcevaluesoutofbounds_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Get all values of property {@code Sourcevaluesoutofbounds} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourcevaluesoutofbounds_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, Node.class);
	}

    /**
     * Get all values of property {@code Sourcevaluesoutofbounds} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourcevaluesoutofbounds_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Get all values of property {@code Sourcevaluesoutofbounds} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourcevaluesoutofbounds_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, Node.class);
	}
 
    /**
     * Get all values of property {@code Sourcevaluesoutofbounds}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllSourcevaluesoutofbounds(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, Thing1.class);
	}

    /**
     * Get all values of property {@code Sourcevaluesoutofbounds} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllSourcevaluesoutofbounds_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, Thing1.class);
	}

    /**
     * Get all values of property {@code Sourcevaluesoutofbounds}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllSourcevaluesoutofbounds() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, Thing1.class);
	}

    /**
     * Get all values of property {@code Sourcevaluesoutofbounds} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllSourcevaluesoutofbounds_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Sourcevaluesoutofbounds} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourcevaluesoutofbounds(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}

    /**
     * Adds a value to property {@code Sourcevaluesoutofbounds} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourcevaluesoutofbounds(Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
    /**
     * Adds a value to property {@code Sourcevaluesoutofbounds} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourcevaluesoutofbounds(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}

    /**
     * Adds a value to property {@code Sourcevaluesoutofbounds} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourcevaluesoutofbounds(Thing1 value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
  

    /**
     * Sets a value of property {@code Sourcevaluesoutofbounds} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourcevaluesoutofbounds(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}

    /**
     * Sets a value of property {@code Sourcevaluesoutofbounds} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourcevaluesoutofbounds(Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
    /**
     * Sets a value of property {@code Sourcevaluesoutofbounds} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourcevaluesoutofbounds(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}

    /**
     * Sets a value of property {@code Sourcevaluesoutofbounds} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourcevaluesoutofbounds(Thing1 value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
  


    /**
     * Removes a value of property {@code Sourcevaluesoutofbounds} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourcevaluesoutofbounds(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}

    /**
     * Removes a value of property {@code Sourcevaluesoutofbounds} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourcevaluesoutofbounds(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
    /**
     * Removes a value of property {@code Sourcevaluesoutofbounds} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourcevaluesoutofbounds(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}

    /**
     * Removes a value of property {@code Sourcevaluesoutofbounds} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourcevaluesoutofbounds(Thing1 value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
  
    /**
     * Removes all values of property {@code Sourcevaluesoutofbounds}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourcevaluesoutofbounds(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Removes all values of property {@code Sourcevaluesoutofbounds}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourcevaluesoutofbounds() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS);
	}
     /**
     * Check if {@code Sub_graphic} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSub_graphic(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SUB_GRAPHIC);
	}

    /**
     * Check if {@code Sub_graphic} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSub_graphic() {
		return Base.has(this.model, this.getResource(), SUB_GRAPHIC);
	}

    /**
     * Check if {@code Sub_graphic} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSub_graphic(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SUB_GRAPHIC, value);
	}

    /**
     * Check if {@code Sub_graphic} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSub_graphic( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUB_GRAPHIC, value);
	}

     /**
     * Get all values of property {@code Sub_graphic} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSub_graphic_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUB_GRAPHIC);
	}

    /**
     * Get all values of property {@code Sub_graphic} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSub_graphic_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUB_GRAPHIC, Node.class);
	}

    /**
     * Get all values of property {@code Sub_graphic} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSub_graphic_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUB_GRAPHIC);
	}

    /**
     * Get all values of property {@code Sub_graphic} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSub_graphic_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUB_GRAPHIC, Node.class);
	}
 
    /**
     * Get all values of property {@code Sub_graphic}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllSub_graphic(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUB_GRAPHIC, Thing1.class);
	}

    /**
     * Get all values of property {@code Sub_graphic} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllSub_graphic_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUB_GRAPHIC, Thing1.class);
	}

    /**
     * Get all values of property {@code Sub_graphic}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllSub_graphic() {
		return Base.getAll(this.model, this.getResource(), SUB_GRAPHIC, Thing1.class);
	}

    /**
     * Get all values of property {@code Sub_graphic} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllSub_graphic_as() {
		return Base.getAll_as(this.model, this.getResource(), SUB_GRAPHIC, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Sub_graphic} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSub_graphic(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SUB_GRAPHIC, value);
	}

    /**
     * Adds a value to property {@code Sub_graphic} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSub_graphic(Node value) {
		Base.add(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
    /**
     * Adds a value to property {@code Sub_graphic} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSub_graphic(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, SUB_GRAPHIC, value);
	}

    /**
     * Adds a value to property {@code Sub_graphic} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSub_graphic(Thing1 value) {
		Base.add(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
  

    /**
     * Sets a value of property {@code Sub_graphic} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSub_graphic(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SUB_GRAPHIC, value);
	}

    /**
     * Sets a value of property {@code Sub_graphic} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSub_graphic(Node value) {
		Base.set(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
    /**
     * Sets a value of property {@code Sub_graphic} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSub_graphic(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, SUB_GRAPHIC, value);
	}

    /**
     * Sets a value of property {@code Sub_graphic} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSub_graphic(Thing1 value) {
		Base.set(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
  


    /**
     * Removes a value of property {@code Sub_graphic} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSub_graphic(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SUB_GRAPHIC, value);
	}

    /**
     * Removes a value of property {@code Sub_graphic} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSub_graphic(Node value) {
		Base.remove(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
    /**
     * Removes a value of property {@code Sub_graphic} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSub_graphic(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, SUB_GRAPHIC, value);
	}

    /**
     * Removes a value of property {@code Sub_graphic} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSub_graphic(Thing1 value) {
		Base.remove(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
  
    /**
     * Removes all values of property {@code Sub_graphic}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSub_graphic(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUB_GRAPHIC);
	}

    /**
     * Removes all values of property {@code Sub_graphic}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSub_graphic() {
		Base.removeAll(this.model, this.getResource(), SUB_GRAPHIC);
	}
     /**
     * Check if {@code Sub_mapping} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSub_mapping(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SUB_MAPPING);
	}

    /**
     * Check if {@code Sub_mapping} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSub_mapping() {
		return Base.has(this.model, this.getResource(), SUB_MAPPING);
	}

    /**
     * Check if {@code Sub_mapping} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSub_mapping(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SUB_MAPPING, value);
	}

    /**
     * Check if {@code Sub_mapping} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSub_mapping( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUB_MAPPING, value);
	}

     /**
     * Get all values of property {@code Sub_mapping} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSub_mapping_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUB_MAPPING);
	}

    /**
     * Get all values of property {@code Sub_mapping} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSub_mapping_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUB_MAPPING, Node.class);
	}

    /**
     * Get all values of property {@code Sub_mapping} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSub_mapping_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUB_MAPPING);
	}

    /**
     * Get all values of property {@code Sub_mapping} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSub_mapping_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUB_MAPPING, Node.class);
	}
 
    /**
     * Get all values of property {@code Sub_mapping}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Sub_mappingrelation> getAllSub_mapping(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUB_MAPPING, Sub_mappingrelation.class);
	}

    /**
     * Get all values of property {@code Sub_mapping} as a ReactorResult of {@linkplain Sub_mappingrelation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Sub_mappingrelation> getAllSub_mapping_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUB_MAPPING, Sub_mappingrelation.class);
	}

    /**
     * Get all values of property {@code Sub_mapping}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Sub_mappingrelation> getAllSub_mapping() {
		return Base.getAll(this.model, this.getResource(), SUB_MAPPING, Sub_mappingrelation.class);
	}

    /**
     * Get all values of property {@code Sub_mapping} as a ReactorResult of {@linkplain Sub_mappingrelation}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Sub_mappingrelation> getAllSub_mapping_as() {
		return Base.getAll_as(this.model, this.getResource(), SUB_MAPPING, Sub_mappingrelation.class);
	}

 
    /**
     * Adds a value to property {@code Sub_mapping} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSub_mapping(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SUB_MAPPING, value);
	}

    /**
     * Adds a value to property {@code Sub_mapping} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSub_mapping(Node value) {
		Base.add(this.model, this.getResource(), SUB_MAPPING, value);
	}
    /**
     * Adds a value to property {@code Sub_mapping} from an instance of {@linkplain Sub_mappingrelation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSub_mapping(Model model, Resource instanceResource, Sub_mappingrelation value) {
		Base.add(model, instanceResource, SUB_MAPPING, value);
	}

    /**
     * Adds a value to property {@code Sub_mapping} from an instance of {@linkplain Sub_mappingrelation}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSub_mapping(Sub_mappingrelation value) {
		Base.add(this.model, this.getResource(), SUB_MAPPING, value);
	}
  

    /**
     * Sets a value of property {@code Sub_mapping} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSub_mapping(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SUB_MAPPING, value);
	}

    /**
     * Sets a value of property {@code Sub_mapping} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSub_mapping(Node value) {
		Base.set(this.model, this.getResource(), SUB_MAPPING, value);
	}
    /**
     * Sets a value of property {@code Sub_mapping} from an instance of {@linkplain Sub_mappingrelation}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSub_mapping(Model model, Resource instanceResource, Sub_mappingrelation value) {
		Base.set(model, instanceResource, SUB_MAPPING, value);
	}

    /**
     * Sets a value of property {@code Sub_mapping} from an instance of {@linkplain Sub_mappingrelation}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSub_mapping(Sub_mappingrelation value) {
		Base.set(this.model, this.getResource(), SUB_MAPPING, value);
	}
  


    /**
     * Removes a value of property {@code Sub_mapping} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSub_mapping(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SUB_MAPPING, value);
	}

    /**
     * Removes a value of property {@code Sub_mapping} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSub_mapping(Node value) {
		Base.remove(this.model, this.getResource(), SUB_MAPPING, value);
	}
    /**
     * Removes a value of property {@code Sub_mapping} given as an instance of {@linkplain Sub_mappingrelation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSub_mapping(Model model, Resource instanceResource, Sub_mappingrelation value) {
		Base.remove(model, instanceResource, SUB_MAPPING, value);
	}

    /**
     * Removes a value of property {@code Sub_mapping} given as an instance of {@linkplain Sub_mappingrelation}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSub_mapping(Sub_mappingrelation value) {
		Base.remove(this.model, this.getResource(), SUB_MAPPING, value);
	}
  
    /**
     * Removes all values of property {@code Sub_mapping}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSub_mapping(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUB_MAPPING);
	}

    /**
     * Removes all values of property {@code Sub_mapping}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSub_mapping() {
		Base.removeAll(this.model, this.getResource(), SUB_MAPPING);
	}
     /**
     * Check if {@code Subjectfilter} has at least one value set.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSubjectfilter(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECTFILTER);
	}

    /**
     * Check if {@code Subjectfilter} has at least one value set.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSubjectfilter() {
		return Base.has(this.model, this.getResource(), SUBJECTFILTER);
	}

    /**
     * Check if {@code Subjectfilter} has the given value (maybe among other values).
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSubjectfilter(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECTFILTER, value);
	}

    /**
     * Check if {@code Subjectfilter} has the given value (maybe among other values).
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSubjectfilter( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECTFILTER, value);
	}

     /**
     * Get all values of property {@code Subjectfilter} as an Iterator over RDF2Go nodes.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSubjectfilter_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECTFILTER);
	}

    /**
     * Get all values of property {@code Subjectfilter} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSubjectfilter_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTFILTER, Node.class);
	}

    /**
     * Get all values of property {@code Subjectfilter} as an Iterator over RDF2Go nodes
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSubjectfilter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECTFILTER);
	}

    /**
     * Get all values of property {@code Subjectfilter} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSubjectfilter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTFILTER, Node.class);
	}
 
    /**
     * Get all values of property {@code Subjectfilter}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<SPARQLselector> getAllSubjectfilter(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECTFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Subjectfilter} as a ReactorResult of {@linkplain SPARQLselector}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<SPARQLselector> getAllSubjectfilter_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Subjectfilter}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<SPARQLselector> getAllSubjectfilter() {
		return Base.getAll(this.model, this.getResource(), SUBJECTFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Subjectfilter} as a ReactorResult of {@linkplain SPARQLselector}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<SPARQLselector> getAllSubjectfilter_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTFILTER, SPARQLselector.class);
	}

 
    /**
     * Adds a value to property {@code Subjectfilter} as an RDF2Go {@linkplain Node}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSubjectfilter(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SUBJECTFILTER, value);
	}

    /**
     * Adds a value to property {@code Subjectfilter} as an RDF2Go {@linkplain Node}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSubjectfilter(Node value) {
		Base.add(this.model, this.getResource(), SUBJECTFILTER, value);
	}
    /**
     * Adds a value to property {@code Subjectfilter} from an instance of {@linkplain SPARQLselector}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSubjectfilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.add(model, instanceResource, SUBJECTFILTER, value);
	}

    /**
     * Adds a value to property {@code Subjectfilter} from an instance of {@linkplain SPARQLselector}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSubjectfilter(SPARQLselector value) {
		Base.add(this.model, this.getResource(), SUBJECTFILTER, value);
	}
  

    /**
     * Sets a value of property {@code Subjectfilter} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSubjectfilter(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SUBJECTFILTER, value);
	}

    /**
     * Sets a value of property {@code Subjectfilter} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSubjectfilter(Node value) {
		Base.set(this.model, this.getResource(), SUBJECTFILTER, value);
	}
    /**
     * Sets a value of property {@code Subjectfilter} from an instance of {@linkplain SPARQLselector}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSubjectfilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.set(model, instanceResource, SUBJECTFILTER, value);
	}

    /**
     * Sets a value of property {@code Subjectfilter} from an instance of {@linkplain SPARQLselector}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSubjectfilter(SPARQLselector value) {
		Base.set(this.model, this.getResource(), SUBJECTFILTER, value);
	}
  


    /**
     * Removes a value of property {@code Subjectfilter} as an RDF2Go {@linkplain Node}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSubjectfilter(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SUBJECTFILTER, value);
	}

    /**
     * Removes a value of property {@code Subjectfilter} as an RDF2Go {@linkplain Node}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSubjectfilter(Node value) {
		Base.remove(this.model, this.getResource(), SUBJECTFILTER, value);
	}
    /**
     * Removes a value of property {@code Subjectfilter} given as an instance of {@linkplain SPARQLselector}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSubjectfilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.remove(model, instanceResource, SUBJECTFILTER, value);
	}

    /**
     * Removes a value of property {@code Subjectfilter} given as an instance of {@linkplain SPARQLselector}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSubjectfilter(SPARQLselector value) {
		Base.remove(this.model, this.getResource(), SUBJECTFILTER, value);
	}
  
    /**
     * Removes all values of property {@code Subjectfilter}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSubjectfilter(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECTFILTER);
	}

    /**
     * Removes all values of property {@code Subjectfilter}.
     * Comment from schema: CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSubjectfilter() {
		Base.removeAll(this.model, this.getResource(), SUBJECTFILTER);
	}
     /**
     * Check if {@code Targetgraphicrelation_abstract_} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTargetgraphicrelation_abstract_(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Check if {@code Targetgraphicrelation_abstract_} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTargetgraphicrelation_abstract_() {
		return Base.has(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Check if {@code Targetgraphicrelation_abstract_} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTargetgraphicrelation_abstract_(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}

    /**
     * Check if {@code Targetgraphicrelation_abstract_} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTargetgraphicrelation_abstract_( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}

     /**
     * Get all values of property {@code Targetgraphicrelation_abstract_} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTargetgraphicrelation_abstract__asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Get all values of property {@code Targetgraphicrelation_abstract_} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTargetgraphicrelation_abstract__asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, Node.class);
	}

    /**
     * Get all values of property {@code Targetgraphicrelation_abstract_} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTargetgraphicrelation_abstract__asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Get all values of property {@code Targetgraphicrelation_abstract_} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTargetgraphicrelation_abstract__asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, Node.class);
	}
 
    /**
     * Get all values of property {@code Targetgraphicrelation_abstract_}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllTargetgraphicrelation_abstract_(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, Thing1.class);
	}

    /**
     * Get all values of property {@code Targetgraphicrelation_abstract_} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllTargetgraphicrelation_abstract__as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, Thing1.class);
	}

    /**
     * Get all values of property {@code Targetgraphicrelation_abstract_}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllTargetgraphicrelation_abstract_() {
		return Base.getAll(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, Thing1.class);
	}

    /**
     * Get all values of property {@code Targetgraphicrelation_abstract_} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllTargetgraphicrelation_abstract__as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Targetgraphicrelation_abstract_} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTargetgraphicrelation_abstract_(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}

    /**
     * Adds a value to property {@code Targetgraphicrelation_abstract_} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTargetgraphicrelation_abstract_(Node value) {
		Base.add(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
    /**
     * Adds a value to property {@code Targetgraphicrelation_abstract_} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetgraphicrelation_abstract_(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}

    /**
     * Adds a value to property {@code Targetgraphicrelation_abstract_} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetgraphicrelation_abstract_(Thing1 value) {
		Base.add(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
  

    /**
     * Sets a value of property {@code Targetgraphicrelation_abstract_} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTargetgraphicrelation_abstract_(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}

    /**
     * Sets a value of property {@code Targetgraphicrelation_abstract_} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTargetgraphicrelation_abstract_(Node value) {
		Base.set(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
    /**
     * Sets a value of property {@code Targetgraphicrelation_abstract_} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetgraphicrelation_abstract_(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}

    /**
     * Sets a value of property {@code Targetgraphicrelation_abstract_} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetgraphicrelation_abstract_(Thing1 value) {
		Base.set(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
  


    /**
     * Removes a value of property {@code Targetgraphicrelation_abstract_} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTargetgraphicrelation_abstract_(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}

    /**
     * Removes a value of property {@code Targetgraphicrelation_abstract_} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTargetgraphicrelation_abstract_(Node value) {
		Base.remove(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
    /**
     * Removes a value of property {@code Targetgraphicrelation_abstract_} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetgraphicrelation_abstract_(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}

    /**
     * Removes a value of property {@code Targetgraphicrelation_abstract_} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetgraphicrelation_abstract_(Thing1 value) {
		Base.remove(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
  
    /**
     * Removes all values of property {@code Targetgraphicrelation_abstract_}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTargetgraphicrelation_abstract_(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Removes all values of property {@code Targetgraphicrelation_abstract_}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTargetgraphicrelation_abstract_() {
		Base.removeAll(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_);
	}
 }