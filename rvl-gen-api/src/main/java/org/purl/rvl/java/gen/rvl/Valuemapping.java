/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) on 18.08.15 11:42
 */
package org.purl.rvl.java.gen.rvl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * Comment from schema: Since discrete values on the target site are distinguished and mapped to source values, only mappings to visual attributes - not to other visual relations - will typically have value mappings. In the case of graphic-object-to-object-relations, there are usually no various target values which need to be mapped explicitly. Since most are binary, there are only two - either the graphic relation exists or not. 
 *
 * This class manages access to these properties:
 * <ul>
 *   <li>Discretestepcount</li>
 *   <li>Discretestepsize_deprecated_</li>
 *   <li>Discretize</li>
 *   <li>Excludesourcevalue</li>
 *   <li>Excludetargetvalue</li>
 *   <li>Invertorderoftargetvalues</li>
 *   <li>Ordersourcevaluesby</li>
 *   <li>Ordertargetvaluesby</li>
 *   <li>Quantifysourcevaluesby</li>
 *   <li>Quantifytargetvaluesby</li>
 *   <li>Scaletransformationtype</li>
 *   <li>Sourcefilter</li>
 *   <li>Sourceinterval</li>
 *   <li>Sourcevalue</li>
 *   <li>Sourcevalueorderedset</li>
 *   <li>Sourcevalueset</li>
 *   <li>Sourcevalueslabel</li>
 *   <li>Targetvalue</li>
 *   <li>Targetvaluecycle</li>
 *   <li>Targetvalueinterval</li>
 *   <li>Targetvaluelist</li>
 *   <li>Targetvalueorderedset</li>
 *   <li>Targetvalues_abstract_</li>
 *   <li>Targetvalueset</li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 18.08.15 11:42
 */
public class Valuemapping extends Mapping {

    private static final long serialVersionUID = -6617617221262235460L;

    /** http://purl.org/rvl/ValueMapping */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/rvl/ValueMapping", false);

    /** http://purl.org/rvl/discreteStepCount */
	public static final URI DISCRETESTEPCOUNT = new URIImpl("http://purl.org/rvl/discreteStepCount", false);

    /** http://purl.org/rvl/discreteStepSize */
	public static final URI DISCRETESTEPSIZE_DEPRECATED_ = new URIImpl("http://purl.org/rvl/discreteStepSize", false);

    /** http://purl.org/rvl/discretize */
	public static final URI DISCRETIZE = new URIImpl("http://purl.org/rvl/discretize", false);

    /** http://purl.org/rvl/excludeSourceValue */
	public static final URI EXCLUDESOURCEVALUE = new URIImpl("http://purl.org/rvl/excludeSourceValue", false);

    /** http://purl.org/rvl/excludeTargetValue */
	public static final URI EXCLUDETARGETVALUE = new URIImpl("http://purl.org/rvl/excludeTargetValue", false);

    /** http://purl.org/rvl/invertOrderOfTargetValues */
	public static final URI INVERTORDEROFTARGETVALUES = new URIImpl("http://purl.org/rvl/invertOrderOfTargetValues", false);

    /** http://purl.org/rvl/orderSourceValuesBy */
	public static final URI ORDERSOURCEVALUESBY = new URIImpl("http://purl.org/rvl/orderSourceValuesBy", false);

    /** http://purl.org/rvl/orderTargetValuesBy */
	public static final URI ORDERTARGETVALUESBY = new URIImpl("http://purl.org/rvl/orderTargetValuesBy", false);

    /** http://purl.org/rvl/quantifySourceValuesBy */
	public static final URI QUANTIFYSOURCEVALUESBY = new URIImpl("http://purl.org/rvl/quantifySourceValuesBy", false);

    /** http://purl.org/rvl/quantifyTargetValuesBy */
	public static final URI QUANTIFYTARGETVALUESBY = new URIImpl("http://purl.org/rvl/quantifyTargetValuesBy", false);

    /** http://purl.org/rvl/scaleTransformation */
	public static final URI SCALETRANSFORMATIONTYPE = new URIImpl("http://purl.org/rvl/scaleTransformation", false);

    /** http://purl.org/rvl/sourceFilter */
	public static final URI SOURCEFILTER = new URIImpl("http://purl.org/rvl/sourceFilter", false);

    /** http://purl.org/rvl/sourceValueInterval */
	public static final URI SOURCEINTERVAL = new URIImpl("http://purl.org/rvl/sourceValueInterval", false);

    /** http://purl.org/rvl/sourceValue */
	public static final URI SOURCEVALUE = new URIImpl("http://purl.org/rvl/sourceValue", false);

    /** http://purl.org/rvl/sourceValueOrderedSet */
	public static final URI SOURCEVALUEORDEREDSET = new URIImpl("http://purl.org/rvl/sourceValueOrderedSet", false);

    /** http://purl.org/rvl/sourceValueSet */
	public static final URI SOURCEVALUESET = new URIImpl("http://purl.org/rvl/sourceValueSet", false);

    /** http://purl.org/rvl/sourceValuesLabel */
	public static final URI SOURCEVALUESLABEL = new URIImpl("http://purl.org/rvl/sourceValuesLabel", false);

    /** http://purl.org/rvl/targetValue */
	public static final URI TARGETVALUE = new URIImpl("http://purl.org/rvl/targetValue", false);

    /** http://purl.org/rvl/targetValueCycle */
	public static final URI TARGETVALUECYCLE = new URIImpl("http://purl.org/rvl/targetValueCycle", false);

    /** http://purl.org/rvl/targetValueInterval */
	public static final URI TARGETVALUEINTERVAL = new URIImpl("http://purl.org/rvl/targetValueInterval", false);

    /** http://purl.org/rvl/targetValueList */
	public static final URI TARGETVALUELIST = new URIImpl("http://purl.org/rvl/targetValueList", false);

    /** http://purl.org/rvl/targetValueOrderedSet */
	public static final URI TARGETVALUEORDEREDSET = new URIImpl("http://purl.org/rvl/targetValueOrderedSet", false);

    /** http://purl.org/rvl/targetValues */
	public static final URI TARGETVALUES_ABSTRACT_ = new URIImpl("http://purl.org/rvl/targetValues", false);

    /** http://purl.org/rvl/targetValueSet */
	public static final URI TARGETVALUESET = new URIImpl("http://purl.org/rvl/targetValueSet", false);

    /**
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/rvl/discreteStepCount", false),
      new URIImpl("http://purl.org/rvl/discreteStepSize", false),
      new URIImpl("http://purl.org/rvl/discretize", false),
      new URIImpl("http://purl.org/rvl/excludeSourceValue", false),
      new URIImpl("http://purl.org/rvl/excludeTargetValue", false),
      new URIImpl("http://purl.org/rvl/invertOrderOfTargetValues", false),
      new URIImpl("http://purl.org/rvl/orderSourceValuesBy", false),
      new URIImpl("http://purl.org/rvl/orderTargetValuesBy", false),
      new URIImpl("http://purl.org/rvl/quantifySourceValuesBy", false),
      new URIImpl("http://purl.org/rvl/quantifyTargetValuesBy", false),
      new URIImpl("http://purl.org/rvl/scaleTransformation", false),
      new URIImpl("http://purl.org/rvl/sourceFilter", false),
      new URIImpl("http://purl.org/rvl/sourceValueInterval", false),
      new URIImpl("http://purl.org/rvl/sourceValue", false),
      new URIImpl("http://purl.org/rvl/sourceValueOrderedSet", false),
      new URIImpl("http://purl.org/rvl/sourceValueSet", false),
      new URIImpl("http://purl.org/rvl/sourceValuesLabel", false),
      new URIImpl("http://purl.org/rvl/targetValue", false),
      new URIImpl("http://purl.org/rvl/targetValueCycle", false),
      new URIImpl("http://purl.org/rvl/targetValueInterval", false),
      new URIImpl("http://purl.org/rvl/targetValueList", false),
      new URIImpl("http://purl.org/rvl/targetValueOrderedSet", false),
      new URIImpl("http://purl.org/rvl/targetValues", false),
      new URIImpl("http://purl.org/rvl/targetValueSet", false)
    };


	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected Valuemapping (Model model, URI classURI, Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2]
	 */
	public Valuemapping (Model model, Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7]
	 */
	public Valuemapping (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8]
	 */
	public Valuemapping (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9]
	 */
	public Valuemapping (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Valuemapping or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0]
	 */
	public static Valuemapping getInstance(Model model, Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Valuemapping.class);
	}

	/**
	 * Create a new instance of this class in the model.
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/rvl/ValueMapping).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1]
	 */
	public static void createInstance(Model model, Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2]
	 */
	public static boolean hasInstance(Model model, Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3]
	 */
	public static ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as]
	 */
	public static ReactorResult<? extends Valuemapping> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Valuemapping.class );
	}

    /**
	 * Remove triple {@code (this, rdf:type, Valuemapping)} from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4]
	 */
	public static void deleteInstance(Model model, Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class5]
	 */
	public static void deleteAllProperties(Model model,	Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Valuemapping' to this Valuemapping instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllValuemapping_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Property_to_Graphic_AttributeMapping.VALUEMAPPING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Valuemapping' to this Valuemapping instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllValuemapping_Inverse() {
		return Base.getAll_Inverse(this.model, Property_to_Graphic_AttributeMapping.VALUEMAPPING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Valuemapping' to this Valuemapping instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllValuemapping_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Property_to_Graphic_AttributeMapping.VALUEMAPPING, objectValue, Resource.class);
	}



    /**
     * Check if {@code Discretestepcount} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasDiscretestepcount(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, DISCRETESTEPCOUNT);
	}

    /**
     * Check if {@code Discretestepcount} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasDiscretestepcount() {
		return Base.has(this.model, this.getResource(), DISCRETESTEPCOUNT);
	}

    /**
     * Check if {@code Discretestepcount} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasDiscretestepcount(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, DISCRETESTEPCOUNT, value);
	}

    /**
     * Check if {@code Discretestepcount} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasDiscretestepcount( Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}

     /**
     * Get all values of property {@code Discretestepcount} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllDiscretestepcount_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCRETESTEPCOUNT);
	}

    /**
     * Get all values of property {@code Discretestepcount} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllDiscretestepcount_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETESTEPCOUNT, Node.class);
	}

    /**
     * Get all values of property {@code Discretestepcount} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllDiscretestepcount_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCRETESTEPCOUNT);
	}

    /**
     * Get all values of property {@code Discretestepcount} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllDiscretestepcount_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETESTEPCOUNT, Node.class);
	}
 
    /**
     * Get all values of property {@code Discretestepcount}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Integer> getAllDiscretestepcount(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCRETESTEPCOUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property {@code Discretestepcount} as a ReactorResult of {@linkplain java.lang.Integer}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Integer> getAllDiscretestepcount_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETESTEPCOUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property {@code Discretestepcount}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Integer> getAllDiscretestepcount() {
		return Base.getAll(this.model, this.getResource(), DISCRETESTEPCOUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property {@code Discretestepcount} as a ReactorResult of {@linkplain java.lang.Integer}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Integer> getAllDiscretestepcount_as() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETESTEPCOUNT, java.lang.Integer.class);
	}

 
    /**
     * Adds a value to property {@code Discretestepcount} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addDiscretestepcount(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, DISCRETESTEPCOUNT, value);
	}

    /**
     * Adds a value to property {@code Discretestepcount} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addDiscretestepcount(Node value) {
		Base.add(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
    /**
     * Adds a value to property {@code Discretestepcount} from an instance of {@linkplain java.lang.Integer}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addDiscretestepcount(Model model, Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, DISCRETESTEPCOUNT, value);
	}

    /**
     * Adds a value to property {@code Discretestepcount} from an instance of {@linkplain java.lang.Integer}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addDiscretestepcount(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
  

    /**
     * Sets a value of property {@code Discretestepcount} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setDiscretestepcount(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, DISCRETESTEPCOUNT, value);
	}

    /**
     * Sets a value of property {@code Discretestepcount} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setDiscretestepcount(Node value) {
		Base.set(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
    /**
     * Sets a value of property {@code Discretestepcount} from an instance of {@linkplain java.lang.Integer}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setDiscretestepcount(Model model, Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, DISCRETESTEPCOUNT, value);
	}

    /**
     * Sets a value of property {@code Discretestepcount} from an instance of {@linkplain java.lang.Integer}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setDiscretestepcount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
  


    /**
     * Removes a value of property {@code Discretestepcount} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeDiscretestepcount(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, DISCRETESTEPCOUNT, value);
	}

    /**
     * Removes a value of property {@code Discretestepcount} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeDiscretestepcount(Node value) {
		Base.remove(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
    /**
     * Removes a value of property {@code Discretestepcount} given as an instance of {@linkplain java.lang.Integer}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeDiscretestepcount(Model model, Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, DISCRETESTEPCOUNT, value);
	}

    /**
     * Removes a value of property {@code Discretestepcount} given as an instance of {@linkplain java.lang.Integer}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeDiscretestepcount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
  
    /**
     * Removes all values of property {@code Discretestepcount}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllDiscretestepcount(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCRETESTEPCOUNT);
	}

    /**
     * Removes all values of property {@code Discretestepcount}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllDiscretestepcount() {
		Base.removeAll(this.model, this.getResource(), DISCRETESTEPCOUNT);
	}
     /**
     * Check if {@code Discretestepsize_deprecated_} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasDiscretestepsize_deprecated_(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Check if {@code Discretestepsize_deprecated_} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasDiscretestepsize_deprecated_() {
		return Base.has(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Check if {@code Discretestepsize_deprecated_} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasDiscretestepsize_deprecated_(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}

    /**
     * Check if {@code Discretestepsize_deprecated_} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasDiscretestepsize_deprecated_( Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}

     /**
     * Get all values of property {@code Discretestepsize_deprecated_} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllDiscretestepsize_deprecated__asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Get all values of property {@code Discretestepsize_deprecated_} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllDiscretestepsize_deprecated__asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, Node.class);
	}

    /**
     * Get all values of property {@code Discretestepsize_deprecated_} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllDiscretestepsize_deprecated__asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Get all values of property {@code Discretestepsize_deprecated_} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllDiscretestepsize_deprecated__asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, Node.class);
	}
 
    /**
     * Get all values of property {@code Discretestepsize_deprecated_}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllDiscretestepsize_deprecated_(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Discretestepsize_deprecated_} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllDiscretestepsize_deprecated__as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Discretestepsize_deprecated_}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllDiscretestepsize_deprecated_() {
		return Base.getAll(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Discretestepsize_deprecated_} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllDiscretestepsize_deprecated__as() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code Discretestepsize_deprecated_} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addDiscretestepsize_deprecated_(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}

    /**
     * Adds a value to property {@code Discretestepsize_deprecated_} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addDiscretestepsize_deprecated_(Node value) {
		Base.add(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
    /**
     * Adds a value to property {@code Discretestepsize_deprecated_} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addDiscretestepsize_deprecated_(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}

    /**
     * Adds a value to property {@code Discretestepsize_deprecated_} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addDiscretestepsize_deprecated_(java.lang.Float value) {
		Base.add(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
  

    /**
     * Sets a value of property {@code Discretestepsize_deprecated_} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setDiscretestepsize_deprecated_(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}

    /**
     * Sets a value of property {@code Discretestepsize_deprecated_} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setDiscretestepsize_deprecated_(Node value) {
		Base.set(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
    /**
     * Sets a value of property {@code Discretestepsize_deprecated_} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setDiscretestepsize_deprecated_(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}

    /**
     * Sets a value of property {@code Discretestepsize_deprecated_} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setDiscretestepsize_deprecated_(java.lang.Float value) {
		Base.set(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
  


    /**
     * Removes a value of property {@code Discretestepsize_deprecated_} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeDiscretestepsize_deprecated_(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}

    /**
     * Removes a value of property {@code Discretestepsize_deprecated_} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeDiscretestepsize_deprecated_(Node value) {
		Base.remove(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
    /**
     * Removes a value of property {@code Discretestepsize_deprecated_} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeDiscretestepsize_deprecated_(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}

    /**
     * Removes a value of property {@code Discretestepsize_deprecated_} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeDiscretestepsize_deprecated_(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
  
    /**
     * Removes all values of property {@code Discretestepsize_deprecated_}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllDiscretestepsize_deprecated_(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Removes all values of property {@code Discretestepsize_deprecated_}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllDiscretestepsize_deprecated_() {
		Base.removeAll(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_);
	}
     /**
     * Check if {@code Discretize} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasDiscretize(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, DISCRETIZE);
	}

    /**
     * Check if {@code Discretize} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasDiscretize() {
		return Base.has(this.model, this.getResource(), DISCRETIZE);
	}

    /**
     * Check if {@code Discretize} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasDiscretize(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, DISCRETIZE, value);
	}

    /**
     * Check if {@code Discretize} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasDiscretize( Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCRETIZE, value);
	}

     /**
     * Get all values of property {@code Discretize} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllDiscretize_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCRETIZE);
	}

    /**
     * Get all values of property {@code Discretize} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllDiscretize_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETIZE, Node.class);
	}

    /**
     * Get all values of property {@code Discretize} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllDiscretize_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCRETIZE);
	}

    /**
     * Get all values of property {@code Discretize} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllDiscretize_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETIZE, Node.class);
	}
 
    /**
     * Get all values of property {@code Discretize}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Boolean> getAllDiscretize(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCRETIZE, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Discretize} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Boolean> getAllDiscretize_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETIZE, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Discretize}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Boolean> getAllDiscretize() {
		return Base.getAll(this.model, this.getResource(), DISCRETIZE, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Discretize} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Boolean> getAllDiscretize_as() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETIZE, java.lang.Boolean.class);
	}

 
    /**
     * Adds a value to property {@code Discretize} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addDiscretize(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, DISCRETIZE, value);
	}

    /**
     * Adds a value to property {@code Discretize} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addDiscretize(Node value) {
		Base.add(this.model, this.getResource(), DISCRETIZE, value);
	}
    /**
     * Adds a value to property {@code Discretize} from an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addDiscretize(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, DISCRETIZE, value);
	}

    /**
     * Adds a value to property {@code Discretize} from an instance of {@linkplain java.lang.Boolean}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addDiscretize(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), DISCRETIZE, value);
	}
  

    /**
     * Sets a value of property {@code Discretize} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setDiscretize(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, DISCRETIZE, value);
	}

    /**
     * Sets a value of property {@code Discretize} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setDiscretize(Node value) {
		Base.set(this.model, this.getResource(), DISCRETIZE, value);
	}
    /**
     * Sets a value of property {@code Discretize} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setDiscretize(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, DISCRETIZE, value);
	}

    /**
     * Sets a value of property {@code Discretize} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setDiscretize(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), DISCRETIZE, value);
	}
  


    /**
     * Removes a value of property {@code Discretize} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeDiscretize(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, DISCRETIZE, value);
	}

    /**
     * Removes a value of property {@code Discretize} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeDiscretize(Node value) {
		Base.remove(this.model, this.getResource(), DISCRETIZE, value);
	}
    /**
     * Removes a value of property {@code Discretize} given as an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeDiscretize(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, DISCRETIZE, value);
	}

    /**
     * Removes a value of property {@code Discretize} given as an instance of {@linkplain java.lang.Boolean}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeDiscretize(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), DISCRETIZE, value);
	}
  
    /**
     * Removes all values of property {@code Discretize}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllDiscretize(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCRETIZE);
	}

    /**
     * Removes all values of property {@code Discretize}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllDiscretize() {
		Base.removeAll(this.model, this.getResource(), DISCRETIZE);
	}
     /**
     * Check if {@code Excludesourcevalue} has at least one value set.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasExcludesourcevalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, EXCLUDESOURCEVALUE);
	}

    /**
     * Check if {@code Excludesourcevalue} has at least one value set.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasExcludesourcevalue() {
		return Base.has(this.model, this.getResource(), EXCLUDESOURCEVALUE);
	}

    /**
     * Check if {@code Excludesourcevalue} has the given value (maybe among other values).
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasExcludesourcevalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}

    /**
     * Check if {@code Excludesourcevalue} has the given value (maybe among other values).
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasExcludesourcevalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}

     /**
     * Get all values of property {@code Excludesourcevalue} as an Iterator over RDF2Go nodes.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllExcludesourcevalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXCLUDESOURCEVALUE);
	}

    /**
     * Get all values of property {@code Excludesourcevalue} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllExcludesourcevalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXCLUDESOURCEVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Excludesourcevalue} as an Iterator over RDF2Go nodes
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllExcludesourcevalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXCLUDESOURCEVALUE);
	}

    /**
     * Get all values of property {@code Excludesourcevalue} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllExcludesourcevalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXCLUDESOURCEVALUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Excludesourcevalue}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllExcludesourcevalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXCLUDESOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Excludesourcevalue} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllExcludesourcevalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXCLUDESOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Excludesourcevalue}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllExcludesourcevalue() {
		return Base.getAll(this.model, this.getResource(), EXCLUDESOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Excludesourcevalue} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllExcludesourcevalue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXCLUDESOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

 
    /**
     * Adds a value to property {@code Excludesourcevalue} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addExcludesourcevalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code Excludesourcevalue} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addExcludesourcevalue(Node value) {
		Base.add(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
    /**
     * Adds a value to property {@code Excludesourcevalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addExcludesourcevalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code Excludesourcevalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addExcludesourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Excludesourcevalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setExcludesourcevalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code Excludesourcevalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setExcludesourcevalue(Node value) {
		Base.set(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
    /**
     * Sets a value of property {@code Excludesourcevalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setExcludesourcevalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code Excludesourcevalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setExcludesourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Excludesourcevalue} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeExcludesourcevalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code Excludesourcevalue} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeExcludesourcevalue(Node value) {
		Base.remove(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
    /**
     * Removes a value of property {@code Excludesourcevalue} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeExcludesourcevalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code Excludesourcevalue} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeExcludesourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Excludesourcevalue}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllExcludesourcevalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXCLUDESOURCEVALUE);
	}

    /**
     * Removes all values of property {@code Excludesourcevalue}.
     * Comment from schema: Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllExcludesourcevalue() {
		Base.removeAll(this.model, this.getResource(), EXCLUDESOURCEVALUE);
	}
     /**
     * Check if {@code Excludetargetvalue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasExcludetargetvalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, EXCLUDETARGETVALUE);
	}

    /**
     * Check if {@code Excludetargetvalue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasExcludetargetvalue() {
		return Base.has(this.model, this.getResource(), EXCLUDETARGETVALUE);
	}

    /**
     * Check if {@code Excludetargetvalue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasExcludetargetvalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, EXCLUDETARGETVALUE, value);
	}

    /**
     * Check if {@code Excludetargetvalue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasExcludetargetvalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}

     /**
     * Get all values of property {@code Excludetargetvalue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllExcludetargetvalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXCLUDETARGETVALUE);
	}

    /**
     * Get all values of property {@code Excludetargetvalue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllExcludetargetvalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXCLUDETARGETVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Excludetargetvalue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllExcludetargetvalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXCLUDETARGETVALUE);
	}

    /**
     * Get all values of property {@code Excludetargetvalue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllExcludetargetvalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXCLUDETARGETVALUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Excludetargetvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<VisualAttribute> getAllExcludetargetvalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXCLUDETARGETVALUE, VisualAttribute.class);
	}

    /**
     * Get all values of property {@code Excludetargetvalue} as a ReactorResult of {@linkplain VisualAttribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<VisualAttribute> getAllExcludetargetvalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXCLUDETARGETVALUE, VisualAttribute.class);
	}

    /**
     * Get all values of property {@code Excludetargetvalue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<VisualAttribute> getAllExcludetargetvalue() {
		return Base.getAll(this.model, this.getResource(), EXCLUDETARGETVALUE, VisualAttribute.class);
	}

    /**
     * Get all values of property {@code Excludetargetvalue} as a ReactorResult of {@linkplain VisualAttribute}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<VisualAttribute> getAllExcludetargetvalue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXCLUDETARGETVALUE, VisualAttribute.class);
	}

 
    /**
     * Adds a value to property {@code Excludetargetvalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addExcludetargetvalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, EXCLUDETARGETVALUE, value);
	}

    /**
     * Adds a value to property {@code Excludetargetvalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addExcludetargetvalue(Node value) {
		Base.add(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
    /**
     * Adds a value to property {@code Excludetargetvalue} from an instance of {@linkplain VisualAttribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addExcludetargetvalue(Model model, Resource instanceResource, VisualAttribute value) {
		Base.add(model, instanceResource, EXCLUDETARGETVALUE, value);
	}

    /**
     * Adds a value to property {@code Excludetargetvalue} from an instance of {@linkplain VisualAttribute}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addExcludetargetvalue(VisualAttribute value) {
		Base.add(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Excludetargetvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setExcludetargetvalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, EXCLUDETARGETVALUE, value);
	}

    /**
     * Sets a value of property {@code Excludetargetvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setExcludetargetvalue(Node value) {
		Base.set(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
    /**
     * Sets a value of property {@code Excludetargetvalue} from an instance of {@linkplain VisualAttribute}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setExcludetargetvalue(Model model, Resource instanceResource, VisualAttribute value) {
		Base.set(model, instanceResource, EXCLUDETARGETVALUE, value);
	}

    /**
     * Sets a value of property {@code Excludetargetvalue} from an instance of {@linkplain VisualAttribute}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setExcludetargetvalue(VisualAttribute value) {
		Base.set(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Excludetargetvalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeExcludetargetvalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, EXCLUDETARGETVALUE, value);
	}

    /**
     * Removes a value of property {@code Excludetargetvalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeExcludetargetvalue(Node value) {
		Base.remove(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
    /**
     * Removes a value of property {@code Excludetargetvalue} given as an instance of {@linkplain VisualAttribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeExcludetargetvalue(Model model, Resource instanceResource, VisualAttribute value) {
		Base.remove(model, instanceResource, EXCLUDETARGETVALUE, value);
	}

    /**
     * Removes a value of property {@code Excludetargetvalue} given as an instance of {@linkplain VisualAttribute}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeExcludetargetvalue(VisualAttribute value) {
		Base.remove(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Excludetargetvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllExcludetargetvalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXCLUDETARGETVALUE);
	}

    /**
     * Removes all values of property {@code Excludetargetvalue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllExcludetargetvalue() {
		Base.removeAll(this.model, this.getResource(), EXCLUDETARGETVALUE);
	}
     /**
     * Check if {@code Invertorderoftargetvalues} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasInvertorderoftargetvalues(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, INVERTORDEROFTARGETVALUES);
	}

    /**
     * Check if {@code Invertorderoftargetvalues} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasInvertorderoftargetvalues() {
		return Base.has(this.model, this.getResource(), INVERTORDEROFTARGETVALUES);
	}

    /**
     * Check if {@code Invertorderoftargetvalues} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasInvertorderoftargetvalues(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}

    /**
     * Check if {@code Invertorderoftargetvalues} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasInvertorderoftargetvalues( Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}

     /**
     * Get all values of property {@code Invertorderoftargetvalues} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllInvertorderoftargetvalues_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERTORDEROFTARGETVALUES);
	}

    /**
     * Get all values of property {@code Invertorderoftargetvalues} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllInvertorderoftargetvalues_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERTORDEROFTARGETVALUES, Node.class);
	}

    /**
     * Get all values of property {@code Invertorderoftargetvalues} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllInvertorderoftargetvalues_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERTORDEROFTARGETVALUES);
	}

    /**
     * Get all values of property {@code Invertorderoftargetvalues} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllInvertorderoftargetvalues_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, Node.class);
	}
 
    /**
     * Get all values of property {@code Invertorderoftargetvalues}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Boolean> getAllInvertorderoftargetvalues(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERTORDEROFTARGETVALUES, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Invertorderoftargetvalues} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Boolean> getAllInvertorderoftargetvalues_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERTORDEROFTARGETVALUES, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Invertorderoftargetvalues}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Boolean> getAllInvertorderoftargetvalues() {
		return Base.getAll(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Invertorderoftargetvalues} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Boolean> getAllInvertorderoftargetvalues_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, java.lang.Boolean.class);
	}

 
    /**
     * Adds a value to property {@code Invertorderoftargetvalues} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addInvertorderoftargetvalues(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}

    /**
     * Adds a value to property {@code Invertorderoftargetvalues} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addInvertorderoftargetvalues(Node value) {
		Base.add(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
    /**
     * Adds a value to property {@code Invertorderoftargetvalues} from an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addInvertorderoftargetvalues(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}

    /**
     * Adds a value to property {@code Invertorderoftargetvalues} from an instance of {@linkplain java.lang.Boolean}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addInvertorderoftargetvalues(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
  

    /**
     * Sets a value of property {@code Invertorderoftargetvalues} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setInvertorderoftargetvalues(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}

    /**
     * Sets a value of property {@code Invertorderoftargetvalues} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setInvertorderoftargetvalues(Node value) {
		Base.set(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
    /**
     * Sets a value of property {@code Invertorderoftargetvalues} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setInvertorderoftargetvalues(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}

    /**
     * Sets a value of property {@code Invertorderoftargetvalues} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setInvertorderoftargetvalues(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
  


    /**
     * Removes a value of property {@code Invertorderoftargetvalues} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeInvertorderoftargetvalues(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}

    /**
     * Removes a value of property {@code Invertorderoftargetvalues} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeInvertorderoftargetvalues(Node value) {
		Base.remove(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
    /**
     * Removes a value of property {@code Invertorderoftargetvalues} given as an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeInvertorderoftargetvalues(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}

    /**
     * Removes a value of property {@code Invertorderoftargetvalues} given as an instance of {@linkplain java.lang.Boolean}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeInvertorderoftargetvalues(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
  
    /**
     * Removes all values of property {@code Invertorderoftargetvalues}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllInvertorderoftargetvalues(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERTORDEROFTARGETVALUES);
	}

    /**
     * Removes all values of property {@code Invertorderoftargetvalues}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllInvertorderoftargetvalues() {
		Base.removeAll(this.model, this.getResource(), INVERTORDEROFTARGETVALUES);
	}
     /**
     * Check if {@code Ordersourcevaluesby} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasOrdersourcevaluesby(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, ORDERSOURCEVALUESBY);
	}

    /**
     * Check if {@code Ordersourcevaluesby} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasOrdersourcevaluesby() {
		return Base.has(this.model, this.getResource(), ORDERSOURCEVALUESBY);
	}

    /**
     * Check if {@code Ordersourcevaluesby} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasOrdersourcevaluesby(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}

    /**
     * Check if {@code Ordersourcevaluesby} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasOrdersourcevaluesby( Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}

     /**
     * Get all values of property {@code Ordersourcevaluesby} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllOrdersourcevaluesby_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORDERSOURCEVALUESBY);
	}

    /**
     * Get all values of property {@code Ordersourcevaluesby} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllOrdersourcevaluesby_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDERSOURCEVALUESBY, Node.class);
	}

    /**
     * Get all values of property {@code Ordersourcevaluesby} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllOrdersourcevaluesby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORDERSOURCEVALUESBY);
	}

    /**
     * Get all values of property {@code Ordersourcevaluesby} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllOrdersourcevaluesby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORDERSOURCEVALUESBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Ordersourcevaluesby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdersourcevaluesby(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORDERSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Ordersourcevaluesby} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdersourcevaluesby_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDERSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Ordersourcevaluesby}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdersourcevaluesby() {
		return Base.getAll(this.model, this.getResource(), ORDERSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Ordersourcevaluesby} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdersourcevaluesby_as() {
		return Base.getAll_as(this.model, this.getResource(), ORDERSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

 
    /**
     * Adds a value to property {@code Ordersourcevaluesby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addOrdersourcevaluesby(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}

    /**
     * Adds a value to property {@code Ordersourcevaluesby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addOrdersourcevaluesby(Node value) {
		Base.add(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
    /**
     * Adds a value to property {@code Ordersourcevaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addOrdersourcevaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}

    /**
     * Adds a value to property {@code Ordersourcevaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addOrdersourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
  

    /**
     * Sets a value of property {@code Ordersourcevaluesby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setOrdersourcevaluesby(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}

    /**
     * Sets a value of property {@code Ordersourcevaluesby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setOrdersourcevaluesby(Node value) {
		Base.set(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
    /**
     * Sets a value of property {@code Ordersourcevaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setOrdersourcevaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}

    /**
     * Sets a value of property {@code Ordersourcevaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setOrdersourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
  


    /**
     * Removes a value of property {@code Ordersourcevaluesby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeOrdersourcevaluesby(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}

    /**
     * Removes a value of property {@code Ordersourcevaluesby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeOrdersourcevaluesby(Node value) {
		Base.remove(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
    /**
     * Removes a value of property {@code Ordersourcevaluesby} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeOrdersourcevaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}

    /**
     * Removes a value of property {@code Ordersourcevaluesby} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeOrdersourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
  
    /**
     * Removes all values of property {@code Ordersourcevaluesby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllOrdersourcevaluesby(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORDERSOURCEVALUESBY);
	}

    /**
     * Removes all values of property {@code Ordersourcevaluesby}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllOrdersourcevaluesby() {
		Base.removeAll(this.model, this.getResource(), ORDERSOURCEVALUESBY);
	}
     /**
     * Check if {@code Ordertargetvaluesby} has at least one value set.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasOrdertargetvaluesby(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, ORDERTARGETVALUESBY);
	}

    /**
     * Check if {@code Ordertargetvaluesby} has at least one value set.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasOrdertargetvaluesby() {
		return Base.has(this.model, this.getResource(), ORDERTARGETVALUESBY);
	}

    /**
     * Check if {@code Ordertargetvaluesby} has the given value (maybe among other values).
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasOrdertargetvaluesby(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, ORDERTARGETVALUESBY, value);
	}

    /**
     * Check if {@code Ordertargetvaluesby} has the given value (maybe among other values).
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasOrdertargetvaluesby( Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}

     /**
     * Get all values of property {@code Ordertargetvaluesby} as an Iterator over RDF2Go nodes.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllOrdertargetvaluesby_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORDERTARGETVALUESBY);
	}

    /**
     * Get all values of property {@code Ordertargetvaluesby} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllOrdertargetvaluesby_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDERTARGETVALUESBY, Node.class);
	}

    /**
     * Get all values of property {@code Ordertargetvaluesby} as an Iterator over RDF2Go nodes
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllOrdertargetvaluesby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORDERTARGETVALUESBY);
	}

    /**
     * Get all values of property {@code Ordertargetvaluesby} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllOrdertargetvaluesby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORDERTARGETVALUESBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Ordertargetvaluesby}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdertargetvaluesby(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORDERTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Ordertargetvaluesby} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdertargetvaluesby_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDERTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Ordertargetvaluesby}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdertargetvaluesby() {
		return Base.getAll(this.model, this.getResource(), ORDERTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Ordertargetvaluesby} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdertargetvaluesby_as() {
		return Base.getAll_as(this.model, this.getResource(), ORDERTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

 
    /**
     * Adds a value to property {@code Ordertargetvaluesby} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addOrdertargetvaluesby(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, ORDERTARGETVALUESBY, value);
	}

    /**
     * Adds a value to property {@code Ordertargetvaluesby} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addOrdertargetvaluesby(Node value) {
		Base.add(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
    /**
     * Adds a value to property {@code Ordertargetvaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addOrdertargetvaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, ORDERTARGETVALUESBY, value);
	}

    /**
     * Adds a value to property {@code Ordertargetvaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addOrdertargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
  

    /**
     * Sets a value of property {@code Ordertargetvaluesby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setOrdertargetvaluesby(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, ORDERTARGETVALUESBY, value);
	}

    /**
     * Sets a value of property {@code Ordertargetvaluesby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setOrdertargetvaluesby(Node value) {
		Base.set(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
    /**
     * Sets a value of property {@code Ordertargetvaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setOrdertargetvaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, ORDERTARGETVALUESBY, value);
	}

    /**
     * Sets a value of property {@code Ordertargetvaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setOrdertargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
  


    /**
     * Removes a value of property {@code Ordertargetvaluesby} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeOrdertargetvaluesby(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, ORDERTARGETVALUESBY, value);
	}

    /**
     * Removes a value of property {@code Ordertargetvaluesby} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeOrdertargetvaluesby(Node value) {
		Base.remove(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
    /**
     * Removes a value of property {@code Ordertargetvaluesby} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeOrdertargetvaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, ORDERTARGETVALUESBY, value);
	}

    /**
     * Removes a value of property {@code Ordertargetvaluesby} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeOrdertargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
  
    /**
     * Removes all values of property {@code Ordertargetvaluesby}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllOrdertargetvaluesby(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORDERTARGETVALUESBY);
	}

    /**
     * Removes all values of property {@code Ordertargetvaluesby}.
     * Comment from schema: Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllOrdertargetvaluesby() {
		Base.removeAll(this.model, this.getResource(), ORDERTARGETVALUESBY);
	}
     /**
     * Check if {@code Quantifysourcevaluesby} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasQuantifysourcevaluesby(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Check if {@code Quantifysourcevaluesby} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasQuantifysourcevaluesby() {
		return Base.has(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Check if {@code Quantifysourcevaluesby} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasQuantifysourcevaluesby(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}

    /**
     * Check if {@code Quantifysourcevaluesby} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasQuantifysourcevaluesby( Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}

     /**
     * Get all values of property {@code Quantifysourcevaluesby} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllQuantifysourcevaluesby_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Get all values of property {@code Quantifysourcevaluesby} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllQuantifysourcevaluesby_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTIFYSOURCEVALUESBY, Node.class);
	}

    /**
     * Get all values of property {@code Quantifysourcevaluesby} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllQuantifysourcevaluesby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Get all values of property {@code Quantifysourcevaluesby} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllQuantifysourcevaluesby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Quantifysourcevaluesby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifysourcevaluesby(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUANTIFYSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Quantifysourcevaluesby} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifysourcevaluesby_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTIFYSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Quantifysourcevaluesby}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifysourcevaluesby() {
		return Base.getAll(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Quantifysourcevaluesby} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifysourcevaluesby_as() {
		return Base.getAll_as(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

 
    /**
     * Adds a value to property {@code Quantifysourcevaluesby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addQuantifysourcevaluesby(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}

    /**
     * Adds a value to property {@code Quantifysourcevaluesby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addQuantifysourcevaluesby(Node value) {
		Base.add(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
    /**
     * Adds a value to property {@code Quantifysourcevaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addQuantifysourcevaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}

    /**
     * Adds a value to property {@code Quantifysourcevaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addQuantifysourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
  

    /**
     * Sets a value of property {@code Quantifysourcevaluesby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setQuantifysourcevaluesby(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}

    /**
     * Sets a value of property {@code Quantifysourcevaluesby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setQuantifysourcevaluesby(Node value) {
		Base.set(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
    /**
     * Sets a value of property {@code Quantifysourcevaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setQuantifysourcevaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}

    /**
     * Sets a value of property {@code Quantifysourcevaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setQuantifysourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
  


    /**
     * Removes a value of property {@code Quantifysourcevaluesby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeQuantifysourcevaluesby(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}

    /**
     * Removes a value of property {@code Quantifysourcevaluesby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeQuantifysourcevaluesby(Node value) {
		Base.remove(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
    /**
     * Removes a value of property {@code Quantifysourcevaluesby} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeQuantifysourcevaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}

    /**
     * Removes a value of property {@code Quantifysourcevaluesby} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeQuantifysourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
  
    /**
     * Removes all values of property {@code Quantifysourcevaluesby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllQuantifysourcevaluesby(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Removes all values of property {@code Quantifysourcevaluesby}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllQuantifysourcevaluesby() {
		Base.removeAll(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY);
	}
     /**
     * Check if {@code Quantifytargetvaluesby} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasQuantifytargetvaluesby(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, QUANTIFYTARGETVALUESBY);
	}

    /**
     * Check if {@code Quantifytargetvaluesby} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasQuantifytargetvaluesby() {
		return Base.has(this.model, this.getResource(), QUANTIFYTARGETVALUESBY);
	}

    /**
     * Check if {@code Quantifytargetvaluesby} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasQuantifytargetvaluesby(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}

    /**
     * Check if {@code Quantifytargetvaluesby} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasQuantifytargetvaluesby( Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}

     /**
     * Get all values of property {@code Quantifytargetvaluesby} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllQuantifytargetvaluesby_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUANTIFYTARGETVALUESBY);
	}

    /**
     * Get all values of property {@code Quantifytargetvaluesby} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllQuantifytargetvaluesby_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTIFYTARGETVALUESBY, Node.class);
	}

    /**
     * Get all values of property {@code Quantifytargetvaluesby} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllQuantifytargetvaluesby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUANTIFYTARGETVALUESBY);
	}

    /**
     * Get all values of property {@code Quantifytargetvaluesby} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllQuantifytargetvaluesby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Quantifytargetvaluesby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifytargetvaluesby(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUANTIFYTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Quantifytargetvaluesby} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifytargetvaluesby_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTIFYTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Quantifytargetvaluesby}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifytargetvaluesby() {
		return Base.getAll(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Quantifytargetvaluesby} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifytargetvaluesby_as() {
		return Base.getAll_as(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

 
    /**
     * Adds a value to property {@code Quantifytargetvaluesby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addQuantifytargetvaluesby(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}

    /**
     * Adds a value to property {@code Quantifytargetvaluesby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addQuantifytargetvaluesby(Node value) {
		Base.add(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
    /**
     * Adds a value to property {@code Quantifytargetvaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addQuantifytargetvaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}

    /**
     * Adds a value to property {@code Quantifytargetvaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addQuantifytargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
  

    /**
     * Sets a value of property {@code Quantifytargetvaluesby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setQuantifytargetvaluesby(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}

    /**
     * Sets a value of property {@code Quantifytargetvaluesby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setQuantifytargetvaluesby(Node value) {
		Base.set(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
    /**
     * Sets a value of property {@code Quantifytargetvaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setQuantifytargetvaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}

    /**
     * Sets a value of property {@code Quantifytargetvaluesby} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setQuantifytargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
  


    /**
     * Removes a value of property {@code Quantifytargetvaluesby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeQuantifytargetvaluesby(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}

    /**
     * Removes a value of property {@code Quantifytargetvaluesby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeQuantifytargetvaluesby(Node value) {
		Base.remove(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
    /**
     * Removes a value of property {@code Quantifytargetvaluesby} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeQuantifytargetvaluesby(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}

    /**
     * Removes a value of property {@code Quantifytargetvaluesby} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeQuantifytargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
  
    /**
     * Removes all values of property {@code Quantifytargetvaluesby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllQuantifytargetvaluesby(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUANTIFYTARGETVALUESBY);
	}

    /**
     * Removes all values of property {@code Quantifytargetvaluesby}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllQuantifytargetvaluesby() {
		Base.removeAll(this.model, this.getResource(), QUANTIFYTARGETVALUESBY);
	}
     /**
     * Check if {@code Scaletransformationtype} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasScaletransformationtype(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SCALETRANSFORMATIONTYPE);
	}

    /**
     * Check if {@code Scaletransformationtype} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasScaletransformationtype() {
		return Base.has(this.model, this.getResource(), SCALETRANSFORMATIONTYPE);
	}

    /**
     * Check if {@code Scaletransformationtype} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasScaletransformationtype(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}

    /**
     * Check if {@code Scaletransformationtype} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasScaletransformationtype( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}

     /**
     * Get all values of property {@code Scaletransformationtype} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllScaletransformationtype_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCALETRANSFORMATIONTYPE);
	}

    /**
     * Get all values of property {@code Scaletransformationtype} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllScaletransformationtype_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCALETRANSFORMATIONTYPE, Node.class);
	}

    /**
     * Get all values of property {@code Scaletransformationtype} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllScaletransformationtype_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCALETRANSFORMATIONTYPE);
	}

    /**
     * Get all values of property {@code Scaletransformationtype} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllScaletransformationtype_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, Node.class);
	}
 
    /**
     * Get all values of property {@code Scaletransformationtype}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Interpolationvalue> getAllScaletransformationtype(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCALETRANSFORMATIONTYPE, Interpolationvalue.class);
	}

    /**
     * Get all values of property {@code Scaletransformationtype} as a ReactorResult of {@linkplain Interpolationvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Interpolationvalue> getAllScaletransformationtype_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCALETRANSFORMATIONTYPE, Interpolationvalue.class);
	}

    /**
     * Get all values of property {@code Scaletransformationtype}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Interpolationvalue> getAllScaletransformationtype() {
		return Base.getAll(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, Interpolationvalue.class);
	}

    /**
     * Get all values of property {@code Scaletransformationtype} as a ReactorResult of {@linkplain Interpolationvalue}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Interpolationvalue> getAllScaletransformationtype_as() {
		return Base.getAll_as(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, Interpolationvalue.class);
	}

 
    /**
     * Adds a value to property {@code Scaletransformationtype} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addScaletransformationtype(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}

    /**
     * Adds a value to property {@code Scaletransformationtype} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addScaletransformationtype(Node value) {
		Base.add(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
    /**
     * Adds a value to property {@code Scaletransformationtype} from an instance of {@linkplain Interpolationvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addScaletransformationtype(Model model, Resource instanceResource, Interpolationvalue value) {
		Base.add(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}

    /**
     * Adds a value to property {@code Scaletransformationtype} from an instance of {@linkplain Interpolationvalue}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addScaletransformationtype(Interpolationvalue value) {
		Base.add(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
  

    /**
     * Sets a value of property {@code Scaletransformationtype} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setScaletransformationtype(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}

    /**
     * Sets a value of property {@code Scaletransformationtype} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setScaletransformationtype(Node value) {
		Base.set(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
    /**
     * Sets a value of property {@code Scaletransformationtype} from an instance of {@linkplain Interpolationvalue}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setScaletransformationtype(Model model, Resource instanceResource, Interpolationvalue value) {
		Base.set(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}

    /**
     * Sets a value of property {@code Scaletransformationtype} from an instance of {@linkplain Interpolationvalue}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setScaletransformationtype(Interpolationvalue value) {
		Base.set(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
  


    /**
     * Removes a value of property {@code Scaletransformationtype} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeScaletransformationtype(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}

    /**
     * Removes a value of property {@code Scaletransformationtype} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeScaletransformationtype(Node value) {
		Base.remove(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
    /**
     * Removes a value of property {@code Scaletransformationtype} given as an instance of {@linkplain Interpolationvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeScaletransformationtype(Model model, Resource instanceResource, Interpolationvalue value) {
		Base.remove(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}

    /**
     * Removes a value of property {@code Scaletransformationtype} given as an instance of {@linkplain Interpolationvalue}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeScaletransformationtype(Interpolationvalue value) {
		Base.remove(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
  
    /**
     * Removes all values of property {@code Scaletransformationtype}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllScaletransformationtype(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCALETRANSFORMATIONTYPE);
	}

    /**
     * Removes all values of property {@code Scaletransformationtype}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllScaletransformationtype() {
		Base.removeAll(this.model, this.getResource(), SCALETRANSFORMATIONTYPE);
	}
     /**
     * Check if {@code Sourcefilter} has at least one value set.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourcefilter(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEFILTER);
	}

    /**
     * Check if {@code Sourcefilter} has at least one value set.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourcefilter() {
		return Base.has(this.model, this.getResource(), SOURCEFILTER);
	}

    /**
     * Check if {@code Sourcefilter} has the given value (maybe among other values).
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourcefilter(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEFILTER, value);
	}

    /**
     * Check if {@code Sourcefilter} has the given value (maybe among other values).
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourcefilter( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEFILTER, value);
	}

     /**
     * Get all values of property {@code Sourcefilter} as an Iterator over RDF2Go nodes.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourcefilter_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEFILTER);
	}

    /**
     * Get all values of property {@code Sourcefilter} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourcefilter_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEFILTER, Node.class);
	}

    /**
     * Get all values of property {@code Sourcefilter} as an Iterator over RDF2Go nodes
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourcefilter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEFILTER);
	}

    /**
     * Get all values of property {@code Sourcefilter} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourcefilter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEFILTER, Node.class);
	}
 
    /**
     * Get all values of property {@code Sourcefilter}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<SPARQLselector> getAllSourcefilter(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Sourcefilter} as a ReactorResult of {@linkplain SPARQLselector}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<SPARQLselector> getAllSourcefilter_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Sourcefilter}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<SPARQLselector> getAllSourcefilter() {
		return Base.getAll(this.model, this.getResource(), SOURCEFILTER, SPARQLselector.class);
	}

    /**
     * Get all values of property {@code Sourcefilter} as a ReactorResult of {@linkplain SPARQLselector}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<SPARQLselector> getAllSourcefilter_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEFILTER, SPARQLselector.class);
	}

 
    /**
     * Adds a value to property {@code Sourcefilter} as an RDF2Go {@linkplain Node}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourcefilter(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEFILTER, value);
	}

    /**
     * Adds a value to property {@code Sourcefilter} as an RDF2Go {@linkplain Node}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourcefilter(Node value) {
		Base.add(this.model, this.getResource(), SOURCEFILTER, value);
	}
    /**
     * Adds a value to property {@code Sourcefilter} from an instance of {@linkplain SPARQLselector}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourcefilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.add(model, instanceResource, SOURCEFILTER, value);
	}

    /**
     * Adds a value to property {@code Sourcefilter} from an instance of {@linkplain SPARQLselector}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourcefilter(SPARQLselector value) {
		Base.add(this.model, this.getResource(), SOURCEFILTER, value);
	}
  

    /**
     * Sets a value of property {@code Sourcefilter} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourcefilter(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEFILTER, value);
	}

    /**
     * Sets a value of property {@code Sourcefilter} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourcefilter(Node value) {
		Base.set(this.model, this.getResource(), SOURCEFILTER, value);
	}
    /**
     * Sets a value of property {@code Sourcefilter} from an instance of {@linkplain SPARQLselector}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourcefilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.set(model, instanceResource, SOURCEFILTER, value);
	}

    /**
     * Sets a value of property {@code Sourcefilter} from an instance of {@linkplain SPARQLselector}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourcefilter(SPARQLselector value) {
		Base.set(this.model, this.getResource(), SOURCEFILTER, value);
	}
  


    /**
     * Removes a value of property {@code Sourcefilter} as an RDF2Go {@linkplain Node}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourcefilter(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEFILTER, value);
	}

    /**
     * Removes a value of property {@code Sourcefilter} as an RDF2Go {@linkplain Node}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourcefilter(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEFILTER, value);
	}
    /**
     * Removes a value of property {@code Sourcefilter} given as an instance of {@linkplain SPARQLselector}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourcefilter(Model model, Resource instanceResource, SPARQLselector value) {
		Base.remove(model, instanceResource, SOURCEFILTER, value);
	}

    /**
     * Removes a value of property {@code Sourcefilter} given as an instance of {@linkplain SPARQLselector}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourcefilter(SPARQLselector value) {
		Base.remove(this.model, this.getResource(), SOURCEFILTER, value);
	}
  
    /**
     * Removes all values of property {@code Sourcefilter}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourcefilter(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEFILTER);
	}

    /**
     * Removes all values of property {@code Sourcefilter}.
     * Comment from schema: <b>Difference to objectFilter:</b> ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourcefilter() {
		Base.removeAll(this.model, this.getResource(), SOURCEFILTER);
	}
     /**
     * Check if {@code Sourceinterval} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourceinterval(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEINTERVAL);
	}

    /**
     * Check if {@code Sourceinterval} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourceinterval() {
		return Base.has(this.model, this.getResource(), SOURCEINTERVAL);
	}

    /**
     * Check if {@code Sourceinterval} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourceinterval(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEINTERVAL, value);
	}

    /**
     * Check if {@code Sourceinterval} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourceinterval( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEINTERVAL, value);
	}

     /**
     * Get all values of property {@code Sourceinterval} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourceinterval_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEINTERVAL);
	}

    /**
     * Get all values of property {@code Sourceinterval} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourceinterval_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEINTERVAL, Node.class);
	}

    /**
     * Get all values of property {@code Sourceinterval} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourceinterval_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEINTERVAL);
	}

    /**
     * Get all values of property {@code Sourceinterval} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourceinterval_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEINTERVAL, Node.class);
	}
 
    /**
     * Get all values of property {@code Sourceinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Sourcevalueinterval> getAllSourceinterval(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEINTERVAL, Sourcevalueinterval.class);
	}

    /**
     * Get all values of property {@code Sourceinterval} as a ReactorResult of {@linkplain Sourcevalueinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Sourcevalueinterval> getAllSourceinterval_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEINTERVAL, Sourcevalueinterval.class);
	}

    /**
     * Get all values of property {@code Sourceinterval}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Sourcevalueinterval> getAllSourceinterval() {
		return Base.getAll(this.model, this.getResource(), SOURCEINTERVAL, Sourcevalueinterval.class);
	}

    /**
     * Get all values of property {@code Sourceinterval} as a ReactorResult of {@linkplain Sourcevalueinterval}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Sourcevalueinterval> getAllSourceinterval_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEINTERVAL, Sourcevalueinterval.class);
	}

 
    /**
     * Adds a value to property {@code Sourceinterval} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourceinterval(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEINTERVAL, value);
	}

    /**
     * Adds a value to property {@code Sourceinterval} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourceinterval(Node value) {
		Base.add(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
    /**
     * Adds a value to property {@code Sourceinterval} from an instance of {@linkplain Sourcevalueinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourceinterval(Model model, Resource instanceResource, Sourcevalueinterval value) {
		Base.add(model, instanceResource, SOURCEINTERVAL, value);
	}

    /**
     * Adds a value to property {@code Sourceinterval} from an instance of {@linkplain Sourcevalueinterval}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourceinterval(Sourcevalueinterval value) {
		Base.add(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
  

    /**
     * Sets a value of property {@code Sourceinterval} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourceinterval(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEINTERVAL, value);
	}

    /**
     * Sets a value of property {@code Sourceinterval} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourceinterval(Node value) {
		Base.set(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
    /**
     * Sets a value of property {@code Sourceinterval} from an instance of {@linkplain Sourcevalueinterval}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourceinterval(Model model, Resource instanceResource, Sourcevalueinterval value) {
		Base.set(model, instanceResource, SOURCEINTERVAL, value);
	}

    /**
     * Sets a value of property {@code Sourceinterval} from an instance of {@linkplain Sourcevalueinterval}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourceinterval(Sourcevalueinterval value) {
		Base.set(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
  


    /**
     * Removes a value of property {@code Sourceinterval} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourceinterval(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEINTERVAL, value);
	}

    /**
     * Removes a value of property {@code Sourceinterval} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourceinterval(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
    /**
     * Removes a value of property {@code Sourceinterval} given as an instance of {@linkplain Sourcevalueinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourceinterval(Model model, Resource instanceResource, Sourcevalueinterval value) {
		Base.remove(model, instanceResource, SOURCEINTERVAL, value);
	}

    /**
     * Removes a value of property {@code Sourceinterval} given as an instance of {@linkplain Sourcevalueinterval}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourceinterval(Sourcevalueinterval value) {
		Base.remove(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
  
    /**
     * Removes all values of property {@code Sourceinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourceinterval(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEINTERVAL);
	}

    /**
     * Removes all values of property {@code Sourceinterval}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourceinterval() {
		Base.removeAll(this.model, this.getResource(), SOURCEINTERVAL);
	}
     /**
     * Check if {@code Sourcevalue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourcevalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUE);
	}

    /**
     * Check if {@code Sourcevalue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourcevalue() {
		return Base.has(this.model, this.getResource(), SOURCEVALUE);
	}

    /**
     * Check if {@code Sourcevalue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourcevalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Check if {@code Sourcevalue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourcevalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUE, value);
	}

     /**
     * Get all values of property {@code Sourcevalue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourcevalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUE);
	}

    /**
     * Get all values of property {@code Sourcevalue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourcevalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Sourcevalue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourcevalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUE);
	}

    /**
     * Get all values of property {@code Sourcevalue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourcevalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Sourcevalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSourcevalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Sourcevalue} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSourcevalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Sourcevalue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSourcevalue() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Sourcevalue} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSourcevalue_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

 
    /**
     * Adds a value to property {@code Sourcevalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourcevalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code Sourcevalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourcevalue(Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Adds a value to property {@code Sourcevalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourcevalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code Sourcevalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), SOURCEVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Sourcevalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourcevalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code Sourcevalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourcevalue(Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Sets a value of property {@code Sourcevalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourcevalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code Sourcevalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), SOURCEVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Sourcevalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourcevalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code Sourcevalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourcevalue(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Removes a value of property {@code Sourcevalue} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourcevalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code Sourcevalue} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Sourcevalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourcevalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUE);
	}

    /**
     * Removes all values of property {@code Sourcevalue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourcevalue() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUE);
	}
     /**
     * Check if {@code Sourcevalueorderedset} has at least one value set.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourcevalueorderedset(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUEORDEREDSET);
	}

    /**
     * Check if {@code Sourcevalueorderedset} has at least one value set.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourcevalueorderedset() {
		return Base.has(this.model, this.getResource(), SOURCEVALUEORDEREDSET);
	}

    /**
     * Check if {@code Sourcevalueorderedset} has the given value (maybe among other values).
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourcevalueorderedset(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Check if {@code Sourcevalueorderedset} has the given value (maybe among other values).
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourcevalueorderedset( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}

     /**
     * Get all values of property {@code Sourcevalueorderedset} as an Iterator over RDF2Go nodes.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourcevalueorderedset_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUEORDEREDSET);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourcevalueorderedset_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUEORDEREDSET, Node.class);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset} as an Iterator over RDF2Go nodes
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourcevalueorderedset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUEORDEREDSET);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourcevalueorderedset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUEORDEREDSET, Node.class);
	}
    /**
     * Get all values of property {@code Sourcevalueorderedset} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Container
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueorderedset_asorg_ontoware_rdfreactor_schema_rdfs_Container(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Container
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueorderedset_asorg_ontoware_rdfreactor_schema_rdfs_Container() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.List
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourcevalueorderedset_asorg_ontoware_rdfreactor_schema_rdfs_List(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.List
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourcevalueorderedset_asorg_ontoware_rdfreactor_schema_rdfs_List() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}

  
    /**
     * Get all values of property {@code Sourcevalueorderedset}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueorderedset(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueorderedset_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueorderedset() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueorderedset} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueorderedset_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

 
    /**
     * Adds a value to property {@code Sourcevalueorderedset} as an RDF2Go {@linkplain Node}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourcevalueorderedset(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Adds a value to property {@code Sourcevalueorderedset} as an RDF2Go {@linkplain Node}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourcevalueorderedset(Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Adds a value to property {@code Sourcevalueorderedset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourcevalueorderedset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.add(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Adds a value to property {@code Sourcevalueorderedset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.add(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Adds a value to property {@code Sourcevalueorderedset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourcevalueorderedset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.add(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Adds a value to property {@code Sourcevalueorderedset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.add(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
  

    /**
     * Sets a value of property {@code Sourcevalueorderedset} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourcevalueorderedset(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Sets a value of property {@code Sourcevalueorderedset} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourcevalueorderedset(Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Sets a value of property {@code Sourcevalueorderedset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourcevalueorderedset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.set(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Sets a value of property {@code Sourcevalueorderedset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.set(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Sets a value of property {@code Sourcevalueorderedset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourcevalueorderedset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Sets a value of property {@code Sourcevalueorderedset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
  


    /**
     * Removes a value of property {@code Sourcevalueorderedset} as an RDF2Go {@linkplain Node}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourcevalueorderedset(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Removes a value of property {@code Sourcevalueorderedset} as an RDF2Go {@linkplain Node}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourcevalueorderedset(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Removes a value of property {@code Sourcevalueorderedset} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourcevalueorderedset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.remove(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Removes a value of property {@code Sourcevalueorderedset} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Removes a value of property {@code Sourcevalueorderedset} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourcevalueorderedset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}

    /**
     * Removes a value of property {@code Sourcevalueorderedset} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
  
    /**
     * Removes all values of property {@code Sourcevalueorderedset}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourcevalueorderedset(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUEORDEREDSET);
	}

    /**
     * Removes all values of property {@code Sourcevalueorderedset}.
     * Comment from schema: We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourcevalueorderedset() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUEORDEREDSET);
	}
     /**
     * Check if {@code Sourcevalueset} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourcevalueset(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUESET);
	}

    /**
     * Check if {@code Sourcevalueset} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourcevalueset() {
		return Base.has(this.model, this.getResource(), SOURCEVALUESET);
	}

    /**
     * Check if {@code Sourcevalueset} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourcevalueset(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Check if {@code Sourcevalueset} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourcevalueset( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUESET, value);
	}

     /**
     * Get all values of property {@code Sourcevalueset} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourcevalueset_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUESET);
	}

    /**
     * Get all values of property {@code Sourcevalueset} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourcevalueset_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, Node.class);
	}

    /**
     * Get all values of property {@code Sourcevalueset} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourcevalueset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUESET);
	}

    /**
     * Get all values of property {@code Sourcevalueset} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourcevalueset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, Node.class);
	}
    /**
     * Get all values of property {@code Sourcevalueset} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Container
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueset_asorg_ontoware_rdfreactor_schema_rdfs_Container(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueset} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Container
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueset_asorg_ontoware_rdfreactor_schema_rdfs_Container() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueset} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.List
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourcevalueset_asorg_ontoware_rdfreactor_schema_rdfs_List(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}

    /**
     * Get all values of property {@code Sourcevalueset} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.List
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourcevalueset_asorg_ontoware_rdfreactor_schema_rdfs_List() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}

  
    /**
     * Get all values of property {@code Sourcevalueset}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueset(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueset} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueset_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueset}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueset() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code Sourcevalueset} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourcevalueset_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

 
    /**
     * Adds a value to property {@code Sourcevalueset} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourcevalueset(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Adds a value to property {@code Sourcevalueset} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourcevalueset(Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Adds a value to property {@code Sourcevalueset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourcevalueset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Adds a value to property {@code Sourcevalueset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourcevalueset(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Adds a value to property {@code Sourcevalueset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourcevalueset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Adds a value to property {@code Sourcevalueset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourcevalueset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  

    /**
     * Sets a value of property {@code Sourcevalueset} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourcevalueset(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Sets a value of property {@code Sourcevalueset} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourcevalueset(Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Sets a value of property {@code Sourcevalueset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourcevalueset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Sets a value of property {@code Sourcevalueset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourcevalueset(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Sets a value of property {@code Sourcevalueset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourcevalueset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Sets a value of property {@code Sourcevalueset} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourcevalueset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  


    /**
     * Removes a value of property {@code Sourcevalueset} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourcevalueset(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Removes a value of property {@code Sourcevalueset} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourcevalueset(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Removes a value of property {@code Sourcevalueset} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourcevalueset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Removes a value of property {@code Sourcevalueset} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourcevalueset(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Removes a value of property {@code Sourcevalueset} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourcevalueset(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Removes a value of property {@code Sourcevalueset} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourcevalueset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  
    /**
     * Removes all values of property {@code Sourcevalueset}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourcevalueset(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUESET);
	}

    /**
     * Removes all values of property {@code Sourcevalueset}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourcevalueset() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUESET);
	}
     /**
     * Check if {@code Sourcevalueslabel} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourcevalueslabel(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUESLABEL);
	}

    /**
     * Check if {@code Sourcevalueslabel} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourcevalueslabel() {
		return Base.has(this.model, this.getResource(), SOURCEVALUESLABEL);
	}

    /**
     * Check if {@code Sourcevalueslabel} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourcevalueslabel(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUESLABEL, value);
	}

    /**
     * Check if {@code Sourcevalueslabel} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourcevalueslabel( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}

     /**
     * Get all values of property {@code Sourcevalueslabel} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourcevalueslabel_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUESLABEL);
	}

    /**
     * Get all values of property {@code Sourcevalueslabel} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourcevalueslabel_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESLABEL, Node.class);
	}

    /**
     * Get all values of property {@code Sourcevalueslabel} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourcevalueslabel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUESLABEL);
	}

    /**
     * Get all values of property {@code Sourcevalueslabel} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourcevalueslabel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESLABEL, Node.class);
	}
 
    /**
     * Get all values of property {@code Sourcevalueslabel}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.String> getAllSourcevalueslabel(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUESLABEL, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Sourcevalueslabel} as a ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.String> getAllSourcevalueslabel_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESLABEL, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Sourcevalueslabel}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.String> getAllSourcevalueslabel() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUESLABEL, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Sourcevalueslabel} as a ReactorResult of {@linkplain java.lang.String}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.String> getAllSourcevalueslabel_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESLABEL, java.lang.String.class);
	}

 
    /**
     * Adds a value to property {@code Sourcevalueslabel} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourcevalueslabel(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEVALUESLABEL, value);
	}

    /**
     * Adds a value to property {@code Sourcevalueslabel} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourcevalueslabel(Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
    /**
     * Adds a value to property {@code Sourcevalueslabel} from an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourcevalueslabel(Model model, Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SOURCEVALUESLABEL, value);
	}

    /**
     * Adds a value to property {@code Sourcevalueslabel} from an instance of {@linkplain java.lang.String}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourcevalueslabel(java.lang.String value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
  

    /**
     * Sets a value of property {@code Sourcevalueslabel} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourcevalueslabel(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEVALUESLABEL, value);
	}

    /**
     * Sets a value of property {@code Sourcevalueslabel} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourcevalueslabel(Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
    /**
     * Sets a value of property {@code Sourcevalueslabel} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourcevalueslabel(Model model, Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SOURCEVALUESLABEL, value);
	}

    /**
     * Sets a value of property {@code Sourcevalueslabel} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourcevalueslabel(java.lang.String value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
  


    /**
     * Removes a value of property {@code Sourcevalueslabel} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourcevalueslabel(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEVALUESLABEL, value);
	}

    /**
     * Removes a value of property {@code Sourcevalueslabel} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourcevalueslabel(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
    /**
     * Removes a value of property {@code Sourcevalueslabel} given as an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourcevalueslabel(Model model, Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SOURCEVALUESLABEL, value);
	}

    /**
     * Removes a value of property {@code Sourcevalueslabel} given as an instance of {@linkplain java.lang.String}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourcevalueslabel(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
  
    /**
     * Removes all values of property {@code Sourcevalueslabel}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourcevalueslabel(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUESLABEL);
	}

    /**
     * Removes all values of property {@code Sourcevalueslabel}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourcevalueslabel() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUESLABEL);
	}
     /**
     * Check if {@code Targetvalue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTargetvalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUE);
	}

    /**
     * Check if {@code Targetvalue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTargetvalue() {
		return Base.has(this.model, this.getResource(), TARGETVALUE);
	}

    /**
     * Check if {@code Targetvalue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTargetvalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Check if {@code Targetvalue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTargetvalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUE, value);
	}

     /**
     * Get all values of property {@code Targetvalue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTargetvalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUE);
	}

    /**
     * Get all values of property {@code Targetvalue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTargetvalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Targetvalue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTargetvalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUE);
	}

    /**
     * Get all values of property {@code Targetvalue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTargetvalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUE, Node.class);
	}
    /**
     * Get all values of property {@code Targetvalue} as ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of java.lang.String
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<java.lang.String> getAllTargetvalue_asjava_lang_String(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Targetvalue} as ReactorResult of {@linkplain java.lang.String}.
     * @return a ClosableIterator of java.lang.String
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<java.lang.String> getAllTargetvalue_asjava_lang_String() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Targetvalue} as ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Resource
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTargetvalue_asorg_ontoware_rdfreactor_schema_rdfs_Resource(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Targetvalue} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Resource
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTargetvalue_asorg_ontoware_rdfreactor_schema_rdfs_Resource() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Targetvalue} as ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of VisualAttribute
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<VisualAttribute> getAllTargetvalue_asVisualAttribute(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUE, VisualAttribute.class);
	}

    /**
     * Get all values of property {@code Targetvalue} as ReactorResult of {@linkplain VisualAttribute}.
     * @return a ClosableIterator of VisualAttribute
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<VisualAttribute> getAllTargetvalue_asVisualAttribute() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUE, VisualAttribute.class);
	}

  
    /**
     * Get all values of property {@code Targetvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.String> getAllTargetvalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Targetvalue} as a ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.String> getAllTargetvalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Targetvalue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.String> getAllTargetvalue() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Targetvalue} as a ReactorResult of {@linkplain java.lang.String}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.String> getAllTargetvalue_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUE, java.lang.String.class);
	}

 
    /**
     * Adds a value to property {@code Targetvalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTargetvalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Adds a value to property {@code Targetvalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTargetvalue(Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Adds a value to property {@code Targetvalue} from an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvalue(Model model, Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Adds a value to property {@code Targetvalue} from an instance of {@linkplain java.lang.String}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvalue(java.lang.String value) {
		Base.add(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Adds a value to property {@code Targetvalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Adds a value to property {@code Targetvalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Adds a value to property {@code Targetvalue} from an instance of {@linkplain VisualAttribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvalue(Model model, Resource instanceResource, VisualAttribute value) {
		Base.add(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Adds a value to property {@code Targetvalue} from an instance of {@linkplain VisualAttribute}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvalue(VisualAttribute value) {
		Base.add(this.model, this.getResource(), TARGETVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Targetvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTargetvalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Sets a value of property {@code Targetvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTargetvalue(Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Sets a value of property {@code Targetvalue} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvalue(Model model, Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Sets a value of property {@code Targetvalue} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvalue(java.lang.String value) {
		Base.set(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Sets a value of property {@code Targetvalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Sets a value of property {@code Targetvalue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Sets a value of property {@code Targetvalue} from an instance of {@linkplain VisualAttribute}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvalue(Model model, Resource instanceResource, VisualAttribute value) {
		Base.set(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Sets a value of property {@code Targetvalue} from an instance of {@linkplain VisualAttribute}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvalue(VisualAttribute value) {
		Base.set(this.model, this.getResource(), TARGETVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Targetvalue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTargetvalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Removes a value of property {@code Targetvalue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTargetvalue(Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Removes a value of property {@code Targetvalue} given as an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvalue(Model model, Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Removes a value of property {@code Targetvalue} given as an instance of {@linkplain java.lang.String}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvalue(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Removes a value of property {@code Targetvalue} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvalue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Removes a value of property {@code Targetvalue} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Removes a value of property {@code Targetvalue} given as an instance of {@linkplain VisualAttribute}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvalue(Model model, Resource instanceResource, VisualAttribute value) {
		Base.remove(model, instanceResource, TARGETVALUE, value);
	}

    /**
     * Removes a value of property {@code Targetvalue} given as an instance of {@linkplain VisualAttribute}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvalue(VisualAttribute value) {
		Base.remove(this.model, this.getResource(), TARGETVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Targetvalue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTargetvalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUE);
	}

    /**
     * Removes all values of property {@code Targetvalue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTargetvalue() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUE);
	}
     /**
     * Check if {@code Targetvaluecycle} has at least one value set.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTargetvaluecycle(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUECYCLE);
	}

    /**
     * Check if {@code Targetvaluecycle} has at least one value set.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTargetvaluecycle() {
		return Base.has(this.model, this.getResource(), TARGETVALUECYCLE);
	}

    /**
     * Check if {@code Targetvaluecycle} has the given value (maybe among other values).
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTargetvaluecycle(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUECYCLE, value);
	}

    /**
     * Check if {@code Targetvaluecycle} has the given value (maybe among other values).
     * Comment from schema: Use with care - c.f. targetValueList.
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTargetvaluecycle( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}

     /**
     * Get all values of property {@code Targetvaluecycle} as an Iterator over RDF2Go nodes.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTargetvaluecycle_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUECYCLE);
	}

    /**
     * Get all values of property {@code Targetvaluecycle} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTargetvaluecycle_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUECYCLE, Node.class);
	}

    /**
     * Get all values of property {@code Targetvaluecycle} as an Iterator over RDF2Go nodes
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTargetvaluecycle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUECYCLE);
	}

    /**
     * Get all values of property {@code Targetvaluecycle} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTargetvaluecycle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUECYCLE, Node.class);
	}
 
    /**
     * Get all values of property {@code Targetvaluecycle}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<VisualValueList> getAllTargetvaluecycle(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUECYCLE, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvaluecycle} as a ReactorResult of {@linkplain VisualValueList}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<VisualValueList> getAllTargetvaluecycle_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUECYCLE, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvaluecycle}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<VisualValueList> getAllTargetvaluecycle() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUECYCLE, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvaluecycle} as a ReactorResult of {@linkplain VisualValueList}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<VisualValueList> getAllTargetvaluecycle_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUECYCLE, VisualValueList.class);
	}

 
    /**
     * Adds a value to property {@code Targetvaluecycle} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTargetvaluecycle(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TARGETVALUECYCLE, value);
	}

    /**
     * Adds a value to property {@code Targetvaluecycle} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTargetvaluecycle(Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
    /**
     * Adds a value to property {@code Targetvaluecycle} from an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvaluecycle(Model model, Resource instanceResource, VisualValueList value) {
		Base.add(model, instanceResource, TARGETVALUECYCLE, value);
	}

    /**
     * Adds a value to property {@code Targetvaluecycle} from an instance of {@linkplain VisualValueList}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvaluecycle(VisualValueList value) {
		Base.add(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
  

    /**
     * Sets a value of property {@code Targetvaluecycle} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTargetvaluecycle(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TARGETVALUECYCLE, value);
	}

    /**
     * Sets a value of property {@code Targetvaluecycle} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTargetvaluecycle(Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
    /**
     * Sets a value of property {@code Targetvaluecycle} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvaluecycle(Model model, Resource instanceResource, VisualValueList value) {
		Base.set(model, instanceResource, TARGETVALUECYCLE, value);
	}

    /**
     * Sets a value of property {@code Targetvaluecycle} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvaluecycle(VisualValueList value) {
		Base.set(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
  


    /**
     * Removes a value of property {@code Targetvaluecycle} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTargetvaluecycle(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TARGETVALUECYCLE, value);
	}

    /**
     * Removes a value of property {@code Targetvaluecycle} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTargetvaluecycle(Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
    /**
     * Removes a value of property {@code Targetvaluecycle} given as an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvaluecycle(Model model, Resource instanceResource, VisualValueList value) {
		Base.remove(model, instanceResource, TARGETVALUECYCLE, value);
	}

    /**
     * Removes a value of property {@code Targetvaluecycle} given as an instance of {@linkplain VisualValueList}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvaluecycle(VisualValueList value) {
		Base.remove(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
  
    /**
     * Removes all values of property {@code Targetvaluecycle}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTargetvaluecycle(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUECYCLE);
	}

    /**
     * Removes all values of property {@code Targetvaluecycle}.
     * Comment from schema: Use with care - c.f. targetValueList.
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTargetvaluecycle() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUECYCLE);
	}
     /**
     * Check if {@code Targetvalueinterval} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTargetvalueinterval(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUEINTERVAL);
	}

    /**
     * Check if {@code Targetvalueinterval} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTargetvalueinterval() {
		return Base.has(this.model, this.getResource(), TARGETVALUEINTERVAL);
	}

    /**
     * Check if {@code Targetvalueinterval} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTargetvalueinterval(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUEINTERVAL, value);
	}

    /**
     * Check if {@code Targetvalueinterval} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTargetvalueinterval( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}

     /**
     * Get all values of property {@code Targetvalueinterval} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTargetvalueinterval_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUEINTERVAL);
	}

    /**
     * Get all values of property {@code Targetvalueinterval} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTargetvalueinterval_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUEINTERVAL, Node.class);
	}

    /**
     * Get all values of property {@code Targetvalueinterval} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTargetvalueinterval_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUEINTERVAL);
	}

    /**
     * Get all values of property {@code Targetvalueinterval} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTargetvalueinterval_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUEINTERVAL, Node.class);
	}
 
    /**
     * Get all values of property {@code Targetvalueinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Graphicattributeinterval> getAllTargetvalueinterval(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUEINTERVAL, Graphicattributeinterval.class);
	}

    /**
     * Get all values of property {@code Targetvalueinterval} as a ReactorResult of {@linkplain Graphicattributeinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Graphicattributeinterval> getAllTargetvalueinterval_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUEINTERVAL, Graphicattributeinterval.class);
	}

    /**
     * Get all values of property {@code Targetvalueinterval}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Graphicattributeinterval> getAllTargetvalueinterval() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUEINTERVAL, Graphicattributeinterval.class);
	}

    /**
     * Get all values of property {@code Targetvalueinterval} as a ReactorResult of {@linkplain Graphicattributeinterval}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Graphicattributeinterval> getAllTargetvalueinterval_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUEINTERVAL, Graphicattributeinterval.class);
	}

 
    /**
     * Adds a value to property {@code Targetvalueinterval} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTargetvalueinterval(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TARGETVALUEINTERVAL, value);
	}

    /**
     * Adds a value to property {@code Targetvalueinterval} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTargetvalueinterval(Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
    /**
     * Adds a value to property {@code Targetvalueinterval} from an instance of {@linkplain Graphicattributeinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvalueinterval(Model model, Resource instanceResource, Graphicattributeinterval value) {
		Base.add(model, instanceResource, TARGETVALUEINTERVAL, value);
	}

    /**
     * Adds a value to property {@code Targetvalueinterval} from an instance of {@linkplain Graphicattributeinterval}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvalueinterval(Graphicattributeinterval value) {
		Base.add(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
  

    /**
     * Sets a value of property {@code Targetvalueinterval} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTargetvalueinterval(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TARGETVALUEINTERVAL, value);
	}

    /**
     * Sets a value of property {@code Targetvalueinterval} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTargetvalueinterval(Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
    /**
     * Sets a value of property {@code Targetvalueinterval} from an instance of {@linkplain Graphicattributeinterval}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvalueinterval(Model model, Resource instanceResource, Graphicattributeinterval value) {
		Base.set(model, instanceResource, TARGETVALUEINTERVAL, value);
	}

    /**
     * Sets a value of property {@code Targetvalueinterval} from an instance of {@linkplain Graphicattributeinterval}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvalueinterval(Graphicattributeinterval value) {
		Base.set(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
  


    /**
     * Removes a value of property {@code Targetvalueinterval} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTargetvalueinterval(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TARGETVALUEINTERVAL, value);
	}

    /**
     * Removes a value of property {@code Targetvalueinterval} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTargetvalueinterval(Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
    /**
     * Removes a value of property {@code Targetvalueinterval} given as an instance of {@linkplain Graphicattributeinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvalueinterval(Model model, Resource instanceResource, Graphicattributeinterval value) {
		Base.remove(model, instanceResource, TARGETVALUEINTERVAL, value);
	}

    /**
     * Removes a value of property {@code Targetvalueinterval} given as an instance of {@linkplain Graphicattributeinterval}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvalueinterval(Graphicattributeinterval value) {
		Base.remove(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
  
    /**
     * Removes all values of property {@code Targetvalueinterval}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTargetvalueinterval(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUEINTERVAL);
	}

    /**
     * Removes all values of property {@code Targetvalueinterval}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTargetvalueinterval() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUEINTERVAL);
	}
     /**
     * Check if {@code Targetvaluelist} has at least one value set.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTargetvaluelist(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUELIST);
	}

    /**
     * Check if {@code Targetvaluelist} has at least one value set.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTargetvaluelist() {
		return Base.has(this.model, this.getResource(), TARGETVALUELIST);
	}

    /**
     * Check if {@code Targetvaluelist} has the given value (maybe among other values).
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTargetvaluelist(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUELIST, value);
	}

    /**
     * Check if {@code Targetvaluelist} has the given value (maybe among other values).
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTargetvaluelist( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUELIST, value);
	}

     /**
     * Get all values of property {@code Targetvaluelist} as an Iterator over RDF2Go nodes.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTargetvaluelist_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUELIST);
	}

    /**
     * Get all values of property {@code Targetvaluelist} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTargetvaluelist_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUELIST, Node.class);
	}

    /**
     * Get all values of property {@code Targetvaluelist} as an Iterator over RDF2Go nodes
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTargetvaluelist_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUELIST);
	}

    /**
     * Get all values of property {@code Targetvaluelist} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTargetvaluelist_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUELIST, Node.class);
	}
 
    /**
     * Get all values of property {@code Targetvaluelist}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<VisualValueList> getAllTargetvaluelist(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUELIST, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvaluelist} as a ReactorResult of {@linkplain VisualValueList}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<VisualValueList> getAllTargetvaluelist_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUELIST, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvaluelist}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<VisualValueList> getAllTargetvaluelist() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUELIST, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvaluelist} as a ReactorResult of {@linkplain VisualValueList}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<VisualValueList> getAllTargetvaluelist_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUELIST, VisualValueList.class);
	}

 
    /**
     * Adds a value to property {@code Targetvaluelist} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTargetvaluelist(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TARGETVALUELIST, value);
	}

    /**
     * Adds a value to property {@code Targetvaluelist} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTargetvaluelist(Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUELIST, value);
	}
    /**
     * Adds a value to property {@code Targetvaluelist} from an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvaluelist(Model model, Resource instanceResource, VisualValueList value) {
		Base.add(model, instanceResource, TARGETVALUELIST, value);
	}

    /**
     * Adds a value to property {@code Targetvaluelist} from an instance of {@linkplain VisualValueList}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvaluelist(VisualValueList value) {
		Base.add(this.model, this.getResource(), TARGETVALUELIST, value);
	}
  

    /**
     * Sets a value of property {@code Targetvaluelist} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTargetvaluelist(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TARGETVALUELIST, value);
	}

    /**
     * Sets a value of property {@code Targetvaluelist} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTargetvaluelist(Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUELIST, value);
	}
    /**
     * Sets a value of property {@code Targetvaluelist} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvaluelist(Model model, Resource instanceResource, VisualValueList value) {
		Base.set(model, instanceResource, TARGETVALUELIST, value);
	}

    /**
     * Sets a value of property {@code Targetvaluelist} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvaluelist(VisualValueList value) {
		Base.set(this.model, this.getResource(), TARGETVALUELIST, value);
	}
  


    /**
     * Removes a value of property {@code Targetvaluelist} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTargetvaluelist(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TARGETVALUELIST, value);
	}

    /**
     * Removes a value of property {@code Targetvaluelist} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTargetvaluelist(Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUELIST, value);
	}
    /**
     * Removes a value of property {@code Targetvaluelist} given as an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvaluelist(Model model, Resource instanceResource, VisualValueList value) {
		Base.remove(model, instanceResource, TARGETVALUELIST, value);
	}

    /**
     * Removes a value of property {@code Targetvaluelist} given as an instance of {@linkplain VisualValueList}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvaluelist(VisualValueList value) {
		Base.remove(this.model, this.getResource(), TARGETVALUELIST, value);
	}
  
    /**
     * Removes all values of property {@code Targetvaluelist}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTargetvaluelist(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUELIST);
	}

    /**
     * Removes all values of property {@code Targetvaluelist}.
     * Comment from schema: Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTargetvaluelist() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUELIST);
	}
     /**
     * Check if {@code Targetvalueorderedset} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTargetvalueorderedset(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUEORDEREDSET);
	}

    /**
     * Check if {@code Targetvalueorderedset} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTargetvalueorderedset() {
		return Base.has(this.model, this.getResource(), TARGETVALUEORDEREDSET);
	}

    /**
     * Check if {@code Targetvalueorderedset} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTargetvalueorderedset(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}

    /**
     * Check if {@code Targetvalueorderedset} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTargetvalueorderedset( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}

     /**
     * Get all values of property {@code Targetvalueorderedset} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTargetvalueorderedset_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUEORDEREDSET);
	}

    /**
     * Get all values of property {@code Targetvalueorderedset} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTargetvalueorderedset_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUEORDEREDSET, Node.class);
	}

    /**
     * Get all values of property {@code Targetvalueorderedset} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTargetvalueorderedset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUEORDEREDSET);
	}

    /**
     * Get all values of property {@code Targetvalueorderedset} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTargetvalueorderedset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUEORDEREDSET, Node.class);
	}
 
    /**
     * Get all values of property {@code Targetvalueorderedset}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<VisualValueList> getAllTargetvalueorderedset(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUEORDEREDSET, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalueorderedset} as a ReactorResult of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<VisualValueList> getAllTargetvalueorderedset_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUEORDEREDSET, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalueorderedset}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<VisualValueList> getAllTargetvalueorderedset() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUEORDEREDSET, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalueorderedset} as a ReactorResult of {@linkplain VisualValueList}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<VisualValueList> getAllTargetvalueorderedset_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUEORDEREDSET, VisualValueList.class);
	}

 
    /**
     * Adds a value to property {@code Targetvalueorderedset} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTargetvalueorderedset(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}

    /**
     * Adds a value to property {@code Targetvalueorderedset} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTargetvalueorderedset(Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
    /**
     * Adds a value to property {@code Targetvalueorderedset} from an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvalueorderedset(Model model, Resource instanceResource, VisualValueList value) {
		Base.add(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}

    /**
     * Adds a value to property {@code Targetvalueorderedset} from an instance of {@linkplain VisualValueList}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvalueorderedset(VisualValueList value) {
		Base.add(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
  

    /**
     * Sets a value of property {@code Targetvalueorderedset} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTargetvalueorderedset(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}

    /**
     * Sets a value of property {@code Targetvalueorderedset} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTargetvalueorderedset(Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
    /**
     * Sets a value of property {@code Targetvalueorderedset} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvalueorderedset(Model model, Resource instanceResource, VisualValueList value) {
		Base.set(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}

    /**
     * Sets a value of property {@code Targetvalueorderedset} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvalueorderedset(VisualValueList value) {
		Base.set(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
  


    /**
     * Removes a value of property {@code Targetvalueorderedset} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTargetvalueorderedset(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}

    /**
     * Removes a value of property {@code Targetvalueorderedset} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTargetvalueorderedset(Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
    /**
     * Removes a value of property {@code Targetvalueorderedset} given as an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvalueorderedset(Model model, Resource instanceResource, VisualValueList value) {
		Base.remove(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}

    /**
     * Removes a value of property {@code Targetvalueorderedset} given as an instance of {@linkplain VisualValueList}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvalueorderedset(VisualValueList value) {
		Base.remove(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
  
    /**
     * Removes all values of property {@code Targetvalueorderedset}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTargetvalueorderedset(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUEORDEREDSET);
	}

    /**
     * Removes all values of property {@code Targetvalueorderedset}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTargetvalueorderedset() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUEORDEREDSET);
	}
     /**
     * Check if {@code Targetvalues_abstract_} has at least one value set.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTargetvalues_abstract_(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUES_ABSTRACT_);
	}

    /**
     * Check if {@code Targetvalues_abstract_} has at least one value set.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTargetvalues_abstract_() {
		return Base.has(this.model, this.getResource(), TARGETVALUES_ABSTRACT_);
	}

    /**
     * Check if {@code Targetvalues_abstract_} has the given value (maybe among other values).
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTargetvalues_abstract_(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}

    /**
     * Check if {@code Targetvalues_abstract_} has the given value (maybe among other values).
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTargetvalues_abstract_( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}

     /**
     * Get all values of property {@code Targetvalues_abstract_} as an Iterator over RDF2Go nodes.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTargetvalues_abstract__asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUES_ABSTRACT_);
	}

    /**
     * Get all values of property {@code Targetvalues_abstract_} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTargetvalues_abstract__asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUES_ABSTRACT_, Node.class);
	}

    /**
     * Get all values of property {@code Targetvalues_abstract_} as an Iterator over RDF2Go nodes
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTargetvalues_abstract__asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUES_ABSTRACT_);
	}

    /**
     * Get all values of property {@code Targetvalues_abstract_} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTargetvalues_abstract__asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, Node.class);
	}
 
    /**
     * Get all values of property {@code Targetvalues_abstract_}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<VisualValueList> getAllTargetvalues_abstract_(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUES_ABSTRACT_, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalues_abstract_} as a ReactorResult of {@linkplain VisualValueList}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<VisualValueList> getAllTargetvalues_abstract__as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUES_ABSTRACT_, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalues_abstract_}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<VisualValueList> getAllTargetvalues_abstract_() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalues_abstract_} as a ReactorResult of {@linkplain VisualValueList}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<VisualValueList> getAllTargetvalues_abstract__as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, VisualValueList.class);
	}

 
    /**
     * Adds a value to property {@code Targetvalues_abstract_} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTargetvalues_abstract_(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}

    /**
     * Adds a value to property {@code Targetvalues_abstract_} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTargetvalues_abstract_(Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
    /**
     * Adds a value to property {@code Targetvalues_abstract_} from an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvalues_abstract_(Model model, Resource instanceResource, VisualValueList value) {
		Base.add(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}

    /**
     * Adds a value to property {@code Targetvalues_abstract_} from an instance of {@linkplain VisualValueList}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvalues_abstract_(VisualValueList value) {
		Base.add(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
  

    /**
     * Sets a value of property {@code Targetvalues_abstract_} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTargetvalues_abstract_(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}

    /**
     * Sets a value of property {@code Targetvalues_abstract_} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTargetvalues_abstract_(Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
    /**
     * Sets a value of property {@code Targetvalues_abstract_} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvalues_abstract_(Model model, Resource instanceResource, VisualValueList value) {
		Base.set(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}

    /**
     * Sets a value of property {@code Targetvalues_abstract_} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvalues_abstract_(VisualValueList value) {
		Base.set(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
  


    /**
     * Removes a value of property {@code Targetvalues_abstract_} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTargetvalues_abstract_(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}

    /**
     * Removes a value of property {@code Targetvalues_abstract_} as an RDF2Go {@linkplain Node}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTargetvalues_abstract_(Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
    /**
     * Removes a value of property {@code Targetvalues_abstract_} given as an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvalues_abstract_(Model model, Resource instanceResource, VisualValueList value) {
		Base.remove(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}

    /**
     * Removes a value of property {@code Targetvalues_abstract_} given as an instance of {@linkplain VisualValueList}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvalues_abstract_(VisualValueList value) {
		Base.remove(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
  
    /**
     * Removes all values of property {@code Targetvalues_abstract_}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTargetvalues_abstract_(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUES_ABSTRACT_);
	}

    /**
     * Removes all values of property {@code Targetvalues_abstract_}.
     * Comment from schema: Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.


     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTargetvalues_abstract_() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUES_ABSTRACT_);
	}
     /**
     * Check if {@code Targetvalueset} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTargetvalueset(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUESET);
	}

    /**
     * Check if {@code Targetvalueset} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTargetvalueset() {
		return Base.has(this.model, this.getResource(), TARGETVALUESET);
	}

    /**
     * Check if {@code Targetvalueset} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTargetvalueset(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUESET, value);
	}

    /**
     * Check if {@code Targetvalueset} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTargetvalueset( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUESET, value);
	}

     /**
     * Get all values of property {@code Targetvalueset} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTargetvalueset_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUESET);
	}

    /**
     * Get all values of property {@code Targetvalueset} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTargetvalueset_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUESET, Node.class);
	}

    /**
     * Get all values of property {@code Targetvalueset} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTargetvalueset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUESET);
	}

    /**
     * Get all values of property {@code Targetvalueset} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTargetvalueset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUESET, Node.class);
	}
 
    /**
     * Get all values of property {@code Targetvalueset}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<VisualValueList> getAllTargetvalueset(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUESET, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalueset} as a ReactorResult of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<VisualValueList> getAllTargetvalueset_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUESET, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalueset}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<VisualValueList> getAllTargetvalueset() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUESET, VisualValueList.class);
	}

    /**
     * Get all values of property {@code Targetvalueset} as a ReactorResult of {@linkplain VisualValueList}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<VisualValueList> getAllTargetvalueset_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUESET, VisualValueList.class);
	}

 
    /**
     * Adds a value to property {@code Targetvalueset} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTargetvalueset(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TARGETVALUESET, value);
	}

    /**
     * Adds a value to property {@code Targetvalueset} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTargetvalueset(Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUESET, value);
	}
    /**
     * Adds a value to property {@code Targetvalueset} from an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTargetvalueset(Model model, Resource instanceResource, VisualValueList value) {
		Base.add(model, instanceResource, TARGETVALUESET, value);
	}

    /**
     * Adds a value to property {@code Targetvalueset} from an instance of {@linkplain VisualValueList}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTargetvalueset(VisualValueList value) {
		Base.add(this.model, this.getResource(), TARGETVALUESET, value);
	}
  

    /**
     * Sets a value of property {@code Targetvalueset} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTargetvalueset(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TARGETVALUESET, value);
	}

    /**
     * Sets a value of property {@code Targetvalueset} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTargetvalueset(Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUESET, value);
	}
    /**
     * Sets a value of property {@code Targetvalueset} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTargetvalueset(Model model, Resource instanceResource, VisualValueList value) {
		Base.set(model, instanceResource, TARGETVALUESET, value);
	}

    /**
     * Sets a value of property {@code Targetvalueset} from an instance of {@linkplain VisualValueList}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTargetvalueset(VisualValueList value) {
		Base.set(this.model, this.getResource(), TARGETVALUESET, value);
	}
  


    /**
     * Removes a value of property {@code Targetvalueset} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTargetvalueset(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TARGETVALUESET, value);
	}

    /**
     * Removes a value of property {@code Targetvalueset} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTargetvalueset(Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUESET, value);
	}
    /**
     * Removes a value of property {@code Targetvalueset} given as an instance of {@linkplain VisualValueList}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTargetvalueset(Model model, Resource instanceResource, VisualValueList value) {
		Base.remove(model, instanceResource, TARGETVALUESET, value);
	}

    /**
     * Removes a value of property {@code Targetvalueset} given as an instance of {@linkplain VisualValueList}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTargetvalueset(VisualValueList value) {
		Base.remove(this.model, this.getResource(), TARGETVALUESET, value);
	}
  
    /**
     * Removes all values of property {@code Targetvalueset}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTargetvalueset(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUESET);
	}

    /**
     * Removes all values of property {@code Targetvalueset}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTargetvalueset() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUESET);
	}
 }