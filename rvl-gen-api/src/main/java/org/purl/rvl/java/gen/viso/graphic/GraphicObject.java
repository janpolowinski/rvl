/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) on 17.08.15 19:14
 */
package org.purl.rvl.java.gen.viso.graphic;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li>Area</li>
 *   <li>Colorbrightnessnamed</li>
 *   <li>Colornamed</li>
 *   <li>Colorrgb</li>
 *   <li>Colorsaturationnamed</li>
 *   <li>Contains</li>
 *   <li>Represents</li>
 *   <li>Shapenamed</li>
 *   <li>Sizenamed</li>
 *   <li>Textvalue</li>
 *   <li>Width</li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 17.08.15 19:14
 */
public class GraphicObject extends A_1 {

    private static final long serialVersionUID = -8545433688231471844L;

    /** http://purl.org/viso/graphic/Graphic_Object */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/viso/graphic/Graphic_Object", false);

    /** http://purl.org/viso/graphic/area */
	public static final URI AREA = new URIImpl("http://purl.org/viso/graphic/area", false);

    /** http://purl.org/viso/graphic/color_brightness_named */
	public static final URI COLORBRIGHTNESSNAMED = new URIImpl("http://purl.org/viso/graphic/color_brightness_named", false);

    /** http://purl.org/viso/graphic/color_named */
	public static final URI COLORNAMED = new URIImpl("http://purl.org/viso/graphic/color_named", false);

    /** http://purl.org/viso/graphic/color_rgb */
	public static final URI COLORRGB = new URIImpl("http://purl.org/viso/graphic/color_rgb", false);

    /** http://purl.org/viso/graphic/color_saturation_named */
	public static final URI COLORSATURATIONNAMED = new URIImpl("http://purl.org/viso/graphic/color_saturation_named", false);

    /** http://purl.org/viso/graphic/contains */
	public static final URI CONTAINS = new URIImpl("http://purl.org/viso/graphic/contains", false);

    /** http://purl.org/viso/graphic/represents */
	public static final URI REPRESENTS = new URIImpl("http://purl.org/viso/graphic/represents", false);

    /** http://purl.org/viso/graphic/shape_named */
	public static final URI SHAPENAMED = new URIImpl("http://purl.org/viso/graphic/shape_named", false);

    /** http://purl.org/viso/graphic/size_named */
	public static final URI SIZENAMED = new URIImpl("http://purl.org/viso/graphic/size_named", false);

    /** http://purl.org/viso/graphic/text_value */
	public static final URI TEXTVALUE = new URIImpl("http://purl.org/viso/graphic/text_value", false);

    /** http://purl.org/viso/graphic/width */
	public static final URI WIDTH = new URIImpl("http://purl.org/viso/graphic/width", false);

    /**
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/viso/graphic/area", false),
      new URIImpl("http://purl.org/viso/graphic/color_brightness_named", false),
      new URIImpl("http://purl.org/viso/graphic/color_named", false),
      new URIImpl("http://purl.org/viso/graphic/color_rgb", false),
      new URIImpl("http://purl.org/viso/graphic/color_saturation_named", false),
      new URIImpl("http://purl.org/viso/graphic/contains", false),
      new URIImpl("http://purl.org/viso/graphic/represents", false),
      new URIImpl("http://purl.org/viso/graphic/shape_named", false),
      new URIImpl("http://purl.org/viso/graphic/size_named", false),
      new URIImpl("http://purl.org/viso/graphic/text_value", false),
      new URIImpl("http://purl.org/viso/graphic/width", false)
    };


	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected GraphicObject (Model model, URI classURI, Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2]
	 */
	public GraphicObject (Model model, Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7]
	 */
	public GraphicObject (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8]
	 */
	public GraphicObject (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9]
	 */
	public GraphicObject (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of GraphicObject or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0]
	 */
	public static GraphicObject getInstance(Model model, Resource instanceResource) {
		return Base.getInstance(model, instanceResource, GraphicObject.class);
	}

	/**
	 * Create a new instance of this class in the model.
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/viso/graphic/Graphic_Object).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1]
	 */
	public static void createInstance(Model model, Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2]
	 */
	public static boolean hasInstance(Model model, Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3]
	 */
	public static ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as]
	 */
	public static ReactorResult<? extends GraphicObject> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, GraphicObject.class );
	}

    /**
	 * Remove triple {@code (this, rdf:type, GraphicObject)} from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4]
	 */
	public static void deleteInstance(Model model, Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class5]
	 */
	public static void deleteAllProperties(Model model,	Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Linkingconnector' to this GraphicObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllLinkingconnector_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, DirectedLinking.LINKINGCONNECTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Linkingconnector' to this GraphicObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllLinkingconnector_Inverse() {
		return Base.getAll_Inverse(this.model, DirectedLinking.LINKINGCONNECTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Linkingconnector' to this GraphicObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllLinkingconnector_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, DirectedLinking.LINKINGCONNECTOR, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Contains' to this GraphicObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllContains_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, GraphicObject.CONTAINS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Contains' to this GraphicObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllContains_Inverse() {
		return Base.getAll_Inverse(this.model, GraphicObject.CONTAINS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Contains' to this GraphicObject instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllContains_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, GraphicObject.CONTAINS, objectValue, Resource.class);
	}



    /**
     * Check if {@code Area} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasArea(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, AREA);
	}

    /**
     * Check if {@code Area} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasArea() {
		return Base.has(this.model, this.getResource(), AREA);
	}

    /**
     * Check if {@code Area} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasArea(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, AREA, value);
	}

    /**
     * Check if {@code Area} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasArea( Node value ) {
		return Base.hasValue(this.model, this.getResource(), AREA, value);
	}

     /**
     * Get all values of property {@code Area} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllArea_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AREA);
	}

    /**
     * Get all values of property {@code Area} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllArea_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AREA, Node.class);
	}

    /**
     * Get all values of property {@code Area} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllArea_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AREA);
	}

    /**
     * Get all values of property {@code Area} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllArea_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AREA, Node.class);
	}
 
    /**
     * Get all values of property {@code Area}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllArea(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, AREA, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Area} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllArea_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AREA, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Area}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllArea() {
		return Base.getAll(this.model, this.getResource(), AREA, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Area} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllArea_as() {
		return Base.getAll_as(this.model, this.getResource(), AREA, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code Area} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addArea(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, AREA, value);
	}

    /**
     * Adds a value to property {@code Area} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addArea(Node value) {
		Base.add(this.model, this.getResource(), AREA, value);
	}
    /**
     * Adds a value to property {@code Area} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addArea(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, AREA, value);
	}

    /**
     * Adds a value to property {@code Area} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addArea(java.lang.Float value) {
		Base.add(this.model, this.getResource(), AREA, value);
	}
  

    /**
     * Sets a value of property {@code Area} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setArea(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, AREA, value);
	}

    /**
     * Sets a value of property {@code Area} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setArea(Node value) {
		Base.set(this.model, this.getResource(), AREA, value);
	}
    /**
     * Sets a value of property {@code Area} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setArea(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, AREA, value);
	}

    /**
     * Sets a value of property {@code Area} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setArea(java.lang.Float value) {
		Base.set(this.model, this.getResource(), AREA, value);
	}
  


    /**
     * Removes a value of property {@code Area} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeArea(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, AREA, value);
	}

    /**
     * Removes a value of property {@code Area} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeArea(Node value) {
		Base.remove(this.model, this.getResource(), AREA, value);
	}
    /**
     * Removes a value of property {@code Area} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeArea(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, AREA, value);
	}

    /**
     * Removes a value of property {@code Area} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeArea(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), AREA, value);
	}
  
    /**
     * Removes all values of property {@code Area}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllArea(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, AREA);
	}

    /**
     * Removes all values of property {@code Area}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllArea() {
		Base.removeAll(this.model, this.getResource(), AREA);
	}
     /**
     * Check if {@code Colorbrightnessnamed} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasColorbrightnessnamed(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, COLORBRIGHTNESSNAMED);
	}

    /**
     * Check if {@code Colorbrightnessnamed} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasColorbrightnessnamed() {
		return Base.has(this.model, this.getResource(), COLORBRIGHTNESSNAMED);
	}

    /**
     * Check if {@code Colorbrightnessnamed} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasColorbrightnessnamed(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, COLORBRIGHTNESSNAMED, value);
	}

    /**
     * Check if {@code Colorbrightnessnamed} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasColorbrightnessnamed( Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORBRIGHTNESSNAMED, value);
	}

     /**
     * Get all values of property {@code Colorbrightnessnamed} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllColorbrightnessnamed_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORBRIGHTNESSNAMED);
	}

    /**
     * Get all values of property {@code Colorbrightnessnamed} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllColorbrightnessnamed_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORBRIGHTNESSNAMED, Node.class);
	}

    /**
     * Get all values of property {@code Colorbrightnessnamed} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllColorbrightnessnamed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORBRIGHTNESSNAMED);
	}

    /**
     * Get all values of property {@code Colorbrightnessnamed} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllColorbrightnessnamed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORBRIGHTNESSNAMED, Node.class);
	}
 
    /**
     * Get all values of property {@code Colorbrightnessnamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Brightness> getAllColorbrightnessnamed(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORBRIGHTNESSNAMED, Brightness.class);
	}

    /**
     * Get all values of property {@code Colorbrightnessnamed} as a ReactorResult of {@linkplain Brightness}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Brightness> getAllColorbrightnessnamed_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORBRIGHTNESSNAMED, Brightness.class);
	}

    /**
     * Get all values of property {@code Colorbrightnessnamed}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Brightness> getAllColorbrightnessnamed() {
		return Base.getAll(this.model, this.getResource(), COLORBRIGHTNESSNAMED, Brightness.class);
	}

    /**
     * Get all values of property {@code Colorbrightnessnamed} as a ReactorResult of {@linkplain Brightness}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Brightness> getAllColorbrightnessnamed_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORBRIGHTNESSNAMED, Brightness.class);
	}

 
    /**
     * Adds a value to property {@code Colorbrightnessnamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addColorbrightnessnamed(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, COLORBRIGHTNESSNAMED, value);
	}

    /**
     * Adds a value to property {@code Colorbrightnessnamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addColorbrightnessnamed(Node value) {
		Base.add(this.model, this.getResource(), COLORBRIGHTNESSNAMED, value);
	}
    /**
     * Adds a value to property {@code Colorbrightnessnamed} from an instance of {@linkplain Brightness}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addColorbrightnessnamed(Model model, Resource instanceResource, Brightness value) {
		Base.add(model, instanceResource, COLORBRIGHTNESSNAMED, value);
	}

    /**
     * Adds a value to property {@code Colorbrightnessnamed} from an instance of {@linkplain Brightness}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addColorbrightnessnamed(Brightness value) {
		Base.add(this.model, this.getResource(), COLORBRIGHTNESSNAMED, value);
	}
  

    /**
     * Sets a value of property {@code Colorbrightnessnamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setColorbrightnessnamed(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, COLORBRIGHTNESSNAMED, value);
	}

    /**
     * Sets a value of property {@code Colorbrightnessnamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setColorbrightnessnamed(Node value) {
		Base.set(this.model, this.getResource(), COLORBRIGHTNESSNAMED, value);
	}
    /**
     * Sets a value of property {@code Colorbrightnessnamed} from an instance of {@linkplain Brightness}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setColorbrightnessnamed(Model model, Resource instanceResource, Brightness value) {
		Base.set(model, instanceResource, COLORBRIGHTNESSNAMED, value);
	}

    /**
     * Sets a value of property {@code Colorbrightnessnamed} from an instance of {@linkplain Brightness}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setColorbrightnessnamed(Brightness value) {
		Base.set(this.model, this.getResource(), COLORBRIGHTNESSNAMED, value);
	}
  


    /**
     * Removes a value of property {@code Colorbrightnessnamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeColorbrightnessnamed(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, COLORBRIGHTNESSNAMED, value);
	}

    /**
     * Removes a value of property {@code Colorbrightnessnamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeColorbrightnessnamed(Node value) {
		Base.remove(this.model, this.getResource(), COLORBRIGHTNESSNAMED, value);
	}
    /**
     * Removes a value of property {@code Colorbrightnessnamed} given as an instance of {@linkplain Brightness}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeColorbrightnessnamed(Model model, Resource instanceResource, Brightness value) {
		Base.remove(model, instanceResource, COLORBRIGHTNESSNAMED, value);
	}

    /**
     * Removes a value of property {@code Colorbrightnessnamed} given as an instance of {@linkplain Brightness}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeColorbrightnessnamed(Brightness value) {
		Base.remove(this.model, this.getResource(), COLORBRIGHTNESSNAMED, value);
	}
  
    /**
     * Removes all values of property {@code Colorbrightnessnamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllColorbrightnessnamed(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORBRIGHTNESSNAMED);
	}

    /**
     * Removes all values of property {@code Colorbrightnessnamed}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllColorbrightnessnamed() {
		Base.removeAll(this.model, this.getResource(), COLORBRIGHTNESSNAMED);
	}
     /**
     * Check if {@code Colornamed} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasColornamed(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, COLORNAMED);
	}

    /**
     * Check if {@code Colornamed} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasColornamed() {
		return Base.has(this.model, this.getResource(), COLORNAMED);
	}

    /**
     * Check if {@code Colornamed} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasColornamed(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, COLORNAMED, value);
	}

    /**
     * Check if {@code Colornamed} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasColornamed( Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORNAMED, value);
	}

     /**
     * Get all values of property {@code Colornamed} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllColornamed_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORNAMED);
	}

    /**
     * Get all values of property {@code Colornamed} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllColornamed_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORNAMED, Node.class);
	}

    /**
     * Get all values of property {@code Colornamed} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllColornamed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORNAMED);
	}

    /**
     * Get all values of property {@code Colornamed} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllColornamed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORNAMED, Node.class);
	}
 
    /**
     * Get all values of property {@code Colornamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Color> getAllColornamed(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORNAMED, Color.class);
	}

    /**
     * Get all values of property {@code Colornamed} as a ReactorResult of {@linkplain Color}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Color> getAllColornamed_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORNAMED, Color.class);
	}

    /**
     * Get all values of property {@code Colornamed}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Color> getAllColornamed() {
		return Base.getAll(this.model, this.getResource(), COLORNAMED, Color.class);
	}

    /**
     * Get all values of property {@code Colornamed} as a ReactorResult of {@linkplain Color}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Color> getAllColornamed_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORNAMED, Color.class);
	}

 
    /**
     * Adds a value to property {@code Colornamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addColornamed(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, COLORNAMED, value);
	}

    /**
     * Adds a value to property {@code Colornamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addColornamed(Node value) {
		Base.add(this.model, this.getResource(), COLORNAMED, value);
	}
    /**
     * Adds a value to property {@code Colornamed} from an instance of {@linkplain Color}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addColornamed(Model model, Resource instanceResource, Color value) {
		Base.add(model, instanceResource, COLORNAMED, value);
	}

    /**
     * Adds a value to property {@code Colornamed} from an instance of {@linkplain Color}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addColornamed(Color value) {
		Base.add(this.model, this.getResource(), COLORNAMED, value);
	}
  

    /**
     * Sets a value of property {@code Colornamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setColornamed(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, COLORNAMED, value);
	}

    /**
     * Sets a value of property {@code Colornamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setColornamed(Node value) {
		Base.set(this.model, this.getResource(), COLORNAMED, value);
	}
    /**
     * Sets a value of property {@code Colornamed} from an instance of {@linkplain Color}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setColornamed(Model model, Resource instanceResource, Color value) {
		Base.set(model, instanceResource, COLORNAMED, value);
	}

    /**
     * Sets a value of property {@code Colornamed} from an instance of {@linkplain Color}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setColornamed(Color value) {
		Base.set(this.model, this.getResource(), COLORNAMED, value);
	}
  


    /**
     * Removes a value of property {@code Colornamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeColornamed(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, COLORNAMED, value);
	}

    /**
     * Removes a value of property {@code Colornamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeColornamed(Node value) {
		Base.remove(this.model, this.getResource(), COLORNAMED, value);
	}
    /**
     * Removes a value of property {@code Colornamed} given as an instance of {@linkplain Color}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeColornamed(Model model, Resource instanceResource, Color value) {
		Base.remove(model, instanceResource, COLORNAMED, value);
	}

    /**
     * Removes a value of property {@code Colornamed} given as an instance of {@linkplain Color}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeColornamed(Color value) {
		Base.remove(this.model, this.getResource(), COLORNAMED, value);
	}
  
    /**
     * Removes all values of property {@code Colornamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllColornamed(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORNAMED);
	}

    /**
     * Removes all values of property {@code Colornamed}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllColornamed() {
		Base.removeAll(this.model, this.getResource(), COLORNAMED);
	}
     /**
     * Check if {@code Colorrgb} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasColorrgb(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, COLORRGB);
	}

    /**
     * Check if {@code Colorrgb} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasColorrgb() {
		return Base.has(this.model, this.getResource(), COLORRGB);
	}

    /**
     * Check if {@code Colorrgb} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasColorrgb(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, COLORRGB, value);
	}

    /**
     * Check if {@code Colorrgb} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasColorrgb( Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORRGB, value);
	}

     /**
     * Get all values of property {@code Colorrgb} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllColorrgb_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORRGB);
	}

    /**
     * Get all values of property {@code Colorrgb} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllColorrgb_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORRGB, Node.class);
	}

    /**
     * Get all values of property {@code Colorrgb} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllColorrgb_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORRGB);
	}

    /**
     * Get all values of property {@code Colorrgb} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllColorrgb_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORRGB, Node.class);
	}
 
    /**
     * Get all values of property {@code Colorrgb}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.String> getAllColorrgb(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORRGB, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Colorrgb} as a ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.String> getAllColorrgb_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORRGB, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Colorrgb}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.String> getAllColorrgb() {
		return Base.getAll(this.model, this.getResource(), COLORRGB, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Colorrgb} as a ReactorResult of {@linkplain java.lang.String}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.String> getAllColorrgb_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORRGB, java.lang.String.class);
	}

 
    /**
     * Adds a value to property {@code Colorrgb} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addColorrgb(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, COLORRGB, value);
	}

    /**
     * Adds a value to property {@code Colorrgb} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addColorrgb(Node value) {
		Base.add(this.model, this.getResource(), COLORRGB, value);
	}
    /**
     * Adds a value to property {@code Colorrgb} from an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addColorrgb(Model model, Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COLORRGB, value);
	}

    /**
     * Adds a value to property {@code Colorrgb} from an instance of {@linkplain java.lang.String}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addColorrgb(java.lang.String value) {
		Base.add(this.model, this.getResource(), COLORRGB, value);
	}
  

    /**
     * Sets a value of property {@code Colorrgb} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setColorrgb(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, COLORRGB, value);
	}

    /**
     * Sets a value of property {@code Colorrgb} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setColorrgb(Node value) {
		Base.set(this.model, this.getResource(), COLORRGB, value);
	}
    /**
     * Sets a value of property {@code Colorrgb} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setColorrgb(Model model, Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COLORRGB, value);
	}

    /**
     * Sets a value of property {@code Colorrgb} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setColorrgb(java.lang.String value) {
		Base.set(this.model, this.getResource(), COLORRGB, value);
	}
  


    /**
     * Removes a value of property {@code Colorrgb} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeColorrgb(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, COLORRGB, value);
	}

    /**
     * Removes a value of property {@code Colorrgb} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeColorrgb(Node value) {
		Base.remove(this.model, this.getResource(), COLORRGB, value);
	}
    /**
     * Removes a value of property {@code Colorrgb} given as an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeColorrgb(Model model, Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COLORRGB, value);
	}

    /**
     * Removes a value of property {@code Colorrgb} given as an instance of {@linkplain java.lang.String}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeColorrgb(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COLORRGB, value);
	}
  
    /**
     * Removes all values of property {@code Colorrgb}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllColorrgb(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORRGB);
	}

    /**
     * Removes all values of property {@code Colorrgb}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllColorrgb() {
		Base.removeAll(this.model, this.getResource(), COLORRGB);
	}
     /**
     * Check if {@code Colorsaturationnamed} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasColorsaturationnamed(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, COLORSATURATIONNAMED);
	}

    /**
     * Check if {@code Colorsaturationnamed} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasColorsaturationnamed() {
		return Base.has(this.model, this.getResource(), COLORSATURATIONNAMED);
	}

    /**
     * Check if {@code Colorsaturationnamed} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasColorsaturationnamed(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, COLORSATURATIONNAMED, value);
	}

    /**
     * Check if {@code Colorsaturationnamed} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasColorsaturationnamed( Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORSATURATIONNAMED, value);
	}

     /**
     * Get all values of property {@code Colorsaturationnamed} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllColorsaturationnamed_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORSATURATIONNAMED);
	}

    /**
     * Get all values of property {@code Colorsaturationnamed} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllColorsaturationnamed_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORSATURATIONNAMED, Node.class);
	}

    /**
     * Get all values of property {@code Colorsaturationnamed} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllColorsaturationnamed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORSATURATIONNAMED);
	}

    /**
     * Get all values of property {@code Colorsaturationnamed} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllColorsaturationnamed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORSATURATIONNAMED, Node.class);
	}
 
    /**
     * Get all values of property {@code Colorsaturationnamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Saturation> getAllColorsaturationnamed(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORSATURATIONNAMED, Saturation.class);
	}

    /**
     * Get all values of property {@code Colorsaturationnamed} as a ReactorResult of {@linkplain Saturation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Saturation> getAllColorsaturationnamed_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORSATURATIONNAMED, Saturation.class);
	}

    /**
     * Get all values of property {@code Colorsaturationnamed}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Saturation> getAllColorsaturationnamed() {
		return Base.getAll(this.model, this.getResource(), COLORSATURATIONNAMED, Saturation.class);
	}

    /**
     * Get all values of property {@code Colorsaturationnamed} as a ReactorResult of {@linkplain Saturation}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Saturation> getAllColorsaturationnamed_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORSATURATIONNAMED, Saturation.class);
	}

 
    /**
     * Adds a value to property {@code Colorsaturationnamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addColorsaturationnamed(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, COLORSATURATIONNAMED, value);
	}

    /**
     * Adds a value to property {@code Colorsaturationnamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addColorsaturationnamed(Node value) {
		Base.add(this.model, this.getResource(), COLORSATURATIONNAMED, value);
	}
    /**
     * Adds a value to property {@code Colorsaturationnamed} from an instance of {@linkplain Saturation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addColorsaturationnamed(Model model, Resource instanceResource, Saturation value) {
		Base.add(model, instanceResource, COLORSATURATIONNAMED, value);
	}

    /**
     * Adds a value to property {@code Colorsaturationnamed} from an instance of {@linkplain Saturation}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addColorsaturationnamed(Saturation value) {
		Base.add(this.model, this.getResource(), COLORSATURATIONNAMED, value);
	}
  

    /**
     * Sets a value of property {@code Colorsaturationnamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setColorsaturationnamed(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, COLORSATURATIONNAMED, value);
	}

    /**
     * Sets a value of property {@code Colorsaturationnamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setColorsaturationnamed(Node value) {
		Base.set(this.model, this.getResource(), COLORSATURATIONNAMED, value);
	}
    /**
     * Sets a value of property {@code Colorsaturationnamed} from an instance of {@linkplain Saturation}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setColorsaturationnamed(Model model, Resource instanceResource, Saturation value) {
		Base.set(model, instanceResource, COLORSATURATIONNAMED, value);
	}

    /**
     * Sets a value of property {@code Colorsaturationnamed} from an instance of {@linkplain Saturation}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setColorsaturationnamed(Saturation value) {
		Base.set(this.model, this.getResource(), COLORSATURATIONNAMED, value);
	}
  


    /**
     * Removes a value of property {@code Colorsaturationnamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeColorsaturationnamed(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, COLORSATURATIONNAMED, value);
	}

    /**
     * Removes a value of property {@code Colorsaturationnamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeColorsaturationnamed(Node value) {
		Base.remove(this.model, this.getResource(), COLORSATURATIONNAMED, value);
	}
    /**
     * Removes a value of property {@code Colorsaturationnamed} given as an instance of {@linkplain Saturation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeColorsaturationnamed(Model model, Resource instanceResource, Saturation value) {
		Base.remove(model, instanceResource, COLORSATURATIONNAMED, value);
	}

    /**
     * Removes a value of property {@code Colorsaturationnamed} given as an instance of {@linkplain Saturation}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeColorsaturationnamed(Saturation value) {
		Base.remove(this.model, this.getResource(), COLORSATURATIONNAMED, value);
	}
  
    /**
     * Removes all values of property {@code Colorsaturationnamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllColorsaturationnamed(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORSATURATIONNAMED);
	}

    /**
     * Removes all values of property {@code Colorsaturationnamed}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllColorsaturationnamed() {
		Base.removeAll(this.model, this.getResource(), COLORSATURATIONNAMED);
	}
     /**
     * Check if {@code Contains} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasContains(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, CONTAINS);
	}

    /**
     * Check if {@code Contains} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasContains() {
		return Base.has(this.model, this.getResource(), CONTAINS);
	}

    /**
     * Check if {@code Contains} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasContains(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, CONTAINS, value);
	}

    /**
     * Check if {@code Contains} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasContains( Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTAINS, value);
	}

     /**
     * Get all values of property {@code Contains} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllContains_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTAINS);
	}

    /**
     * Get all values of property {@code Contains} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllContains_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINS, Node.class);
	}

    /**
     * Get all values of property {@code Contains} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllContains_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTAINS);
	}

    /**
     * Get all values of property {@code Contains} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllContains_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINS, Node.class);
	}
 
    /**
     * Get all values of property {@code Contains}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<GraphicObject> getAllContains(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTAINS, GraphicObject.class);
	}

    /**
     * Get all values of property {@code Contains} as a ReactorResult of {@linkplain GraphicObject}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<GraphicObject> getAllContains_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINS, GraphicObject.class);
	}

    /**
     * Get all values of property {@code Contains}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<GraphicObject> getAllContains() {
		return Base.getAll(this.model, this.getResource(), CONTAINS, GraphicObject.class);
	}

    /**
     * Get all values of property {@code Contains} as a ReactorResult of {@linkplain GraphicObject}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<GraphicObject> getAllContains_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINS, GraphicObject.class);
	}

 
    /**
     * Adds a value to property {@code Contains} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addContains(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, CONTAINS, value);
	}

    /**
     * Adds a value to property {@code Contains} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addContains(Node value) {
		Base.add(this.model, this.getResource(), CONTAINS, value);
	}
    /**
     * Adds a value to property {@code Contains} from an instance of {@linkplain GraphicObject}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addContains(Model model, Resource instanceResource, GraphicObject value) {
		Base.add(model, instanceResource, CONTAINS, value);
	}

    /**
     * Adds a value to property {@code Contains} from an instance of {@linkplain GraphicObject}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addContains(GraphicObject value) {
		Base.add(this.model, this.getResource(), CONTAINS, value);
	}
  

    /**
     * Sets a value of property {@code Contains} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setContains(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, CONTAINS, value);
	}

    /**
     * Sets a value of property {@code Contains} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setContains(Node value) {
		Base.set(this.model, this.getResource(), CONTAINS, value);
	}
    /**
     * Sets a value of property {@code Contains} from an instance of {@linkplain GraphicObject}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setContains(Model model, Resource instanceResource, GraphicObject value) {
		Base.set(model, instanceResource, CONTAINS, value);
	}

    /**
     * Sets a value of property {@code Contains} from an instance of {@linkplain GraphicObject}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setContains(GraphicObject value) {
		Base.set(this.model, this.getResource(), CONTAINS, value);
	}
  


    /**
     * Removes a value of property {@code Contains} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeContains(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, CONTAINS, value);
	}

    /**
     * Removes a value of property {@code Contains} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeContains(Node value) {
		Base.remove(this.model, this.getResource(), CONTAINS, value);
	}
    /**
     * Removes a value of property {@code Contains} given as an instance of {@linkplain GraphicObject}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeContains(Model model, Resource instanceResource, GraphicObject value) {
		Base.remove(model, instanceResource, CONTAINS, value);
	}

    /**
     * Removes a value of property {@code Contains} given as an instance of {@linkplain GraphicObject}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeContains(GraphicObject value) {
		Base.remove(this.model, this.getResource(), CONTAINS, value);
	}
  
    /**
     * Removes all values of property {@code Contains}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllContains(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTAINS);
	}

    /**
     * Removes all values of property {@code Contains}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllContains() {
		Base.removeAll(this.model, this.getResource(), CONTAINS);
	}
     /**
     * Check if {@code Represents} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasRepresents(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, REPRESENTS);
	}

    /**
     * Check if {@code Represents} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasRepresents() {
		return Base.has(this.model, this.getResource(), REPRESENTS);
	}

    /**
     * Check if {@code Represents} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasRepresents(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, REPRESENTS, value);
	}

    /**
     * Check if {@code Represents} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasRepresents( Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPRESENTS, value);
	}

     /**
     * Get all values of property {@code Represents} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllRepresents_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPRESENTS);
	}

    /**
     * Get all values of property {@code Represents} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllRepresents_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRESENTS, Node.class);
	}

    /**
     * Get all values of property {@code Represents} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllRepresents_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPRESENTS);
	}

    /**
     * Get all values of property {@code Represents} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllRepresents_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPRESENTS, Node.class);
	}
 
    /**
     * Get all values of property {@code Represents}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllRepresents(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPRESENTS, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Represents} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllRepresents_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRESENTS, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Represents}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllRepresents() {
		return Base.getAll(this.model, this.getResource(), REPRESENTS, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Represents} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllRepresents_as() {
		return Base.getAll_as(this.model, this.getResource(), REPRESENTS, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

 
    /**
     * Adds a value to property {@code Represents} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addRepresents(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, REPRESENTS, value);
	}

    /**
     * Adds a value to property {@code Represents} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addRepresents(Node value) {
		Base.add(this.model, this.getResource(), REPRESENTS, value);
	}
    /**
     * Adds a value to property {@code Represents} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addRepresents(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, REPRESENTS, value);
	}

    /**
     * Adds a value to property {@code Represents} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addRepresents(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), REPRESENTS, value);
	}
  

    /**
     * Sets a value of property {@code Represents} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setRepresents(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, REPRESENTS, value);
	}

    /**
     * Sets a value of property {@code Represents} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setRepresents(Node value) {
		Base.set(this.model, this.getResource(), REPRESENTS, value);
	}
    /**
     * Sets a value of property {@code Represents} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setRepresents(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, REPRESENTS, value);
	}

    /**
     * Sets a value of property {@code Represents} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setRepresents(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), REPRESENTS, value);
	}
  


    /**
     * Removes a value of property {@code Represents} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeRepresents(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, REPRESENTS, value);
	}

    /**
     * Removes a value of property {@code Represents} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeRepresents(Node value) {
		Base.remove(this.model, this.getResource(), REPRESENTS, value);
	}
    /**
     * Removes a value of property {@code Represents} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeRepresents(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, REPRESENTS, value);
	}

    /**
     * Removes a value of property {@code Represents} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeRepresents(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), REPRESENTS, value);
	}
  
    /**
     * Removes all values of property {@code Represents}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllRepresents(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPRESENTS);
	}

    /**
     * Removes all values of property {@code Represents}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllRepresents() {
		Base.removeAll(this.model, this.getResource(), REPRESENTS);
	}
     /**
     * Check if {@code Shapenamed} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasShapenamed(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SHAPENAMED);
	}

    /**
     * Check if {@code Shapenamed} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasShapenamed() {
		return Base.has(this.model, this.getResource(), SHAPENAMED);
	}

    /**
     * Check if {@code Shapenamed} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasShapenamed(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SHAPENAMED, value);
	}

    /**
     * Check if {@code Shapenamed} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasShapenamed( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHAPENAMED, value);
	}

     /**
     * Get all values of property {@code Shapenamed} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllShapenamed_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHAPENAMED);
	}

    /**
     * Get all values of property {@code Shapenamed} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllShapenamed_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAPENAMED, Node.class);
	}

    /**
     * Get all values of property {@code Shapenamed} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllShapenamed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHAPENAMED);
	}

    /**
     * Get all values of property {@code Shapenamed} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllShapenamed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHAPENAMED, Node.class);
	}
 
    /**
     * Get all values of property {@code Shapenamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Shape> getAllShapenamed(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHAPENAMED, Shape.class);
	}

    /**
     * Get all values of property {@code Shapenamed} as a ReactorResult of {@linkplain Shape}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Shape> getAllShapenamed_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAPENAMED, Shape.class);
	}

    /**
     * Get all values of property {@code Shapenamed}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Shape> getAllShapenamed() {
		return Base.getAll(this.model, this.getResource(), SHAPENAMED, Shape.class);
	}

    /**
     * Get all values of property {@code Shapenamed} as a ReactorResult of {@linkplain Shape}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Shape> getAllShapenamed_as() {
		return Base.getAll_as(this.model, this.getResource(), SHAPENAMED, Shape.class);
	}

 
    /**
     * Adds a value to property {@code Shapenamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addShapenamed(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SHAPENAMED, value);
	}

    /**
     * Adds a value to property {@code Shapenamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addShapenamed(Node value) {
		Base.add(this.model, this.getResource(), SHAPENAMED, value);
	}
    /**
     * Adds a value to property {@code Shapenamed} from an instance of {@linkplain Shape}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addShapenamed(Model model, Resource instanceResource, Shape value) {
		Base.add(model, instanceResource, SHAPENAMED, value);
	}

    /**
     * Adds a value to property {@code Shapenamed} from an instance of {@linkplain Shape}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addShapenamed(Shape value) {
		Base.add(this.model, this.getResource(), SHAPENAMED, value);
	}
  

    /**
     * Sets a value of property {@code Shapenamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setShapenamed(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SHAPENAMED, value);
	}

    /**
     * Sets a value of property {@code Shapenamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setShapenamed(Node value) {
		Base.set(this.model, this.getResource(), SHAPENAMED, value);
	}
    /**
     * Sets a value of property {@code Shapenamed} from an instance of {@linkplain Shape}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setShapenamed(Model model, Resource instanceResource, Shape value) {
		Base.set(model, instanceResource, SHAPENAMED, value);
	}

    /**
     * Sets a value of property {@code Shapenamed} from an instance of {@linkplain Shape}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setShapenamed(Shape value) {
		Base.set(this.model, this.getResource(), SHAPENAMED, value);
	}
  


    /**
     * Removes a value of property {@code Shapenamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeShapenamed(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SHAPENAMED, value);
	}

    /**
     * Removes a value of property {@code Shapenamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeShapenamed(Node value) {
		Base.remove(this.model, this.getResource(), SHAPENAMED, value);
	}
    /**
     * Removes a value of property {@code Shapenamed} given as an instance of {@linkplain Shape}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeShapenamed(Model model, Resource instanceResource, Shape value) {
		Base.remove(model, instanceResource, SHAPENAMED, value);
	}

    /**
     * Removes a value of property {@code Shapenamed} given as an instance of {@linkplain Shape}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeShapenamed(Shape value) {
		Base.remove(this.model, this.getResource(), SHAPENAMED, value);
	}
  
    /**
     * Removes all values of property {@code Shapenamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllShapenamed(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHAPENAMED);
	}

    /**
     * Removes all values of property {@code Shapenamed}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllShapenamed() {
		Base.removeAll(this.model, this.getResource(), SHAPENAMED);
	}
     /**
     * Check if {@code Sizenamed} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSizenamed(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SIZENAMED);
	}

    /**
     * Check if {@code Sizenamed} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSizenamed() {
		return Base.has(this.model, this.getResource(), SIZENAMED);
	}

    /**
     * Check if {@code Sizenamed} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSizenamed(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SIZENAMED, value);
	}

    /**
     * Check if {@code Sizenamed} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSizenamed( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIZENAMED, value);
	}

     /**
     * Get all values of property {@code Sizenamed} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSizenamed_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SIZENAMED);
	}

    /**
     * Get all values of property {@code Sizenamed} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSizenamed_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIZENAMED, Node.class);
	}

    /**
     * Get all values of property {@code Sizenamed} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSizenamed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SIZENAMED);
	}

    /**
     * Get all values of property {@code Sizenamed} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSizenamed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SIZENAMED, Node.class);
	}
 
    /**
     * Get all values of property {@code Sizenamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Size> getAllSizenamed(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SIZENAMED, Size.class);
	}

    /**
     * Get all values of property {@code Sizenamed} as a ReactorResult of {@linkplain Size}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Size> getAllSizenamed_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIZENAMED, Size.class);
	}

    /**
     * Get all values of property {@code Sizenamed}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Size> getAllSizenamed() {
		return Base.getAll(this.model, this.getResource(), SIZENAMED, Size.class);
	}

    /**
     * Get all values of property {@code Sizenamed} as a ReactorResult of {@linkplain Size}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Size> getAllSizenamed_as() {
		return Base.getAll_as(this.model, this.getResource(), SIZENAMED, Size.class);
	}

 
    /**
     * Adds a value to property {@code Sizenamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSizenamed(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SIZENAMED, value);
	}

    /**
     * Adds a value to property {@code Sizenamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSizenamed(Node value) {
		Base.add(this.model, this.getResource(), SIZENAMED, value);
	}
    /**
     * Adds a value to property {@code Sizenamed} from an instance of {@linkplain Size}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSizenamed(Model model, Resource instanceResource, Size value) {
		Base.add(model, instanceResource, SIZENAMED, value);
	}

    /**
     * Adds a value to property {@code Sizenamed} from an instance of {@linkplain Size}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSizenamed(Size value) {
		Base.add(this.model, this.getResource(), SIZENAMED, value);
	}
  

    /**
     * Sets a value of property {@code Sizenamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSizenamed(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SIZENAMED, value);
	}

    /**
     * Sets a value of property {@code Sizenamed} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSizenamed(Node value) {
		Base.set(this.model, this.getResource(), SIZENAMED, value);
	}
    /**
     * Sets a value of property {@code Sizenamed} from an instance of {@linkplain Size}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSizenamed(Model model, Resource instanceResource, Size value) {
		Base.set(model, instanceResource, SIZENAMED, value);
	}

    /**
     * Sets a value of property {@code Sizenamed} from an instance of {@linkplain Size}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSizenamed(Size value) {
		Base.set(this.model, this.getResource(), SIZENAMED, value);
	}
  


    /**
     * Removes a value of property {@code Sizenamed} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSizenamed(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SIZENAMED, value);
	}

    /**
     * Removes a value of property {@code Sizenamed} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSizenamed(Node value) {
		Base.remove(this.model, this.getResource(), SIZENAMED, value);
	}
    /**
     * Removes a value of property {@code Sizenamed} given as an instance of {@linkplain Size}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSizenamed(Model model, Resource instanceResource, Size value) {
		Base.remove(model, instanceResource, SIZENAMED, value);
	}

    /**
     * Removes a value of property {@code Sizenamed} given as an instance of {@linkplain Size}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSizenamed(Size value) {
		Base.remove(this.model, this.getResource(), SIZENAMED, value);
	}
  
    /**
     * Removes all values of property {@code Sizenamed}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSizenamed(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SIZENAMED);
	}

    /**
     * Removes all values of property {@code Sizenamed}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSizenamed() {
		Base.removeAll(this.model, this.getResource(), SIZENAMED);
	}
     /**
     * Check if {@code Textvalue} has at least one value set.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasTextvalue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TEXTVALUE);
	}

    /**
     * Check if {@code Textvalue} has at least one value set.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasTextvalue() {
		return Base.has(this.model, this.getResource(), TEXTVALUE);
	}

    /**
     * Check if {@code Textvalue} has the given value (maybe among other values).
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasTextvalue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TEXTVALUE, value);
	}

    /**
     * Check if {@code Textvalue} has the given value (maybe among other values).
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasTextvalue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TEXTVALUE, value);
	}

     /**
     * Get all values of property {@code Textvalue} as an Iterator over RDF2Go nodes.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllTextvalue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TEXTVALUE);
	}

    /**
     * Get all values of property {@code Textvalue} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllTextvalue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEXTVALUE, Node.class);
	}

    /**
     * Get all values of property {@code Textvalue} as an Iterator over RDF2Go nodes
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllTextvalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TEXTVALUE);
	}

    /**
     * Get all values of property {@code Textvalue} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllTextvalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TEXTVALUE, Node.class);
	}
 
    /**
     * Get all values of property {@code Textvalue}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.String> getAllTextvalue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TEXTVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Textvalue} as a ReactorResult of {@linkplain java.lang.String}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.String> getAllTextvalue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEXTVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Textvalue}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.String> getAllTextvalue() {
		return Base.getAll(this.model, this.getResource(), TEXTVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code Textvalue} as a ReactorResult of {@linkplain java.lang.String}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.String> getAllTextvalue_as() {
		return Base.getAll_as(this.model, this.getResource(), TEXTVALUE, java.lang.String.class);
	}

 
    /**
     * Adds a value to property {@code Textvalue} as an RDF2Go {@linkplain Node}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addTextvalue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TEXTVALUE, value);
	}

    /**
     * Adds a value to property {@code Textvalue} as an RDF2Go {@linkplain Node}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addTextvalue(Node value) {
		Base.add(this.model, this.getResource(), TEXTVALUE, value);
	}
    /**
     * Adds a value to property {@code Textvalue} from an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addTextvalue(Model model, Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TEXTVALUE, value);
	}

    /**
     * Adds a value to property {@code Textvalue} from an instance of {@linkplain java.lang.String}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addTextvalue(java.lang.String value) {
		Base.add(this.model, this.getResource(), TEXTVALUE, value);
	}
  

    /**
     * Sets a value of property {@code Textvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setTextvalue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TEXTVALUE, value);
	}

    /**
     * Sets a value of property {@code Textvalue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setTextvalue(Node value) {
		Base.set(this.model, this.getResource(), TEXTVALUE, value);
	}
    /**
     * Sets a value of property {@code Textvalue} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setTextvalue(Model model, Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TEXTVALUE, value);
	}

    /**
     * Sets a value of property {@code Textvalue} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setTextvalue(java.lang.String value) {
		Base.set(this.model, this.getResource(), TEXTVALUE, value);
	}
  


    /**
     * Removes a value of property {@code Textvalue} as an RDF2Go {@linkplain Node}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeTextvalue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TEXTVALUE, value);
	}

    /**
     * Removes a value of property {@code Textvalue} as an RDF2Go {@linkplain Node}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeTextvalue(Node value) {
		Base.remove(this.model, this.getResource(), TEXTVALUE, value);
	}
    /**
     * Removes a value of property {@code Textvalue} given as an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeTextvalue(Model model, Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TEXTVALUE, value);
	}

    /**
     * Removes a value of property {@code Textvalue} given as an instance of {@linkplain java.lang.String}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeTextvalue(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TEXTVALUE, value);
	}
  
    /**
     * Removes all values of property {@code Textvalue}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllTextvalue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TEXTVALUE);
	}

    /**
     * Removes all values of property {@code Textvalue}.
     * Comment from schema: This should have a relation to shape, since text is also graphic shapes.
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllTextvalue() {
		Base.removeAll(this.model, this.getResource(), TEXTVALUE);
	}
     /**
     * Check if {@code Width} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasWidth(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, WIDTH);
	}

    /**
     * Check if {@code Width} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasWidth() {
		return Base.has(this.model, this.getResource(), WIDTH);
	}

    /**
     * Check if {@code Width} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasWidth(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, WIDTH, value);
	}

    /**
     * Check if {@code Width} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasWidth( Node value ) {
		return Base.hasValue(this.model, this.getResource(), WIDTH, value);
	}

     /**
     * Get all values of property {@code Width} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllWidth_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WIDTH);
	}

    /**
     * Get all values of property {@code Width} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllWidth_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIDTH, Node.class);
	}

    /**
     * Get all values of property {@code Width} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllWidth_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WIDTH);
	}

    /**
     * Get all values of property {@code Width} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllWidth_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WIDTH, Node.class);
	}
 
    /**
     * Get all values of property {@code Width}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Float> getAllWidth(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, WIDTH, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Width} as a ReactorResult of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Float> getAllWidth_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIDTH, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Width}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Float> getAllWidth() {
		return Base.getAll(this.model, this.getResource(), WIDTH, java.lang.Float.class);
	}

    /**
     * Get all values of property {@code Width} as a ReactorResult of {@linkplain java.lang.Float}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Float> getAllWidth_as() {
		return Base.getAll_as(this.model, this.getResource(), WIDTH, java.lang.Float.class);
	}

 
    /**
     * Adds a value to property {@code Width} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addWidth(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, WIDTH, value);
	}

    /**
     * Adds a value to property {@code Width} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addWidth(Node value) {
		Base.add(this.model, this.getResource(), WIDTH, value);
	}
    /**
     * Adds a value to property {@code Width} from an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addWidth(Model model, Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, WIDTH, value);
	}

    /**
     * Adds a value to property {@code Width} from an instance of {@linkplain java.lang.Float}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addWidth(java.lang.Float value) {
		Base.add(this.model, this.getResource(), WIDTH, value);
	}
  

    /**
     * Sets a value of property {@code Width} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setWidth(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, WIDTH, value);
	}

    /**
     * Sets a value of property {@code Width} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setWidth(Node value) {
		Base.set(this.model, this.getResource(), WIDTH, value);
	}
    /**
     * Sets a value of property {@code Width} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setWidth(Model model, Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, WIDTH, value);
	}

    /**
     * Sets a value of property {@code Width} from an instance of {@linkplain java.lang.Float}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setWidth(java.lang.Float value) {
		Base.set(this.model, this.getResource(), WIDTH, value);
	}
  


    /**
     * Removes a value of property {@code Width} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeWidth(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, WIDTH, value);
	}

    /**
     * Removes a value of property {@code Width} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeWidth(Node value) {
		Base.remove(this.model, this.getResource(), WIDTH, value);
	}
    /**
     * Removes a value of property {@code Width} given as an instance of {@linkplain java.lang.Float}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeWidth(Model model, Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, WIDTH, value);
	}

    /**
     * Removes a value of property {@code Width} given as an instance of {@linkplain java.lang.Float}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeWidth(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), WIDTH, value);
	}
  
    /**
     * Removes all values of property {@code Width}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllWidth(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, WIDTH);
	}

    /**
     * Removes all values of property {@code Width}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllWidth() {
		Base.removeAll(this.model, this.getResource(), WIDTH);
	}
 }