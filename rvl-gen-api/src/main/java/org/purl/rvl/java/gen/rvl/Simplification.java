/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) on 18.08.15 11:57
 */
package org.purl.rvl.java.gen.rvl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li>Preferredproperty</li>
 *   <li>Propertytosimplify</li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 18.08.15 11:57
 */
public class Simplification extends Thing1 {

    private static final long serialVersionUID = -5973224450027919446L;

    /** http://purl.org/rvl/Simplification */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/rvl/Simplification", false);

    /** http://purl.org/rvl/preferredProperty */
	public static final URI PREFERREDPROPERTY = new URIImpl("http://purl.org/rvl/preferredProperty", false);

    /** http://purl.org/rvl/propertyToSimplify */
	public static final URI PROPERTYTOSIMPLIFY = new URIImpl("http://purl.org/rvl/propertyToSimplify", false);

    /**
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/rvl/preferredProperty", false),
      new URIImpl("http://purl.org/rvl/propertyToSimplify", false)
    };


	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected Simplification (Model model, URI classURI, Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2]
	 */
	public Simplification (Model model, Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7]
	 */
	public Simplification (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8]
	 */
	public Simplification (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9]
	 */
	public Simplification (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Simplification or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0]
	 */
	public static Simplification getInstance(Model model, Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Simplification.class);
	}

	/**
	 * Create a new instance of this class in the model.
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/rvl/Simplification).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1]
	 */
	public static void createInstance(Model model, Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2]
	 */
	public static boolean hasInstance(Model model, Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3]
	 */
	public static ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as]
	 */
	public static ReactorResult<? extends Simplification> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Simplification.class );
	}

    /**
	 * Remove triple {@code (this, rdf:type, Simplification)} from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4]
	 */
	public static void deleteInstance(Model model, Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class5]
	 */
	public static void deleteAllProperties(Model model,	Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if {@code Preferredproperty} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasPreferredproperty(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, PREFERREDPROPERTY);
	}

    /**
     * Check if {@code Preferredproperty} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasPreferredproperty() {
		return Base.has(this.model, this.getResource(), PREFERREDPROPERTY);
	}

    /**
     * Check if {@code Preferredproperty} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasPreferredproperty(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, PREFERREDPROPERTY, value);
	}

    /**
     * Check if {@code Preferredproperty} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasPreferredproperty( Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}

     /**
     * Get all values of property {@code Preferredproperty} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllPreferredproperty_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREFERREDPROPERTY);
	}

    /**
     * Get all values of property {@code Preferredproperty} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllPreferredproperty_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFERREDPROPERTY, Node.class);
	}

    /**
     * Get all values of property {@code Preferredproperty} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllPreferredproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREFERREDPROPERTY);
	}

    /**
     * Get all values of property {@code Preferredproperty} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllPreferredproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREFERREDPROPERTY, Node.class);
	}
 
    /**
     * Get all values of property {@code Preferredproperty}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllPreferredproperty(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREFERREDPROPERTY, Thing1.class);
	}

    /**
     * Get all values of property {@code Preferredproperty} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllPreferredproperty_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFERREDPROPERTY, Thing1.class);
	}

    /**
     * Get all values of property {@code Preferredproperty}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllPreferredproperty() {
		return Base.getAll(this.model, this.getResource(), PREFERREDPROPERTY, Thing1.class);
	}

    /**
     * Get all values of property {@code Preferredproperty} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllPreferredproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), PREFERREDPROPERTY, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Preferredproperty} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addPreferredproperty(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, PREFERREDPROPERTY, value);
	}

    /**
     * Adds a value to property {@code Preferredproperty} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addPreferredproperty(Node value) {
		Base.add(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
    /**
     * Adds a value to property {@code Preferredproperty} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addPreferredproperty(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, PREFERREDPROPERTY, value);
	}

    /**
     * Adds a value to property {@code Preferredproperty} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addPreferredproperty(Thing1 value) {
		Base.add(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
  

    /**
     * Sets a value of property {@code Preferredproperty} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setPreferredproperty(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, PREFERREDPROPERTY, value);
	}

    /**
     * Sets a value of property {@code Preferredproperty} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setPreferredproperty(Node value) {
		Base.set(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
    /**
     * Sets a value of property {@code Preferredproperty} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setPreferredproperty(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, PREFERREDPROPERTY, value);
	}

    /**
     * Sets a value of property {@code Preferredproperty} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setPreferredproperty(Thing1 value) {
		Base.set(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
  


    /**
     * Removes a value of property {@code Preferredproperty} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removePreferredproperty(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, PREFERREDPROPERTY, value);
	}

    /**
     * Removes a value of property {@code Preferredproperty} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removePreferredproperty(Node value) {
		Base.remove(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
    /**
     * Removes a value of property {@code Preferredproperty} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removePreferredproperty(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, PREFERREDPROPERTY, value);
	}

    /**
     * Removes a value of property {@code Preferredproperty} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removePreferredproperty(Thing1 value) {
		Base.remove(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
  
    /**
     * Removes all values of property {@code Preferredproperty}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllPreferredproperty(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREFERREDPROPERTY);
	}

    /**
     * Removes all values of property {@code Preferredproperty}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllPreferredproperty() {
		Base.removeAll(this.model, this.getResource(), PREFERREDPROPERTY);
	}
     /**
     * Check if {@code Propertytosimplify} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasPropertytosimplify(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, PROPERTYTOSIMPLIFY);
	}

    /**
     * Check if {@code Propertytosimplify} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasPropertytosimplify() {
		return Base.has(this.model, this.getResource(), PROPERTYTOSIMPLIFY);
	}

    /**
     * Check if {@code Propertytosimplify} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasPropertytosimplify(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, PROPERTYTOSIMPLIFY, value);
	}

    /**
     * Check if {@code Propertytosimplify} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasPropertytosimplify( Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROPERTYTOSIMPLIFY, value);
	}

     /**
     * Get all values of property {@code Propertytosimplify} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllPropertytosimplify_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROPERTYTOSIMPLIFY);
	}

    /**
     * Get all values of property {@code Propertytosimplify} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllPropertytosimplify_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTYTOSIMPLIFY, Node.class);
	}

    /**
     * Get all values of property {@code Propertytosimplify} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllPropertytosimplify_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROPERTYTOSIMPLIFY);
	}

    /**
     * Get all values of property {@code Propertytosimplify} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllPropertytosimplify_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTYTOSIMPLIFY, Node.class);
	}
 
    /**
     * Get all values of property {@code Propertytosimplify}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllPropertytosimplify(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROPERTYTOSIMPLIFY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Propertytosimplify} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllPropertytosimplify_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTYTOSIMPLIFY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Propertytosimplify}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllPropertytosimplify() {
		return Base.getAll(this.model, this.getResource(), PROPERTYTOSIMPLIFY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property {@code Propertytosimplify} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllPropertytosimplify_as() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTYTOSIMPLIFY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

 
    /**
     * Adds a value to property {@code Propertytosimplify} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addPropertytosimplify(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, PROPERTYTOSIMPLIFY, value);
	}

    /**
     * Adds a value to property {@code Propertytosimplify} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addPropertytosimplify(Node value) {
		Base.add(this.model, this.getResource(), PROPERTYTOSIMPLIFY, value);
	}
    /**
     * Adds a value to property {@code Propertytosimplify} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addPropertytosimplify(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, PROPERTYTOSIMPLIFY, value);
	}

    /**
     * Adds a value to property {@code Propertytosimplify} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addPropertytosimplify(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), PROPERTYTOSIMPLIFY, value);
	}
  

    /**
     * Sets a value of property {@code Propertytosimplify} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setPropertytosimplify(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, PROPERTYTOSIMPLIFY, value);
	}

    /**
     * Sets a value of property {@code Propertytosimplify} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setPropertytosimplify(Node value) {
		Base.set(this.model, this.getResource(), PROPERTYTOSIMPLIFY, value);
	}
    /**
     * Sets a value of property {@code Propertytosimplify} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setPropertytosimplify(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, PROPERTYTOSIMPLIFY, value);
	}

    /**
     * Sets a value of property {@code Propertytosimplify} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setPropertytosimplify(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), PROPERTYTOSIMPLIFY, value);
	}
  


    /**
     * Removes a value of property {@code Propertytosimplify} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removePropertytosimplify(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, PROPERTYTOSIMPLIFY, value);
	}

    /**
     * Removes a value of property {@code Propertytosimplify} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removePropertytosimplify(Node value) {
		Base.remove(this.model, this.getResource(), PROPERTYTOSIMPLIFY, value);
	}
    /**
     * Removes a value of property {@code Propertytosimplify} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removePropertytosimplify(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, PROPERTYTOSIMPLIFY, value);
	}

    /**
     * Removes a value of property {@code Propertytosimplify} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Property}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removePropertytosimplify(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), PROPERTYTOSIMPLIFY, value);
	}
  
    /**
     * Removes all values of property {@code Propertytosimplify}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllPropertytosimplify(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROPERTYTOSIMPLIFY);
	}

    /**
     * Removes all values of property {@code Propertytosimplify}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllPropertytosimplify() {
		Base.removeAll(this.model, this.getResource(), PROPERTYTOSIMPLIFY);
	}
 }