/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) on 17.08.15 19:14
 */
package org.purl.rvl.java.gen.viso.graphic;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * Comment from schema: There is also a simple binary version of this relation defined as a property. In contrast this n-ary version should allow the definition of a (prefrerred) attachment relation and relative position.
 *
 * This class manages access to these properties:
 * <ul>
 *   <li>LabelingattachedBy</li>
 *   <li>Labelingbase</li>
 *   <li>Labelinglabel</li>
 *   <li>Labelingposition</li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 17.08.15 19:14
 */
public class Labeling extends Object_to_ObjectRelation {

    private static final long serialVersionUID = -8011158858982154563L;

    /** http://purl.org/viso/graphic/Labeling_Relation */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/viso/graphic/Labeling_Relation", false);

    /** http://purl.org/viso/graphic/labeling_attachedBy */
	public static final URI LABELINGATTACHEDBY = new URIImpl("http://purl.org/viso/graphic/labeling_attachedBy", false);

    /** http://purl.org/viso/graphic/labeling_base */
	public static final URI LABELINGBASE = new URIImpl("http://purl.org/viso/graphic/labeling_base", false);

    /** http://purl.org/viso/graphic/labeling_label */
	public static final URI LABELINGLABEL = new URIImpl("http://purl.org/viso/graphic/labeling_label", false);

    /** http://purl.org/viso/graphic/labeling_position */
	public static final URI LABELINGPOSITION = new URIImpl("http://purl.org/viso/graphic/labeling_position", false);

    /**
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/viso/graphic/labeling_attachedBy", false),
      new URIImpl("http://purl.org/viso/graphic/labeling_base", false),
      new URIImpl("http://purl.org/viso/graphic/labeling_label", false),
      new URIImpl("http://purl.org/viso/graphic/labeling_position", false)
    };


	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected Labeling (Model model, URI classURI, Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2]
	 */
	public Labeling (Model model, Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7]
	 */
	public Labeling (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8]
	 */
	public Labeling (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9]
	 */
	public Labeling (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Labeling or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0]
	 */
	public static Labeling getInstance(Model model, Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Labeling.class);
	}

	/**
	 * Create a new instance of this class in the model.
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/viso/graphic/Labeling_Relation).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1]
	 */
	public static void createInstance(Model model, Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2]
	 */
	public static boolean hasInstance(Model model, Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3]
	 */
	public static ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as]
	 */
	public static ReactorResult<? extends Labeling> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Labeling.class );
	}

    /**
	 * Remove triple {@code (this, rdf:type, Labeling)} from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4]
	 */
	public static void deleteInstance(Model model, Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class5]
	 */
	public static void deleteAllProperties(Model model,	Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Labeledwith' to this Labeling instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllLabeledwith_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.LABELEDWITH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Labeledwith' to this Labeling instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllLabeledwith_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.LABELEDWITH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Labeledwith' to this Labeling instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllLabeledwith_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.LABELEDWITH, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Labels' to this Labeling instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllLabels_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.LABELS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Labels' to this Labeling instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllLabels_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.LABELS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Labels' to this Labeling instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllLabels_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.LABELS, objectValue, Resource.class);
	}



    /**
     * Check if {@code LabelingattachedBy} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLabelingattachedBy(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LABELINGATTACHEDBY);
	}

    /**
     * Check if {@code LabelingattachedBy} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLabelingattachedBy() {
		return Base.has(this.model, this.getResource(), LABELINGATTACHEDBY);
	}

    /**
     * Check if {@code LabelingattachedBy} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLabelingattachedBy(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LABELINGATTACHEDBY, value);
	}

    /**
     * Check if {@code LabelingattachedBy} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLabelingattachedBy( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LABELINGATTACHEDBY, value);
	}

     /**
     * Get all values of property {@code LabelingattachedBy} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLabelingattachedBy_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LABELINGATTACHEDBY);
	}

    /**
     * Get all values of property {@code LabelingattachedBy} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLabelingattachedBy_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELINGATTACHEDBY, Node.class);
	}

    /**
     * Get all values of property {@code LabelingattachedBy} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLabelingattachedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LABELINGATTACHEDBY);
	}

    /**
     * Get all values of property {@code LabelingattachedBy} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLabelingattachedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LABELINGATTACHEDBY, Node.class);
	}
 
    /**
     * Get all values of property {@code LabelingattachedBy}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<GraphicObjectToObjectRelation> getAllLabelingattachedBy(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LABELINGATTACHEDBY, GraphicObjectToObjectRelation.class);
	}

    /**
     * Get all values of property {@code LabelingattachedBy} as a ReactorResult of {@linkplain GraphicObjectToObjectRelation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<GraphicObjectToObjectRelation> getAllLabelingattachedBy_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELINGATTACHEDBY, GraphicObjectToObjectRelation.class);
	}

    /**
     * Get all values of property {@code LabelingattachedBy}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<GraphicObjectToObjectRelation> getAllLabelingattachedBy() {
		return Base.getAll(this.model, this.getResource(), LABELINGATTACHEDBY, GraphicObjectToObjectRelation.class);
	}

    /**
     * Get all values of property {@code LabelingattachedBy} as a ReactorResult of {@linkplain GraphicObjectToObjectRelation}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<GraphicObjectToObjectRelation> getAllLabelingattachedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), LABELINGATTACHEDBY, GraphicObjectToObjectRelation.class);
	}

 
    /**
     * Adds a value to property {@code LabelingattachedBy} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLabelingattachedBy(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LABELINGATTACHEDBY, value);
	}

    /**
     * Adds a value to property {@code LabelingattachedBy} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLabelingattachedBy(Node value) {
		Base.add(this.model, this.getResource(), LABELINGATTACHEDBY, value);
	}
    /**
     * Adds a value to property {@code LabelingattachedBy} from an instance of {@linkplain GraphicObjectToObjectRelation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLabelingattachedBy(Model model, Resource instanceResource, GraphicObjectToObjectRelation value) {
		Base.add(model, instanceResource, LABELINGATTACHEDBY, value);
	}

    /**
     * Adds a value to property {@code LabelingattachedBy} from an instance of {@linkplain GraphicObjectToObjectRelation}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLabelingattachedBy(GraphicObjectToObjectRelation value) {
		Base.add(this.model, this.getResource(), LABELINGATTACHEDBY, value);
	}
  

    /**
     * Sets a value of property {@code LabelingattachedBy} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLabelingattachedBy(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LABELINGATTACHEDBY, value);
	}

    /**
     * Sets a value of property {@code LabelingattachedBy} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLabelingattachedBy(Node value) {
		Base.set(this.model, this.getResource(), LABELINGATTACHEDBY, value);
	}
    /**
     * Sets a value of property {@code LabelingattachedBy} from an instance of {@linkplain GraphicObjectToObjectRelation}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLabelingattachedBy(Model model, Resource instanceResource, GraphicObjectToObjectRelation value) {
		Base.set(model, instanceResource, LABELINGATTACHEDBY, value);
	}

    /**
     * Sets a value of property {@code LabelingattachedBy} from an instance of {@linkplain GraphicObjectToObjectRelation}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLabelingattachedBy(GraphicObjectToObjectRelation value) {
		Base.set(this.model, this.getResource(), LABELINGATTACHEDBY, value);
	}
  


    /**
     * Removes a value of property {@code LabelingattachedBy} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLabelingattachedBy(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LABELINGATTACHEDBY, value);
	}

    /**
     * Removes a value of property {@code LabelingattachedBy} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLabelingattachedBy(Node value) {
		Base.remove(this.model, this.getResource(), LABELINGATTACHEDBY, value);
	}
    /**
     * Removes a value of property {@code LabelingattachedBy} given as an instance of {@linkplain GraphicObjectToObjectRelation}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLabelingattachedBy(Model model, Resource instanceResource, GraphicObjectToObjectRelation value) {
		Base.remove(model, instanceResource, LABELINGATTACHEDBY, value);
	}

    /**
     * Removes a value of property {@code LabelingattachedBy} given as an instance of {@linkplain GraphicObjectToObjectRelation}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLabelingattachedBy(GraphicObjectToObjectRelation value) {
		Base.remove(this.model, this.getResource(), LABELINGATTACHEDBY, value);
	}
  
    /**
     * Removes all values of property {@code LabelingattachedBy}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLabelingattachedBy(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LABELINGATTACHEDBY);
	}

    /**
     * Removes all values of property {@code LabelingattachedBy}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLabelingattachedBy() {
		Base.removeAll(this.model, this.getResource(), LABELINGATTACHEDBY);
	}
     /**
     * Check if {@code Labelingbase} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLabelingbase(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LABELINGBASE);
	}

    /**
     * Check if {@code Labelingbase} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLabelingbase() {
		return Base.has(this.model, this.getResource(), LABELINGBASE);
	}

    /**
     * Check if {@code Labelingbase} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLabelingbase(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LABELINGBASE, value);
	}

    /**
     * Check if {@code Labelingbase} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLabelingbase( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LABELINGBASE, value);
	}

     /**
     * Get all values of property {@code Labelingbase} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLabelingbase_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LABELINGBASE);
	}

    /**
     * Get all values of property {@code Labelingbase} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLabelingbase_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELINGBASE, Node.class);
	}

    /**
     * Get all values of property {@code Labelingbase} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLabelingbase_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LABELINGBASE);
	}

    /**
     * Get all values of property {@code Labelingbase} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLabelingbase_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LABELINGBASE, Node.class);
	}
 
    /**
     * Get all values of property {@code Labelingbase}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllLabelingbase(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LABELINGBASE, Thing1.class);
	}

    /**
     * Get all values of property {@code Labelingbase} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllLabelingbase_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELINGBASE, Thing1.class);
	}

    /**
     * Get all values of property {@code Labelingbase}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllLabelingbase() {
		return Base.getAll(this.model, this.getResource(), LABELINGBASE, Thing1.class);
	}

    /**
     * Get all values of property {@code Labelingbase} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllLabelingbase_as() {
		return Base.getAll_as(this.model, this.getResource(), LABELINGBASE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Labelingbase} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLabelingbase(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LABELINGBASE, value);
	}

    /**
     * Adds a value to property {@code Labelingbase} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLabelingbase(Node value) {
		Base.add(this.model, this.getResource(), LABELINGBASE, value);
	}
    /**
     * Adds a value to property {@code Labelingbase} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLabelingbase(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, LABELINGBASE, value);
	}

    /**
     * Adds a value to property {@code Labelingbase} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLabelingbase(Thing1 value) {
		Base.add(this.model, this.getResource(), LABELINGBASE, value);
	}
  

    /**
     * Sets a value of property {@code Labelingbase} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLabelingbase(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LABELINGBASE, value);
	}

    /**
     * Sets a value of property {@code Labelingbase} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLabelingbase(Node value) {
		Base.set(this.model, this.getResource(), LABELINGBASE, value);
	}
    /**
     * Sets a value of property {@code Labelingbase} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLabelingbase(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, LABELINGBASE, value);
	}

    /**
     * Sets a value of property {@code Labelingbase} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLabelingbase(Thing1 value) {
		Base.set(this.model, this.getResource(), LABELINGBASE, value);
	}
  


    /**
     * Removes a value of property {@code Labelingbase} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLabelingbase(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LABELINGBASE, value);
	}

    /**
     * Removes a value of property {@code Labelingbase} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLabelingbase(Node value) {
		Base.remove(this.model, this.getResource(), LABELINGBASE, value);
	}
    /**
     * Removes a value of property {@code Labelingbase} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLabelingbase(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, LABELINGBASE, value);
	}

    /**
     * Removes a value of property {@code Labelingbase} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLabelingbase(Thing1 value) {
		Base.remove(this.model, this.getResource(), LABELINGBASE, value);
	}
  
    /**
     * Removes all values of property {@code Labelingbase}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLabelingbase(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LABELINGBASE);
	}

    /**
     * Removes all values of property {@code Labelingbase}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLabelingbase() {
		Base.removeAll(this.model, this.getResource(), LABELINGBASE);
	}
     /**
     * Check if {@code Labelinglabel} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLabelinglabel(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LABELINGLABEL);
	}

    /**
     * Check if {@code Labelinglabel} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLabelinglabel() {
		return Base.has(this.model, this.getResource(), LABELINGLABEL);
	}

    /**
     * Check if {@code Labelinglabel} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLabelinglabel(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LABELINGLABEL, value);
	}

    /**
     * Check if {@code Labelinglabel} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLabelinglabel( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LABELINGLABEL, value);
	}

     /**
     * Get all values of property {@code Labelinglabel} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLabelinglabel_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LABELINGLABEL);
	}

    /**
     * Get all values of property {@code Labelinglabel} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLabelinglabel_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELINGLABEL, Node.class);
	}

    /**
     * Get all values of property {@code Labelinglabel} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLabelinglabel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LABELINGLABEL);
	}

    /**
     * Get all values of property {@code Labelinglabel} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLabelinglabel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LABELINGLABEL, Node.class);
	}
 
    /**
     * Get all values of property {@code Labelinglabel}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllLabelinglabel(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LABELINGLABEL, Thing1.class);
	}

    /**
     * Get all values of property {@code Labelinglabel} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllLabelinglabel_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELINGLABEL, Thing1.class);
	}

    /**
     * Get all values of property {@code Labelinglabel}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllLabelinglabel() {
		return Base.getAll(this.model, this.getResource(), LABELINGLABEL, Thing1.class);
	}

    /**
     * Get all values of property {@code Labelinglabel} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllLabelinglabel_as() {
		return Base.getAll_as(this.model, this.getResource(), LABELINGLABEL, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Labelinglabel} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLabelinglabel(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LABELINGLABEL, value);
	}

    /**
     * Adds a value to property {@code Labelinglabel} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLabelinglabel(Node value) {
		Base.add(this.model, this.getResource(), LABELINGLABEL, value);
	}
    /**
     * Adds a value to property {@code Labelinglabel} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLabelinglabel(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, LABELINGLABEL, value);
	}

    /**
     * Adds a value to property {@code Labelinglabel} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLabelinglabel(Thing1 value) {
		Base.add(this.model, this.getResource(), LABELINGLABEL, value);
	}
  

    /**
     * Sets a value of property {@code Labelinglabel} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLabelinglabel(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LABELINGLABEL, value);
	}

    /**
     * Sets a value of property {@code Labelinglabel} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLabelinglabel(Node value) {
		Base.set(this.model, this.getResource(), LABELINGLABEL, value);
	}
    /**
     * Sets a value of property {@code Labelinglabel} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLabelinglabel(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, LABELINGLABEL, value);
	}

    /**
     * Sets a value of property {@code Labelinglabel} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLabelinglabel(Thing1 value) {
		Base.set(this.model, this.getResource(), LABELINGLABEL, value);
	}
  


    /**
     * Removes a value of property {@code Labelinglabel} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLabelinglabel(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LABELINGLABEL, value);
	}

    /**
     * Removes a value of property {@code Labelinglabel} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLabelinglabel(Node value) {
		Base.remove(this.model, this.getResource(), LABELINGLABEL, value);
	}
    /**
     * Removes a value of property {@code Labelinglabel} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLabelinglabel(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, LABELINGLABEL, value);
	}

    /**
     * Removes a value of property {@code Labelinglabel} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLabelinglabel(Thing1 value) {
		Base.remove(this.model, this.getResource(), LABELINGLABEL, value);
	}
  
    /**
     * Removes all values of property {@code Labelinglabel}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLabelinglabel(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LABELINGLABEL);
	}

    /**
     * Removes all values of property {@code Labelinglabel}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLabelinglabel() {
		Base.removeAll(this.model, this.getResource(), LABELINGLABEL);
	}
     /**
     * Check if {@code Labelingposition} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasLabelingposition(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, LABELINGPOSITION);
	}

    /**
     * Check if {@code Labelingposition} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasLabelingposition() {
		return Base.has(this.model, this.getResource(), LABELINGPOSITION);
	}

    /**
     * Check if {@code Labelingposition} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasLabelingposition(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, LABELINGPOSITION, value);
	}

    /**
     * Check if {@code Labelingposition} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasLabelingposition( Node value ) {
		return Base.hasValue(this.model, this.getResource(), LABELINGPOSITION, value);
	}

     /**
     * Get all values of property {@code Labelingposition} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllLabelingposition_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LABELINGPOSITION);
	}

    /**
     * Get all values of property {@code Labelingposition} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllLabelingposition_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELINGPOSITION, Node.class);
	}

    /**
     * Get all values of property {@code Labelingposition} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllLabelingposition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LABELINGPOSITION);
	}

    /**
     * Get all values of property {@code Labelingposition} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllLabelingposition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LABELINGPOSITION, Node.class);
	}
 
    /**
     * Get all values of property {@code Labelingposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllLabelingposition(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, LABELINGPOSITION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Labelingposition} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllLabelingposition_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABELINGPOSITION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Labelingposition}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllLabelingposition() {
		return Base.getAll(this.model, this.getResource(), LABELINGPOSITION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code Labelingposition} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllLabelingposition_as() {
		return Base.getAll_as(this.model, this.getResource(), LABELINGPOSITION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

 
    /**
     * Adds a value to property {@code Labelingposition} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addLabelingposition(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, LABELINGPOSITION, value);
	}

    /**
     * Adds a value to property {@code Labelingposition} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addLabelingposition(Node value) {
		Base.add(this.model, this.getResource(), LABELINGPOSITION, value);
	}
    /**
     * Adds a value to property {@code Labelingposition} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addLabelingposition(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, LABELINGPOSITION, value);
	}

    /**
     * Adds a value to property {@code Labelingposition} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addLabelingposition(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), LABELINGPOSITION, value);
	}
  

    /**
     * Sets a value of property {@code Labelingposition} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setLabelingposition(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, LABELINGPOSITION, value);
	}

    /**
     * Sets a value of property {@code Labelingposition} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setLabelingposition(Node value) {
		Base.set(this.model, this.getResource(), LABELINGPOSITION, value);
	}
    /**
     * Sets a value of property {@code Labelingposition} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setLabelingposition(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, LABELINGPOSITION, value);
	}

    /**
     * Sets a value of property {@code Labelingposition} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setLabelingposition(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), LABELINGPOSITION, value);
	}
  


    /**
     * Removes a value of property {@code Labelingposition} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeLabelingposition(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, LABELINGPOSITION, value);
	}

    /**
     * Removes a value of property {@code Labelingposition} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeLabelingposition(Node value) {
		Base.remove(this.model, this.getResource(), LABELINGPOSITION, value);
	}
    /**
     * Removes a value of property {@code Labelingposition} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeLabelingposition(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, LABELINGPOSITION, value);
	}

    /**
     * Removes a value of property {@code Labelingposition} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeLabelingposition(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), LABELINGPOSITION, value);
	}
  
    /**
     * Removes all values of property {@code Labelingposition}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllLabelingposition(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, LABELINGPOSITION);
	}

    /**
     * Removes all values of property {@code Labelingposition}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllLabelingposition() {
		Base.removeAll(this.model, this.getResource(), LABELINGPOSITION);
	}
 }