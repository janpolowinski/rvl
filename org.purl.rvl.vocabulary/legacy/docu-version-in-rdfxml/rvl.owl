<?xml version="1.0"?>
<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:skos="http://www.w3.org/2004/02/skos/core#"
    xmlns:event="http://purl.org/NET/c4dm/event.owl#"
    xmlns:bibo="http://purl.org/ontology/bibo/"
    xmlns="http://purl.org/rvl/"
    xmlns:swstatus="http://www.w3.org/2003/06/sw-vocab-status/ns#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:dct="http://purl.org/dc/terms/"
    xmlns:viso-graphic="http://purl.org/viso/graphic/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xml:base="http://purl.org/rvl/">
  <owl:Ontology rdf:about="">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >RDF Visualization Language (RVL)</rdfs:label>
    <owl:imports rdf:resource="http://purl.org/viso/graphic/"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >RVL is a declarative language that allows to specify a mapping from RDF(S)/OWL concepts to visual means that are defined in the Visualisation Ontology VISO (http://purl.org/viso/). The syntax is based on RDFS, while the semantics are given by means of SPIN rules.  

RVL was developed in the SemVis project by Jan Polowinski.

&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/rvl_class_diagram.png"&gt;

&lt;h3&gt;Overview of Datatypes used in RVL&lt;/h3&gt;
&lt;b&gt;MissingSourceValueHandlingType:&lt;/b&gt; Hide, Ignore, Missing (default), Neutral, Average
&lt;b&gt;MissingValueMappingHandlingType:&lt;/b&gt; Calculate (default), Hide, Neutral, Ignore, No mapping, Average
&lt;b&gt;NeutralValueHandlingType:&lt;/b&gt; Average, Style
&lt;b&gt;OutOfBoundHandlingType:&lt;/b&gt; Cut (default), Clamp
&lt;b&gt;ScaleTransformationType:&lt;/b&gt; Linear (default), Logarithmic

&lt;!--&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/datatypes_rvl.png"/&gt;--&gt;</dct:description>
  </owl:Ontology>
  <rdfs:Datatype rdf:about="http://www.w3.org/1999/02/22-rdf-syntax-ns#Bag">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdfs:Datatype>
  <rdfs:Datatype rdf:about="http://purl.org/rvl/sparqlSelector">
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >SPARQL selector</rdfs:label>
    <rdfs:subClassOf>
      <owl:Class rdf:about="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    </rdfs:subClassOf>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A string representing a SPARQL query</dct:description>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </rdfs:Datatype>
  <rdfs:Datatype rdf:about="http://purl.org/rvl/fslSelector">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >FSL is the selector language used in Fresnel: http://www.w3.org/2005/04/fresnel-info/fsl/</rdfs:comment>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A string representing a FSL path expression</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >FSL selector</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
  </rdfs:Datatype>
  <rdfs:Class rdf:about="http://purl.org/rvl/ScaleTransformationType">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Interpolation value</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
  </rdfs:Class>
  <rdfs:Class rdf:about="http://purl.org/rvl/NeutralValueHandlingType">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Neutral value handling type</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >How is this exactly used?</skos:editorialNote>
  </rdfs:Class>
  <rdfs:Class rdf:about="http://purl.org/rvl/MissingValueMappingHandlingType">
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Missing value mapping handling type</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines how to proceed with entities having a value which is not mapped explicitly by a value mapping. Cf. rvl:missingValueMapping.</dct:description>
  </rdfs:Class>
  <rdfs:Class rdf:about="http://purl.org/rvl/MissingSourceValueHandlingType">
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Missing source value handling type</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines how to proceed with entities having no value for some property which is mapped by a property mapping. Cf. rvl:missingSourceValue.</dct:description>
  </rdfs:Class>
  <rdfs:Class rdf:about="http://purl.org/rvl/OutOfBoundHandlingType">
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Out of bound handling type</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >An option of how to handle the values that are out of bounds of a defined interval.</dct:description>
  </rdfs:Class>
  <owl:Class rdf:about="http://www.w3.org/2000/01/rdf-schema#Container"/>
  <owl:Class rdf:about="http://purl.org/rvl/Simplification">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Simplification</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Abstract super-class of all simplifications. A simplification is a transformation on the source RDF graph with the intention to gain a simpler model by removing redundant information. It is not part of the visual mapping, but a pre-step for this.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:Class>
  <owl:Class rdf:about="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>
  <owl:Class rdf:about="http://purl.org/rvl/ResourceMapping">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >NOTE: Regarding the neccasity of explicity specifying a target graphic attribute: Alternatively, as target values only instances of visual attribute, i.e., named attribute values may be allowed. Or, if also literals should be usable, such as "10.5"^^viso-graphic:heightValue, these datatypes will have to be introduced first! Standard unit ontologies may have to be considered for reuse in this context!

TEMP NOTE: Class mappings (the predecessor of this) are internally processed to PropertyMappings at the moment (in the prototype - rvl2rvl)


TODO: Also a cascading mechanism is needed to determine the winning mapping, when multiple mappings are applicable to a resource.
</skos:editorialNote>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Resource mapping</rdfs:label>
    <rdfs:seeAlso>
      <rdf:Property rdf:about="http://purl.org/rvl/passedTo"/>
    </rdfs:seeAlso>
    <rdfs:seeAlso>
      <rdf:Property rdf:about="http://purl.org/rvl/inheritedBy"/>
    </rdfs:seeAlso>
    <rdfs:subClassOf>
      <owl:Class rdf:about="http://purl.org/rvl/Mapping"/>
    </rdfs:subClassOf>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A convenience mapping. Stands for the frequently needed case of a property mapping of a resources ID (represented by the property "rdf:ID") to a target graphic attribute plus an attached value mapping from a specific source value to a fixed graphic attribute value. It can be used in combination with inheritedBy and passedTo in order to easily transfer the same value to all instances or subclasses of some specific resource.

While the sourceProperty is implicitly clear (the ID), it is necessary to state the target graphic attribute when only a value of a simple data type, is given as a target value. For example take the value "10.5" - is it a height or a width? For the target value viso-graphic:red it is clear that it is a named color value, therefore, the target graphic attribute viso-graphic:color_named can be omitted.

Systems interpreting resource mappings may decide whether to internally transform resource mappings to a property mapping and one (or more) value mappings, or directly process them.</dct:description>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/Mapping">
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The abstract super-class of all mappings. Both PropertyMapping and ValueMapping are sub-classes of Mapping and inherit the property includeInLegend. This way, it can consistantly be defined, whether they should appear in a legend.</dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Mapping</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >add a flag active/inactive</skos:editorialNote>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/NoPropertyValueMapping">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >No-Property-Value-Mapping</rdfs:label>
    <rdfs:subClassOf>
      <owl:Class rdf:about="http://purl.org/rvl/PropertyMapping"/>
    </rdfs:subClassOf>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Behaves like a PropertyMapping, but will apply the defined visual values, when no value for the source property can be found. Since there could always be a value defined in some unknown data set, this is a Closed-World feature.</dct:description>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >This is an approach to model the non-existence mapping (10.1). It could also simply be modelled by using a specific filter for sourceproperty of a propertymapping. This way, not only the non-existence of any property value, but also of specific values was defineable. Also, usually there will be more filters used in combination (e.g. filter to Persons without e-mail-address and mark them red).</skos:editorialNote>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/UnifyWithInverseAndPickOne">
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/inverse_simplification_example.png"&gt;</skos:example>
    <rdfs:subClassOf rdf:resource="http://purl.org/rvl/Simplification"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Unify with inverse and pick one</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Unifies a property and its inverse for the purpose of graphic representation. This is achieved by replacing one of them with the preferred property.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/GraphicAttributeInterval">
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >An interval of graphic values, either defined by literals or ordered resources of type Visual_Attribute.</dct:description>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:allValuesFrom>
          <owl:Class>
            <owl:unionOf rdf:parseType="Collection">
              <owl:Class rdf:about="http://www.w3.org/2000/01/rdf-schema#Literal"/>
              <rdf:Description rdf:about="http://purl.org/viso/graphic/Visual_Attribute"/>
            </owl:unionOf>
          </owl:Class>
        </owl:allValuesFrom>
        <owl:onProperty>
          <rdf:Property rdf:about="http://purl.org/rvl/lowerBoundIncl"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:allValuesFrom>
          <owl:Class>
            <owl:unionOf rdf:parseType="Collection">
              <owl:Class rdf:about="http://www.w3.org/2000/01/rdf-schema#Literal"/>
              <rdf:Description rdf:about="http://purl.org/viso/graphic/Visual_Attribute"/>
            </owl:unionOf>
          </owl:Class>
        </owl:allValuesFrom>
        <owl:onProperty>
          <rdf:Property rdf:about="http://purl.org/rvl/upperBoundIncl"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:allValuesFrom>
          <owl:Class>
            <owl:unionOf rdf:parseType="Collection">
              <owl:Class rdf:about="http://www.w3.org/2000/01/rdf-schema#Literal"/>
              <rdf:Description rdf:about="http://purl.org/viso/graphic/Visual_Attribute"/>
            </owl:unionOf>
          </owl:Class>
        </owl:allValuesFrom>
        <owl:onProperty>
          <rdf:Property rdf:about="http://purl.org/rvl/lowerBoundExcl"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:allValuesFrom>
          <owl:Class>
            <owl:unionOf rdf:parseType="Collection">
              <owl:Class rdf:about="http://www.w3.org/2000/01/rdf-schema#Literal"/>
              <rdf:Description rdf:about="http://purl.org/viso/graphic/Visual_Attribute"/>
            </owl:unionOf>
          </owl:Class>
        </owl:allValuesFrom>
        <owl:onProperty>
          <rdf:Property rdf:about="http://purl.org/rvl/upperBoundExcl"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Graphic attribute interval</rdfs:label>
    <rdfs:subClassOf>
      <owl:Class rdf:about="http://purl.org/rvl/Interval"/>
    </rdfs:subClassOf>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/viso/graphic/Visual_Value_Container"/>
  <owl:Class rdf:about="http://purl.org/rvl/N-AryRelation">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >This could be reused from another more general vocabulary if available. Also VISO requires such a class. Alternatively it could be deleted, since it has no function besides being a super-class.</skos:editorialNote>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >N-ary relation</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A class to be used in modelling the N-ary relation design pattern. For example, the submapping relation is n-ary.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unimportant</swstatus:term_status>
  </owl:Class>
  <owl:Class rdf:about="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
  <owl:Class rdf:about="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  <owl:Class rdf:about="http://purl.org/rvl/SourceValueInterval">
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The setting of bounds for the source values is optional. The properties lowerBound and upperBound define the span of source values which are mapped. Other values, outside this span, are either cut or set to the bounding values, depending on the value for the property sourceValuesOutOfBounds.

If no bounds are defined, the span of source values should be calculated from all available source values.

Please note: The span of source values can also be set LARGER than the span implicitly created by the existing values. This can be used to enlarge the domain of the mapping, e.g. for enforcing a domain to important timespans such as 01.01.1900 - 31.12.2000.</dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Source value interval</rdfs:label>
    <rdfs:subClassOf>
      <owl:Class rdf:about="http://purl.org/rvl/Interval"/>
    </rdfs:subClassOf>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/RemoveTransitiveHull">
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/transitive_simplification_example.png"&gt;</skos:example>
    <rdfs:subClassOf rdf:resource="http://purl.org/rvl/Simplification"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Remove transitive hull</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Simplifies the RDF graph by removing all edges that represent relations which are already implicitly given, because the relation is transitive.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/SubMappingRelation">
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Creates an n-ary relation between a base mapping and a sub-mapping, which is applied on the graphic object playing the role defined by rvl:subMapping-onRole. This allows for reusing existing mappings as sub-mappings. Additionally to the role, also the resource may be defined, the sub-mapping should work with. By default this is the object of the source-data-triple mapped by the "super-mapping", but it may be changed to the predicate or subject by using rvl:subMapping-onTriplePart.

Using sub-mappings has the following effects/benefits as opposed to defining a new standalone mapping (simultaneous composition):
&lt;ul&gt;&lt;li&gt;Sub-mappings refine the graphic elements the super-mapping has worked on (each role can be referenced)&lt;/li&gt;
     &lt;li&gt;Sub-mappings always work on the resources already selected by the super-mapping - complex filter settings do not need to be defined once again.&lt;/li&gt;
     &lt;li&gt;Sub-mappings may create new graphic objects&lt;/li&gt;&lt;/ul&gt;</dct:description>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Example of a sub-mapping, determining the color of the connector that has been created by a mapping to Linking.

&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/mapping_ex_det_subm_on_connector.png"&gt;</skos:example>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >SUBGRAPHICS: Submappings may also be attached to (constant/static) subgraphics. Here it has to be clarified how the source data can be referenced easily.

TODO: REUSE: How well works reusing mappings with submappings?

TODO PROTOTYPE: Not used in most examples at the moment. Instead hasSubMapping is simply used directly between mappings. However, this simplification, does not allow to reuse mappings in different situations, since onRole is fix and cannot be changed for each use of the mapping in different contexts. The same problem as with onRole applies to selecting the triple part to work on rdf:subject/predicate/object.</skos:editorialNote>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Sub-mapping relation</rdfs:label>
    <rdfs:subClassOf rdf:resource="http://purl.org/rvl/N-AryRelation"/>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onClass rdf:resource="http://purl.org/rvl/Mapping"/>
        <owl:onProperty>
          <owl:FunctionalProperty rdf:about="http://purl.org/rvl/subMapping-mapping"/>
        </owl:onProperty>
        <owl:qualifiedCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"
        >1</owl:qualifiedCardinality>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onClass rdf:resource="http://purl.org/viso/graphic/SyntacticRole"/>
        <owl:onProperty>
          <owl:FunctionalProperty rdf:about="http://purl.org/rvl/subMapping-onRole"/>
        </owl:onProperty>
        <owl:qualifiedCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"
        >1</owl:qualifiedCardinality>
      </owl:Restriction>
    </rdfs:subClassOf>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/PropertyToGraphicObjToObjRelationMapping">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Without this extra class some attributes of mappings would have to be set in dependency on the type of the target graphic relation. 

In contrast to PropertyToGraphicAttribute mappings, which make the language construct of Value Mappings a necessity, for P2GOTOR mappings it would have been sufficient to have source filters on the property mapping level.</skos:editorialNote>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetObjToObjRelation"/>
        </owl:onProperty>
        <owl:qualifiedCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"
        >1</owl:qualifiedCardinality>
        <owl:onClass rdf:resource="http://purl.org/viso/graphic/GraphicObjectToObjectRelation"/>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Property-to-Graphic-Object-to-Object-Relation Mapping</rdfs:label>
    <rdfs:subClassOf>
      <owl:Class rdf:about="http://purl.org/rvl/PropertyMapping"/>
    </rdfs:subClassOf>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A Property-to-Graphic-Object-to-Object-Relation (P2GOTOR) mapping maps (domain) properties to relative graphic object-to-object relations.</dct:description>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetObjToObjRelation"/>
        </owl:onProperty>
        <owl:allValuesFrom rdf:resource="http://purl.org/viso/graphic/GraphicObjectToObjectRelation"/>
      </owl:Restriction>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/PropertyToGraphicAttributeMapping">
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A Property-to-Graphic-Attribute Mapping (P2GAM) draws a general connection between a (domain) property and the graphic attribute. The interesting part remains the mapping of the values, which is left to &lt;a href="#http://purl.org/rvl/ValueMapping"&gt;Value mappings&lt;/a&gt; (VM). The default implicit VM, which is assumed, when no other VMs are explicitly defined, maps all source values to all target values. For details, refer to the description of VM.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Property-to-Graphic-Attribute Mapping</rdfs:label>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:FunctionalProperty rdf:about="http://purl.org/rvl/targetAttribute"/>
        </owl:onProperty>
        <owl:qualifiedCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"
        >1</owl:qualifiedCardinality>
        <owl:onClass rdf:resource="http://purl.org/viso/graphic/GraphicAttribute"/>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Class rdf:about="http://purl.org/rvl/PropertyMapping"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:FunctionalProperty rdf:about="http://purl.org/rvl/targetAttribute"/>
        </owl:onProperty>
        <owl:allValuesFrom rdf:resource="http://purl.org/viso/graphic/GraphicAttribute"/>
      </owl:Restriction>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/ValueMapping">
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/rvl_class_diagram_value_mappings.png"/&gt;

Value mappings (VM) define which source values should be mapped to which target values and optionally provide further information on how to do this mapping of values exactly. That way they are a supplement to Property-to-Graphic-Attribute Mappings (P2GAM), which only draw the general connection between the source relation and the target graphic relation. If no VM is defined for a P2GAM, a single default VM with default settings is used, which basically maps all the available source values to all the available target values.

&lt;ul&gt;
&lt;li&gt;A special case of a VM is a value mapping which requires no calculation and maps exactly one source value to exactly one target value. &lt;/li&gt;
&lt;li&gt;VMs can be seen as a shorthand for simple object filters on the object (value) side of a statement.&lt;/li&gt;
&lt;li&gt;Each value mapping may have its own settings like discreteStepCount.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Selectors&lt;/h3&gt;

&lt;h4&gt;Selecting Intervals (Ranges)&lt;/h4&gt;
VMs may be constrained by creating an &lt;a href="#http://purl.org/rvl/Interval"&gt;Interval&lt;/a&gt; of values defining a minimum and/or maximum value using &lt;a href="#http://purl.org/rvl/sourceValueInterval"&gt;sourceValueInterval&lt;/a&gt;. The same can be done for graphic attributes using &lt;a href="#http://purl.org/rvl/targetValueInterval"&gt;targetValueInterval&lt;/a&gt;.

&lt;h4&gt;Selecting Ordered Sets, Lists and Unordered Sets&lt;/h4&gt;
(Existing) ordered sets of ordered source values can be selected using &lt;a href="#http://purl.org/rvl/sourceValueOrderedSet"&gt;sourceValueOrderedSet&lt;/a&gt;. &lt;br/&gt; (Existing) unordered sets can be selected using &lt;a href="#http://purl.org/rvl/sourceValueSet"&gt;sourceValueSet&lt;/a&gt; or simply by using &lt;a href="#http://purl.org/rvl/sourceValue"&gt;sourceValue&lt;/a&gt; multiple times. All selected values will build an ad-hoc set. &lt;br/&gt;  For the target graphic attribute values the analogeous properties &lt;a href="#http://purl.org/rvl/targetValueOrderedSet"&gt;targetValueOrderedSet&lt;/a&gt;, &lt;a href="#http://purl.org/rvl/targetValueSet"&gt;targetValueSet&lt;/a&gt;, &lt;a href="#http://purl.org/rvl/targetValueList"&gt;targetValueList&lt;/a&gt; and &lt;a href="#http://purl.org/rvl/targetValueCycle"&gt;targetValueCycle&lt;/a&gt; can be used. Refer to the description of these properties on details on how they differ from each other.

&lt;h4&gt;Exclude single source or target values from the mapping&lt;/h4&gt;
When some specific value shall not be handled by the VM, rather than defining a new set of all desired values, we can reuse an existing set or interval and exclude the value in question using &lt;a href="#http://purl.org/rvl/excludeSourceValue"&gt;excludeSourceValue&lt;/a&gt; (resp. &lt;a href="#http://purl.org/rvl/excludeTargetValue"&gt;excludeTargetValue&lt;/a&gt;).

&lt;h4&gt;Complex Source Value Selectors&lt;/h4&gt;
More complex source value selectors can be defined using &lt;a href="#http://purl.org/rvl/sourceFilter"&gt;sourceFilter&lt;/a&gt; which allows for SPARQL and FSL expressions.

&lt;h4&gt;Valid combinations of source/target selectors in a single VM:&lt;/h4&gt;
In a single value mapping, most source selectors are to be used alternatively - only those selecting an (unordered) set of values can be used in combination and also multiple times. The union of all values selected by sourceValueSet and sourceValue will be used as source values. Further potential exceptions to this have not been specified by now for reasons of simplicity. (This applies equally to target selectors).

&lt;h3&gt;Additional mapping parameters&lt;/h3&gt;
Value mappings can store additional information on the desired mapping process. For example the property &lt;a href="#http://purl.org/rvl/discretize"&gt;discretize&lt;/a&gt; and &lt;a href="#http://purl.org/rvl/discreteStepCount"&gt;discreteStepCount&lt;/a&gt; define if and how a discretization of values should be done. Via &lt;a href="#http://purl.org/rvl/scaleTransformation"&gt;scaleTransformation&lt;/a&gt;, the scaling can be changed from linear scale transformation  (default) to a logarithmic one, for example.

&lt;h3&gt;Giving hints on the scale of measurement&lt;/h3&gt;
By default, VMs are performed based on the scale of measurement that can be derived from the source and target properties as well as from the available values. An ordinal or quantitative scale of measurement may be explicitly stated for the source values by using one of the properties &lt;a href="#http://purl.org/rvl/orderSourceValuesBy"&gt;orderSourceValuesBy&lt;/a&gt; resp. &lt;a href="#http://purl.org/rvl/quantifySourceValuesBy"&gt;quantifySourceValuesBy&lt;/a&gt;. Analogeos properties exist to order/quantify the target values.

&lt;h3&gt;Calculation of value mappings / Semantics&lt;/h3&gt;
The figure below gives an overview on the possible combinations between the Scale of measurement (SoM) of source and target values as well as on additional settings that can influence the mapping process. Note that although we allow for selecting continuous source ranges in VM, the RDF resources will always have concrete discrete values!

&lt;h4&gt;SCHEMATIC OVERVIEW OF POSSIBLE MAPPING CASES:&lt;/h4&gt;

&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/source_target_vm_combinations_by_som.png"/&gt;

&lt;h4&gt;PSEUDOCODE:&lt;/h4&gt;

&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/source_target_vm_combinations_by_som_pseudo_code.png"/&gt;

&lt;h3&gt;"Constant values"&lt;/h3&gt;
VM will map any source value to a fixed target value, when no source values are defined (this implicitly means all values are selected) and only 1 target graphic attribute is defined. This can be used to show that there exists a value for this property at all, e.g. by using a specific color or adding some specific label when the property ist set.


&lt;h3&gt;Overlapping of value mappings:&lt;/h3&gt;
When a source value is mapped by multiple VMs, the priority of the VMs is used to determine the mapping to be applied and a warning is issued. When two value mappings have the same priority, the one that is first mentioned is used and a warning should be issued. Already mapped values are then ignored when evaluating further VMs. The following priorities exist (1 = highest priority):

&lt;ol&gt;
&lt;li&gt;single value via ..value&lt;/li&gt;
&lt;li&gt;..orderedSet/..List&lt;/li&gt;
&lt;li&gt;set formed by multiple values via ..value&lt;/li&gt;
&lt;li&gt;..Set&lt;/li&gt;
&lt;li&gt;..interval&lt;/li&gt;
&lt;/ol&gt;


</dct:description>
    <rdfs:subClassOf rdf:resource="http://purl.org/rvl/Mapping"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >CLARIFIED: Should value mappings also be able to work on the subject/predicate part of a statement? By setting "object" as default and using an optional parameter, this could be achieved. However, creating a different mapping for each subject value is hardly useful and different predicates can be distinguished via multiple property mappings or by mapping the URI to an additional visual means within a composite mapping. 

INFO: VMs for GO2ORs? - more arguments against:
For graphic object-to-object relations, we decided not to allow value mappings for the following reasons:
1 ) The behavior can be achieved by filtering on PM level as well
2) VM are convenience constructs for filtering statements by object only, but in the case of GO2ORs filtering the subject side is usually equally important. Object side as default makes no sense here.
3) There is no variety of "values" that needs to be distinguished (also stated in the comment above). Limiting a PM by attached VMs (which say relate or relate not, e.g. linked_to and not_linked_to) would contradict the PM's general statement. (-&gt; filters are more logical)
4) The name "VM" would make no sense

TODO: Continuous Color Ranges:
Ranges of colors are complicated to describe, since color is a multidimensional construct and may be based on various color models (RGB, HSL, ..). Also it has to be possible to map to "paths" visiting multiple colors (e.g. from red via white to green). This has to be handled in future by extra mappings and could internally use discrete 1-to-1 value mappings (or an extra class "PathStep") to model the steps in such a path. The problem of color paths could be generalized to paths through other spaces than the color space as well. SVG also modells such paths and could be reused/immitated here.

TODO: Should this be abstract as in the diagram?

INFO: Using multiple Selectors at the same time:
At the moment using multiple selectors is only allowed for those selectors selecting unordered sets. Other considerations on this are noted in the figure below:
&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/valid_combinations_of_selectors_within_a_single_vm.png"/&gt;

INFO: Invalid / Discouraged / ... combinations of source/target selectors on a syntactic level:
Considerations on which selectors can reasonably be used in combination between source and target side are given below. These considerations have to be aligned with later changes. This is not up-to-date.
&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/overview_valid_source_target_value_mappings.png"/&gt;</skos:editorialNote>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Since discrete values on the target site are distinguished and mapped to source values, only mappings to visual attributes - not to other visual relations - will typically have value mappings. In the case of graphic-object-to-object-relations, there are usually no various target values which need to be mapped explicitly. Since most are binary, there are only two - either the graphic relation exists or not. </rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Value mapping</rdfs:label>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Special case of explicit value mappings:

&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/value_mapping_example.png"/&gt;</skos:example>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/PropertyMapping">
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onClass rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
        <owl:onProperty>
          <owl:FunctionalProperty rdf:about="http://purl.org/rvl/sourceProperty"/>
        </owl:onProperty>
        <owl:qualifiedCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"
        >1</owl:qualifiedCardinality>
      </owl:Restriction>
    </rdfs:subClassOf>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:allValuesFrom>
          <owl:Class rdf:about="http://purl.org/viso/graphic/GraphicRelation"/>
        </owl:allValuesFrom>
        <owl:onProperty>
          <owl:FunctionalProperty rdf:about="http://purl.org/rvl/targetGraphicRelation"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:allValuesFrom rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
        <owl:onProperty>
          <owl:FunctionalProperty rdf:about="http://purl.org/rvl/sourceProperty"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >EXISTENCE MAPPINGS:
As described, each property mapping is an "existence mapping", so no extra class is needed for this. A PM without filters does exactly the job, when exactly one target vaue is defined (this is inline with semantics of other settings). However, we could improve performance by explicitly stating, that the context (e.g. the value of the object) will not influence the mapping process. Any existence of the property will lead to the mapping described by the property mapping and no value mappings have to be considered (consider that value mappings are only special filters on the object side!!). We first considered to have a new class - Constant mapping - for this kind of property mapping.

NEW GO:
rvl:newGraphicObject could be used as a targetValue, when a new additional GO needs to be created. Whether this GO can also be a complex CGO having an internal structure (NV/PPR) and/or can have visual attributes already set from the beginning, or whether it should be the instance of a VR needs to be examined.

FILTERS: 
Besides the objectFilter and the subjectFilter, which are implemented, also an additional predicateFilter could be allowed (resp. we could allow a complex (SPARQL) selector as the range for sourceProperty). When we should introduce a predicateFilter, it has to be clarified whether it may be used in addition to the selection of a sourceProperty (only refining it) or instead of this setting. Since the defininition of property-paths and other complex relations may be achieved on the data side by introducing temporary properties and/or inference (e.g. for handling subproperties), no further filters are allowed for the moment. 

FILTERS - ONE FILTER FOR ALL:
Instead of separately describing the sourceProperty and various filters, also a complex statement-filter (e.g. a SPARQL selector) could be used to simply select all triples to be mapped. This, however, does not meet our goal of a stepwise and explicit definition of mappings. For example, this would cause problems when it comes to generating legends, since the sourceProperty is not explicitly defined. Having separate filters for subject, object and (possibly, for refinement) predicate, reduces the complexity of the single filter definitions and can more easily be handled.

FILTERS vs. sourceValue... properties:
While both objectFilter and properties such as sourceValue constrain the set of statements by the resources used as object in these statements, objectFilter is meant to filter via a complex (e.g. SPARQL) selector, while sourceValue defines single valid values. The properties sourceValueSet and sourceValueOrderedSet allow for easily selecting specific resources allowed as objects. SourceValueOrderedSet as well as the properties sourceValueUpper/LowerBound allow for defining ranges and existing sets of values in a more consise way. 

sourceValue... properties and object/subject:
All properties starting with sourceValue always refer to the object of the source statement that is to be mapped, not the subjects - just as valuemappings do. The object may be a literal or a complex resource on its own.  

MULTIPLE VALUES FOR THE SAME PROPERTY:
In future versions of RVL, also multiple values could be mapped and property could be introduced that allows for defining how to handle multiple values. Options could include: Use colored stripes, when mapping to multiple colors, mix colors (blue+yellow=green) or somehow calculate in-between values. (TODO: This is more a problem of P2GAMs) </skos:editorialNote>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:allValuesFrom rdf:resource="http://purl.org/rvl/SubMappingRelation"/>
        <owl:onProperty>
          <rdf:Property rdf:about="http://purl.org/rvl/subMapping"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Property Mapping</rdfs:label>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onClass rdf:resource="http://purl.org/viso/graphic/GraphicRelation"/>
        <owl:qualifiedCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#nonNegativeInteger"
        >1</owl:qualifiedCardinality>
        <owl:onProperty>
          <owl:FunctionalProperty rdf:about="http://purl.org/rvl/targetGraphicRelation"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >When a target graphic relation is used in multiple mappings, a warning should be issued, since ambiguities become possible.</rdfs:comment>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/rvl_class_diagram.png"&gt;

A Property mapping (PM) defines the mapping from one source property (i.e., a relation) to one target graphic relation. Depending on the type of graphic relation different sub-types of PM have to be used. For graphic-object-to-object relations &lt;a href="#http://purl.org/rvl/PropertyToGraphicObjToObjRelationMapping"&gt;PropertyToGraphicObjToObjRelationMapping&lt;/a&gt; and for graphic attributes &lt;a href="#http://purl.org/rvl/PropertyToGraphicAttributeMapping"&gt;PropertyToGraphicAttributeMapping&lt;/a&gt;. The latter allows for various settings on the mapping of different values.

&lt;h3&gt;When are PM applied?&lt;/h3&gt;
Property mappings apply, whenever a property instance (i.e. a statement using the property) exists, no matter what is the object or subject. When constraints need to be made on the application of the mapping, filters have to be used on subject and/or object.

The following figure illustrates a PM that is independent of the source values. Only the existence of some value for "geo:coordinates" leads to the creation of a world-shaped label:
&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/mapping_example_mapping_the_existence_of_properties.png" style="width:100%"/&gt;

&lt;h3&gt;To which Graphic Object is a PM applied?&lt;/h3&gt;
Settings defined by a mapping will by default be applied to the Graphic object (GO) representing the &lt;b&gt;subject&lt;/b&gt; of the mapped statement. This means changes to graphic attributes are applied to the subject's GO and the subject's GO is chosen as the starting point for graphic object-to-object relations defined in the mapping. When new graphic objects are implicitly created by a mapping (e.g. as a label) they, too, will be assigned to the subject's GO. When this default behavior is not desired two options are at hand:
&lt;ol&gt;
     &lt;li&gt;Map the inverse property instead (e.g., "updatedBy" instead of "updates")&lt;/li&gt;
     &lt;li&gt;Use a filter-expression to invert the direction of the statement (e.g., "!updates" instead of updates) . This will selected objects instead of the subjects.&lt;/li&gt;
     &lt;li&gt;(only usable within sub-mappings:) Use the rvl:onRole parameter to define the graphic object to which the mapping is to be applied.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;How to map multiple values for the same property?&lt;/h3&gt;
This problem frequently occurs, for example, when mapping rdf:type, since multiple inheritance is allowed in RDFS. When multiple values for a source property exist and only one value is possible, the more specific value shall be processed. &lt;i&gt;For PropertyToGraphicAttributeMappings&lt;/i&gt;, in case of two equally specific values, a warning shall be issued and the first value that is loaded shall be used. &lt;i&gt;For PropertyToGraphicObjToObjRelationMappings&lt;/i&gt;, a warning shall be issued and the graphic object representing the subject shall be duplicated. </dct:description>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/pm_examples.png"/&gt;
Although most frequently OWL object properties will be mapped to graphic object-to-object relations while OWL datatype properties will be mapped to graphic attributes, other constellations are possible. Also, some relations will only be modelled as rdf:Property.</skos:example>
    <rdfs:subClassOf rdf:resource="http://purl.org/rvl/Mapping"/>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/IdentityMapping">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Also referred to as "Passthrough Mapping" in some tools.</rdfs:comment>
    <rdfs:subClassOf>
      <owl:Class>
        <owl:complementOf>
          <owl:Restriction>
            <owl:onProperty>
              <owl:InverseFunctionalProperty rdf:about="http://purl.org/rvl/valueMapping"/>
            </owl:onProperty>
            <owl:someValuesFrom rdf:resource="http://purl.org/rvl/ValueMapping"/>
          </owl:Restriction>
        </owl:complementOf>
      </owl:Class>
    </rdfs:subClassOf>
    <rdfs:subClassOf rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Identity mapping</rdfs:label>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >rdfs:label is passed to Labeling, or rgb-values are passed trough to Color.

&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/passthrough_mapping_va_example.png"&gt;</skos:example>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Except passing strings to labels, also a few other values in the source data may be passed through, e.g. RGB values, sizes in px, positions in px (all other need scaling).   These values do not need to be mapped, but can directly be used as they are. However, it should be possible to perform string-operations in order to do small changes if the datatypes don't match exactly. Setting "image/uri" as value in fresnel is similar, however it also instructs how to present. It could be argued that in rare cases relations in the data (when the source data is already about graphic relations) may need to be passed through to GOTORs as well which is not possible at the moment.

RVL may be extended to support identity mappings also on the level of value mappings, in order to allow for splitting the source values and handling  each part with differernt settings (e.g. partly use a calculated mapping, or add additional text for some parts). This has been neglected for now for reasons of overall complexity in favor of this simple PM class. To achieve the above mentioned behavior, complex filters on the PM may be used for now. </skos:editorialNote>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Passes source values through to the target graphic relation without changing the datatype or value. The type of the values in the domain is equal to the type of the values in the co-domain.</dct:description>
  </owl:Class>
  <owl:Class rdf:about="http://purl.org/rvl/Interval">
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Interval</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >An interval of values of a simple datatype or ordered objects. The interval can be unbounded (infinite) to one direction by not specifying upper or lower bound. An interval may also require a label, when a legend shall be created (use rdfs:label for this).</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:Class>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/sourceValueInterval">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >source interval</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:range rdf:resource="http://purl.org/rvl/SourceValueInterval"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <skos:related>
      <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetValueInterval"/>
    </skos:related>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetValues">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Abstract. Depending on the used subproperty, the Visual_Value_List will be interpreted as actually being only a set, ordered set, list or even a cyclic list. This approach was chosen, since we may want to use existing lists as either only a set, ignoring order, or we may want to state, that we want to use the list in a cyclic way.

</rdfs:comment>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/Visual_Value_List"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >1.Possibility: Use Parameter cycleTargetValues boolean (if true, values in a set are used multiple times, if they are not enough to represent the (discrete) source values)
2. Possibility: Use cycle-container class, rdf:bag, rdf:list (it is hard to tell which container class to use best, some a deprecate, most are not well supported)
3. Possibility: Use different property for referencing a list (means list/set/cycle depending on the property). (This is used here)

Is this range fine? It prevents other sets of values than defined with VISO from being used.</skos:editorialNote>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target values (abstract)</rdfs:label>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >As an example such a set could define a number of colors that match well. Predefined sets are provided as facts in the graphics ontology.</skos:example>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetValueList">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target value list</rdfs:label>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/targetValues"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Can be used to assign a list of ordinal target values. The values are to be interpreted as a list of ordered values. As oposed to targetValueOrderedSet, entities may occur multiple times. </dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Same targets for different source values are usually not wanted in visualisation. As with targetValueCycle, ambiguous mappings could be the result! However, there may be cases where using a target value multiple times is acceptable and the absolute value is clear from context (e.g. isomeres).</rdfs:comment>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/Visual_Value_List"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/quantifySourceValuesBy">
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >&lt;img  src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/clear.gif"  style="border:none;width:360px;height:360px; background:url(http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/defining_ordinal_quantitative_som_overview.png) -440px -560px" /&gt;

&lt;ul&gt;
&lt;li&gt;"sizeInMM" is selected as the quantification property. Values such as Big (sizeInMM="10"), Medium (sizeInMM="5") and Small (sizeInMM="1") are quantified using the quantitative values assigned by sizeInMM.&lt;/li&gt;
&lt;/ul&gt;</skos:example>
    <skos:related>
      <owl:ObjectProperty rdf:about="http://purl.org/rvl/quantifyTargetValuesBy"/>
    </skos:related>
    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    <skos:related>
      <owl:ObjectProperty rdf:about="http://purl.org/rvl/orderSourceValuesBy"/>
    </skos:related>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >quantify source values by</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines a property, that is to be used (for the context of a concrete mapping) for assigning a quantitative value to the source objects that have been selected for mapping. </dct:description>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/similarProperty">
    <rdfs:domain rdf:resource="http://purl.org/rvl/UnifyWithInverseAndPickOne"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >similar property</rdfs:label>
    <rdfs:subPropertyOf>
      <owl:ObjectProperty rdf:about="http://purl.org/rvl/simplificationProperty"/>
    </rdfs:subPropertyOf>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >property that is somehow similar to another</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetValueOrderedSet">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target value ordered set</rdfs:label>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/targetValues"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Can be used to assign an ordered set of ordinal target values. In contrast to a list the values may only appear once.</dct:description>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/Visual_Value_List"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetObjToObjRelation">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target object-to-object relation</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/GraphicObjectToObjectRelation"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <rdfs:subPropertyOf>
      <owl:FunctionalProperty rdf:about="http://purl.org/rvl/targetGraphicRelation"/>
    </rdfs:subPropertyOf>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The target graphic object-to-object relation to map onto.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyToGraphicObjToObjRelationMapping"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/sourceValueSet">
    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Chooses the members of an existing container or list as the source values. Since it makes no sense to have duplicates here (we must not have ambigious value mappings), only sets are allowed. If the values are ordered, they have to form an ordered set, not a list. Tools should issue a warning, if the list contains duplicates.</dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >source value set</rdfs:label>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Using containers is avoided  completely by using single statements (sourceValue) analogeous to targetValue on the target side. However, if existing, predefined sets of values should be selected for the mapping, it could be beneficial to allow selecting a rdf:Bag by sourceValueSet (to show values are not ordered) or sourceValueOrderedSet (to show values are ordered).

rdfs:Container could also be a range (removed since code generator causes errors then)</skos:editorialNote>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/quantifyTargetValuesBy">
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >quantify target values by</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines a property, that is to be used (for the context of a concrete mapping) for assigning a quantitative value to the target objects that have been selected for mapping. </dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >"sizeInMM" is selected as the quantification property. Values such as Big (sizeInMM="10"), Medium (sizeInMM="5") and Small (sizeInMM="1") are quantified using the quantitative values assigned by sizeInMM.</skos:example>
    <skos:related rdf:resource="http://purl.org/rvl/quantifySourceValuesBy"/>
    <skos:related>
      <owl:ObjectProperty rdf:about="http://purl.org/rvl/orderTargetValuesBy"/>
    </skos:related>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/orderTargetValuesBy">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Using order properties in order to create an order between target values is discouraged, since this could generate a non-strict order. Lists are preferred to object properties here. Also selecting datatype properties can lead to a non-strict order. In both cases a warning should be issued, when multiple values are ranked equally.</rdfs:comment>
    <skos:related>
      <owl:ObjectProperty rdf:about="http://purl.org/rvl/orderSourceValuesBy"/>
    </skos:related>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >order target values by</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/simplificationProperty">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Only needed as a container to sort subproperties nicely in the GUI-tree.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >simplification property</rdfs:label>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/propertyToSimplify">
    <rdfs:domain rdf:resource="http://purl.org/rvl/Simplification"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >property to simplify</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/simplificationProperty"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A property that shall be simplified for graphic representation. Multiple properties may be selected.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/preferredProperty">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >preferred property</rdfs:label>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/simplificationProperty"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The property to be chosen, when two properties are "merged" for visualisation purposes, for example, when a property and its inverse are represented by a single visual means in the graphic.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:domain rdf:resource="http://purl.org/rvl/Simplification"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/excludeSourceValue">
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Use the range of source values from HighImportance to LowImportance, but exclude MediumImportance.</skos:example>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TODO: What is the best term for the user of the mapping vocabulary to understand that the values are not filtered completely? Ignore? Hide? Exclude?  Hide and ignore suggerate filtering.

TODO: Should this also be usable on PropertyMappings directly as a shorthand?

TMPOFF: domain also IdentityMapping</skos:editorialNote>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >exclude source value</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Excludes a discrete source value from the mapping.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Excluding a value from the mapping does not mean that a resource with this value won't show up at all in the graphic. That is the task of filtering the data to visualize. It simply means that this value does not get a visual value assigned by this mapping. Hence, the default value for the visual attribute will be chosen instead. In this case it is important to chose a default value, that is not mixed up with a value that carries meaning! So the default value has to be chosen carefully.</rdfs:comment>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetValueInterval">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target value interval</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:range rdf:resource="http://purl.org/rvl/GraphicAttributeInterval"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/targetValueSet">
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target value set</rdfs:label>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/targetValues"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Assigns a set of target values, which are not interpreted as ordered. Since it is a set of values, each value may only appear once.</dct:description>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/Visual_Value_List"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/sourceValueOrderedSet">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >source value ordered set</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >We don't need sourceValueList, since if we allowed duplicates in a list, the mapping would not be deterministic anymore.</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/sourceValueSet"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines a list that will be interpreted as an ordered set, i.e. no duplicates are allowed. Tools should issue a warning, if the list contains duplicates.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/excludeTargetValue">
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Map to {orange, red, blue, black} but exclude black, when mapping to an existing color set. Also values from ranges of discrete ordered values may be excluded: Use the range from shapeNamed:A to shapeNamed:C, but exclude shapeNamed:B.</skos:example>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >exclude target value</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/Visual_Attribute"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Excludes a discrete target value from the mapping.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="http://purl.org/rvl/orderSourceValuesBy">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >order source values by</rdfs:label>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >INFO: Instead of defining an order relation for the context of the mapping, this could also be achieved globally by making the property in question a subproperty of either viso-data:greater_than or viso-data:less_than. Similarily, by making a datatype property in question a subproperty of has_ordinal_value this can be achieved for datatype properties that offer ordinal information about individuals.

CLARIFIED: Is it necessary to have two properties, orderSource- and orderTargetValuesBy? -&gt; Yes, if stated for a mapping.

TODO: Semantics: Does this form an implicit selection (all values related via the property) or should the system return an error, when a resource misses this property and, therefore, cannot be ordered?
How to handle the case, when the property only offers a weak order, i.e. a DAG topology is created by it, not a list? Should such properties be allowed here?</skos:editorialNote>
    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/clear.gif" style="border:none;width:360px;height:583px; background:url(http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/defining_ordinal_quantitative_som_overview.png) -40px -338px" /&gt;

&lt;ul&gt;
&lt;li&gt;Top example: Assume the property "ex:size" shall be mapped. For defining an order between the (named) size values, the (order-relation-property) "ex:gt", an ObjectProperty, is selected. Another example would be to order various phases ("Beginning" "Endphase" "Middlephase") by a relation "ex:followsDirectly".&lt;/i&gt;
&lt;li&gt;Bottom example: The property "ex:receivedAward" shall be mapped. The order of the possible values ("Bronce", "Gold" and "Silver") is determined by the ex:ranked value. This is explicitly stated by setting "orderSourceValuesBy" to "ex:ranked".&lt;/li&gt;
&lt;/ul&gt;</skos:example>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:related rdf:resource="http://purl.org/rvl/orderTargetValuesBy"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines a property, that is to be used (for the context of a concrete mapping) for ordering the source values that have been selected for mapping. This may either be a (transitive and acyclic) object property (we refer to as the "order-relation-property"), or a datatype property that adds a numeral value to the selected individuals.</dct:description>
    <skos:related rdf:resource="http://purl.org/rvl/quantifySourceValuesBy"/>
  </owl:ObjectProperty>
  <rdf:Property rdf:about="http://purl.org/rvl/subMappingRelationProperty">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >sub mapping relation property</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Only exists for gui-sorting purposes.</dct:description>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/lowerBoundExcl">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >lower bound exclusive</rdfs:label>
    <skos:related>
      <rdf:Property rdf:about="http://purl.org/rvl/lowerBoundIncl"/>
    </skos:related>
    <rdfs:domain rdf:resource="http://purl.org/rvl/Interval"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:related>
      <rdf:Property rdf:about="http://purl.org/rvl/upperBoundExcl"/>
    </skos:related>
    <skos:related>
      <rdf:Property rdf:about="http://purl.org/rvl/upperBoundIncl"/>
    </skos:related>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/passedTo">
    <skos:related>
      <rdf:Property rdf:about="http://purl.org/rvl/inheritedBy"/>
    </skos:related>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TODO: Also allow this on the level of value mappings?

ALTERNATIVE: A subclass of PropertyMapping ClassRestrictionOnPropertyMapping could be introduced which would also allow to apply the mapping ONLY to restrictions. Since we want to keep things simple, this was not done. 

ALTERNATIVE: The mapping could be flagged as doNotUseForABoxRelations  = true

TMPOFF: domain also ResourceMapping</skos:editorialNote>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Allows to use a mapping ONLY for the resources related via the property defined by passedTo. The mapping will not be applied directly anymore (use inheritedBy instead). For details look at the description of inheritedBy.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >passed to</rdfs:label>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/upperBoundExcl">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >upper bound exclusive</rdfs:label>
    <skos:related rdf:resource="http://purl.org/rvl/lowerBoundExcl"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/Interval"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:related>
      <rdf:Property rdf:about="http://purl.org/rvl/upperBoundIncl"/>
    </skos:related>
    <skos:related>
      <rdf:Property rdf:about="http://purl.org/rvl/lowerBoundIncl"/>
    </skos:related>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/drawInterpolated">
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyToGraphicAttributeMapping"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TODO: A warning should be issued, when this is set to true for discrete values (problem: there is no continuous/discrete flag at the moment)</skos:editorialNote>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >States if marks may be drawn interpolated.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Draw line instead of dots.</skos:example>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >This flag will cause the graphic to show source values that do not exist in the raw dataset, but have only been interpolated! Therefore, this setting has to be done with care not to suggest the impression of continuous data, when only discrete source values exist.</rdfs:comment>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >draw interpolated</rdfs:label>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/isExistentialPropertyMapping">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Could be used to state that the mapping applies whenever there is a value for the given property, no matter which value. This could alternatively be stated by a special value used in a value mapping or for the sourceValue property.&#xD;
&#xD;
The following VSS depend on existential mappings:&#xD;
&#xD;
- draw a proportionally repetiton group (the groups count will then be defined by the value, usually calculation needed - is count a VA or something similar we can map to in a continuous to discrete mapping? (count has to be an integer))&#xD;
- draw a proportionally division group (the parts proportion will then be defined by the value, calculation needed)&#xD;
- draw a label (the labels shape or text_value will then be defined by the value)</dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >is existential property mapping</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    ></skos:editorialNote>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/subMapping">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Often not used correctly; Does often not point to a SubMappingRelation, but directly to other mappings. Cf. SubMappingRelation 

Domain can proabably be P2GO2OR mapping.</skos:editorialNote>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Points to a SubMappingRelation instance, not directly to another Property mapping in order to create an n-ary relationship. Please refer to "SubMappingRelation" for details.</dct:description>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/subMappingRelationProperty"/>
    <rdfs:range rdf:resource="http://purl.org/rvl/SubMappingRelation"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >has sub-mapping</rdfs:label>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <skos:related rdf:resource="http://purl.org/rvl/SubMappingRelation"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/mapMissingValuesTo">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >map missing values to</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The range should be literals with string, int, float, boolean + discrete visual attributes</rdfs:comment>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:related>
      <rdf:Property rdf:about="http://purl.org/rvl/neutralValue"/>
    </skos:related>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The visual value to map missing source values to. Related to neutralValue, but not the same. It might happen that a dataset has some entities that do not have a value for a property that others have attached (e.g. when selecting entities with SPARQL the OPTIONAL operator). This setting allows to define which graphic value is chosen in this case. This could be either the neutral value, or a very different value than the others, to stress that the value has to be interpreted differently from the others.</dct:description>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >For a set of persons, it can be stated which value for "position" should be chosen, when their geographical position is unknown.

TMPOFF: range better rdfs:Literal or viso-graphic:Visual_Attribute</skos:example>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/sourceValue">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TODO: The range should actually be instances of the classes defined as range of the defined sourceProperty or rdf:literals. This cannot be expressed in owl, but SPIN can be used for this.

INFO: This cannot replace sourceValueSet and sourceValueOrderedSet completely, since we may need to select an existing set/list.

TMPOFF: domain also PropertyToGraphicAttributeMapping</skos:editorialNote>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >source value</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The value(s) from the source data to be mapped. "sourceValue" is used in value mappings (but also in Identity mappings) to allow for the selection of multiple discrete source values alternatively to the selection of a (predefined) set or list.</dct:description>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/upperBoundIncl">
    <skos:related rdf:resource="http://purl.org/rvl/upperBoundExcl"/>
    <skos:related rdf:resource="http://purl.org/rvl/lowerBoundExcl"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/Interval"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:related>
      <rdf:Property rdf:about="http://purl.org/rvl/lowerBoundIncl"/>
    </skos:related>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >upper bound inclusive</rdfs:label>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/subMapping-onTriplePart">
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/subMappingRelationProperty"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TMPOFF: range should be (in geschweiften klammern): rdf:object , rdf:subject , rdf:predicate</skos:editorialNote>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >on triple part</rdfs:label>
    <rdfs:domain rdf:resource="http://purl.org/rvl/SubMappingRelation"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Points to a part of an RDF statement to define on which part of a statement, submappings should be applied. Please refer to "SubMappingRelation" for details.</dct:description>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/invertOrderOfTargetValues">
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >invert order of target values</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Inverts the span, or list of target values. This can be useful, when mapping to a predefined color range for example, where the range perfectly fits, except the orientation is wrong. Also lists of target values may need to be flipped, in order to better fit some existing conventions or expectations of the user.</dct:description>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/inheritedBy">
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <skos:related rdf:resource="http://www.w3.org/2004/09/fresnel#classFormatDomain"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:related rdf:resource="http://www.w3.org/2004/09/fresnel#classLensDomain"/>
    <skos:related rdf:resource="http://purl.org/rvl/passedTo"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Setting inheritedBy allows for extending the results of a defined mapping to related resources. The property which inheritedBy defines states how other resources that will inherit the mapping settings have to be related to the originally mapped resource. As an example, in the figure two resources (a class A and B) have been mapped to a traingle and a square. Using inheritedBy rdf:type, we can extend this setting to the instances as well (of course usually you will either hide classes at all or if both instances and classes shall be shown, you will need to distinguish them by another graphic attribute).  Besides inheriting via rdf:type and rdfs:subClassOf inheritance can be defined to happen via any rdf:Property, e.g. dc:partOf.

Mapping settings may also be extended to T-Box relationships using inheritedBy in combination with rvl:tBoxDomainRange, rvl:tBoxRestriction or a specific T-Box relation such as  "owl:someValuesFrom", "owl:allValuesFrom" or "owl:hasValue". The example shows how a mapping from dc:partOf to viso-graphic:contains is extended to domain-range relations and T-Box restrictions. 

inheritedBy can also be used with Resource Mappings. For cases, where the defined mapping shall ONLY be used for the related resources, the property passedTo can be used.

Multiple inheritance: Look at the description of Property Mapping for a discussion of how to handle the case when a resource has multiple values for a property.

&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/inheritedBy.png"/&gt;</dct:description>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >ALTERNATIVE: We first considered to follow the Fresnel way of having instanceFormatDomain and a classFormatDomain. However, this was rejected in favor of this more general and flexible approach of distinguishing the application to a resource directly vs. the application to its instances.

FUTURE: Evtl. allow this setting on the level of Value Mappings.

TMPOFF: domain also ResourceMapping</skos:editorialNote>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >inherited by</rdfs:label>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/targetValue">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A concrete discrete visual value to map onto.

"targetValue" is not only used in value mappings, but also in various property mappings to allow for the selection of multiple discrete target visual values (alternatively to the selection of an existing or adhoc created set or list).</dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target value</rdfs:label>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The domain is mapping, since it is also needed for property mappings, not only value mappings.

This cannot replace targetValues completely, since we may need to select an existing set/list.


TMPOFF: rage viso-graphic:Visual_Attribute or rdfs:Literal, domain should also be resource mapping</skos:editorialNote>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/neutralValue">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >neutral value</rdfs:label>
    <skos:related rdf:resource="http://purl.org/rvl/mapMissingValuesTo"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >1 use case: Missing source values. &#xD;
&#xD;
2 use case: No ValueMapping exists (or can be calculated) for a given source value (e.g., when "source value out of bound" or "value mappings only" is chosen)</skos:example>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The visual value to use, if no semantics should be expressed by the visual means. &#xD;
&#xD;
If unset the viso-graphic:default_neutral_value of a visual means is used. The neutralValue owerwrites the default_neutral_value, to allow for different neutral values for different presentations.&#xD;
&#xD;
If this is also unset, the average value is calculated from all available target values and a warning is issued. &#xD;
&#xD;
Calculating an average is only possible for ordered values, therefore, for non-ordered values, it is required that neutralValue or default_neutral_value are defined.</dct:description>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>
    <rdfs:domain rdf:resource="http://purl.org/viso/graphic/GraphicRelation"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/lowerBoundIncl">
    <skos:related rdf:resource="http://purl.org/rvl/upperBoundIncl"/>
    <skos:related rdf:resource="http://purl.org/rvl/lowerBoundExcl"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >lower bound inclusive</rdfs:label>
    <rdfs:domain rdf:resource="http://purl.org/rvl/Interval"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:related rdf:resource="http://purl.org/rvl/upperBoundExcl"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/subGraphic">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Sometimes not only the visual attributes or visual relations of existing graphic objects (GOs) (each representing a source data entity) have to be modifed, but new GOs have to be created, which do not represent a source data entity. Several approaches to this could possibly be taken here and have to be clarified:

- WHAT ARE THE USE CASES FOR CONSTANT GRAPHIC OBJECTS?
     1) The existence of some value for a given property shall be displayed via a new graphic object (a label) (maybe the attributes of this GO will later be defined (statically or dynamically)  
     2) A complex graphic object shall be created (without its inner graphic relations beeing mapped to any meaning - e.g.: use two rectangles side by side as the standard graphic shape) -&gt; Maybe this can also be achieved by using complex symbols as the shape attribute?? However, constructing these CGO by means of AVM gives us the option of referencing parts via (or own specific?) role-names.
     3) VRs where this is relevant: Labeling-&gt;Label, ProportionalRepetition-&gt;Copy, (others rarely)

- WHICH MODELLING APPROACHES DO WE HAVE?
     - Also use an n-ary Relation here and create a class SubGraphicRelation analogeous to SubMappingRelation?
     - Use AVM parts (this may cause difficulties in referencing super-mappings, when dynamic graphics (in sub-mappings) should later be created, since the AVM does not have to be a tree

- All VRs that are able to display values of datatype-properties do this by creating new (helper) GOs (Labeling, ProportionalRepetition, MORE???)</skos:editorialNote>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Points to a SubGraphic (Relation instance, not directly to another graphic object) in order to create an n-ary relationship. (Please refer to "SubGraphicRelation" for details.)</dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >has sub-graphic</rdfs:label>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
  </rdf:Property>
  <rdf:Property rdf:about="http://purl.org/rvl/invertSourceProperty">
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Invert source property</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Uses the inverse of the source property instead of the source property and additionally maps occurences of the source property inverted.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </rdf:Property>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/missingValueMapping">
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >missing value mapping</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/rvl/MissingValueMappingHandlingType"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >If there is at least one value mapping, but not all source values are handled by some value mapping - what should happen to the other source values? &#xD;
&#xD;
&lt;b&gt;hide&lt;/b&gt; - hide the entity (draw no mark at all), but consider it in calculations (e.g. the calculation of the overall range of all values in a data set) &#xD;
&lt;b&gt;ignore&lt;/b&gt; - act as if this entity would not exist&#xD;
&lt;b&gt;neutral&lt;/b&gt; - show the entity with a mark and map to the neutralValue in order to minimize the misinterpretation (discouraged)&#xD;
&lt;b&gt;average&lt;/b&gt; - an average value is calculated from all target values available&#xD;
&lt;b&gt;calculate&lt;/b&gt; - (default) Other source values, without an explicit manual value mapping, get a calculated value mapping assigned (as if no value mappings existed).
&lt;b&gt;no mapping&lt;/b&gt; - perform no mapping when there is no value mapping for the source value. This does not mean, the entity will be hidden or ignored. Please note: since some visual means cannot be unset (such as color) the neutral value will be chosen here, which may not always be the desired effect. This setting is useful, for example, in cases where additional graphic objects would be introduced by the mapping (such as labeling).</dct:description>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TODO: clarify "no mapping"</skos:editorialNote>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/objectFilter">
    <rdfs:range rdf:resource="http://purl.org/rvl/sparqlSelector"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The sourceFilter of value mappings have a similar function as the objectFilter but is used on the level of value mappings, not on property mappings.

TMPOFF: range also fslSelector</skos:editorialNote>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Reduces the set of statements to be mapped to those where the OBJECT matches the filter defined by either a SPARQL or FSL selector. </dct:description>
    <rdfs:seeAlso>
      <owl:DatatypeProperty rdf:about="http://purl.org/rvl/subjectFilter"/>
    </rdfs:seeAlso>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >object filter</rdfs:label>
    <rdfs:seeAlso>
      <owl:DatatypeProperty rdf:about="http://purl.org/rvl/sourceFilter"/>
    </rdfs:seeAlso>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/sourceFilter">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >a targetFilter could also be introduced. This would allow for selecting ad-hoc subset of graphic attribute values such as "all colors suitable for the color-blind".

TMPOFF: range also fslSelector</skos:editorialNote>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Reduces the set of source values to those matching the filter defined by either a SPARQL or FSL selector. 
</dct:description>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >&lt;b&gt;Difference to objectFilter:&lt;/b&gt; ObjectFilter used with property mappings can filter on the level of property mappings - allowing different graphic realtions to be applied depending on the filter. As opposed to this, sourceFilter only allows for filtering on the level of source values and should be used when the graphic relation is not varied based on the filtering, but only the values are varied. Properties such as sourceValueSet, sourceValue and sourceValueInterval partly work as filters as well and can more easily be used for most cases. For examle, with sourceValueSet existing sets can very easily be referenced. sourceFilter covers all other more complex filtering needs.</rdfs:comment>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <rdfs:seeAlso rdf:resource="http://purl.org/rvl/sourceFilter"/>
    <rdfs:seeAlso rdf:resource="http://purl.org/rvl/objectFilter"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >source filter</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/rvl/sparqlSelector"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/scaleTransformation">
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >scale transformation type</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/rvl/ScaleTransformationType"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >INFO: Here the enumeration is modelled as owl:Datatype. Values can be selected via Add existing .. in topbraid
TODO: Also arbitrary transformations of the scale should be possible.</skos:editorialNote>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://www.w3.org/2004/02/skos/core#example"/>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/discreteStepSize">
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The step size can be set with the property discreteStepSize or, alternatively, by defining the maximum and minimum values for the target variable.</dct:description>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#float"/>
    <rdfs:seeAlso>
      <owl:DatatypeProperty rdf:about="http://purl.org/rvl/discreteStepCount"/>
    </rdfs:seeAlso>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >discrete step size (deprecated)</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >clarify semantics of this. what happens when the range cannot be divided by stepSize without a rest (which will be the common case)?</skos:editorialNote>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/sourceValuesLabel">
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Gives a common label to the selected set of (single) source values.</dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >source values label</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >INFO: Became necessary to label the ad-hoc sets which may occur by using sourceValue multiple times.</skos:editorialNote>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/disabled">
    <rdfs:domain rdf:resource="http://purl.org/rvl/Mapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >disabled</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines whether the mapping should be ignored during the evaluation of mappings.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/includeInLegend">
    <rdfs:domain rdf:resource="http://purl.org/rvl/Mapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >include in legend</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines whether the Mapping should appear in legends. Value mappings and property mappings may generate entries in a legend. </dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/discreteStepCount">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >NOTE: Tableau lets the user manually create "bins" in order to divide value-ranges into an ordered set of value sets.</skos:editorialNote>
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >&lt;img src="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/discretestepcount_example.png"/&gt;</skos:example>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >discrete step count</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:related>
      <owl:DatatypeProperty rdf:about="http://purl.org/rvl/discretize"/>
    </skos:related>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines the number of discrete steps for discretization of a continuous target value interval. If no target interval is explicitly defined, the maximum possible range (e.g., as limited by the available screen space) shall be used.</dct:description>
    <skos:related rdf:resource="http://purl.org/rvl/discreteStepSize"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#int"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/sourceValuesOutOfBounds">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >WARNING: Here it was not possible to modell the enumeration as owl:DataRange generating nice input fields in TopBraid, which is deprecated however. range  should be OutOfBoundHandlingType. However, this generates errors in TopBraid when trying to use it after relaoding .

The domain is PM, not a VM or Interval, since the setting was intented to count for all source intervals associated with a property mapping. Now that only one source interval is allowed it could also be a property of a Value mapping or Interval.

Problem: Clarify meaning of cut! Clarify similarity to missing source values and missing value mapping! In the case of cut, other settings will take control, therefore, this should probably be named differently.</skos:editorialNote>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >source values out of bounds</rdfs:label>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Defines how to handle source values out of the bounds given by interval mappings.

Clamp - map them to the same values as the borders of the interval   
Cut (default) - don't treat these values with this value mapping</dct:description>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/missingSourceValue">
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >missing source value</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/rvl/MissingSourceValueHandlingType"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >When an entity misses some value for a property that should be mapped - which visual value is chosen then? What should happen to the entity?&#xD;
&#xD;
&lt;b&gt;hide&lt;/b&gt; - hide the entity (draw no mark at all), but consider it in calculations (e.g. the calculation of the overall range of all values in a data set) &#xD;
&#xD;
&lt;b&gt;ignore&lt;/b&gt; - act as if this entity would not exist&#xD;
&#xD;
&lt;b&gt;neutral&lt;/b&gt; - show the entity with a mark and map to the neutralValue in order to minimize the misinterpretation (discouraged)&#xD;
&#xD;
&lt;b&gt;missing&lt;/b&gt; - (default) display a mark for the entity but make clear that the mark does not represent a value for the property, by using the "rvl:mapMissingValuesTo" value that was defined for this purpose.&#xD;
&#xD;
&lt;b&gt;average&lt;/b&gt; - an average value is calculated from all target values available</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Should the midrange be chosen here as average? Or another way of calculating an average value?

What is the best default behavior? "missing" is better then "neutral", but requires "rvl:mapMissingValuesTo" to be defined!</skos:editorialNote>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/discretize">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >discretize</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Divides a continuous range into discrete values. If the numer of discretization steps is not given by discreteStepCount, the number of steps will be calculated on the available data and selected target values. Cf. ValueMapping for details.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <skos:related rdf:resource="http://purl.org/rvl/discreteStepCount"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TODO: Is it correct, that this is only used for discretizing continuous TARGET intervals? 

TODO: Is VM or PM the best domain for this?

NOTE: The term "discrete" is used in RVL in three contexts which are compared here for clarity:
- "discretize" divides a continuous range into discrete values
- We talk of displaying "discrete" graphic objects in a graphic (which is the normal case, e.g. a dotplot) vs. drawing continuous graphic elements (e.g. a curve). Cf. the flag &lt;a href="#http://purl.org/rvl/drawInterpolated"&gt;drawInterpolated&lt;/a&gt; which will cause this behavior. 
- Finally, "discrete" values can be stored as resources to allow for giving them a name. (e.g. lightness_named=vg:Bright vs. vg:color_hsl_lightness="100"^^xsd:float) These resources will usually encapsulate a literal stating the actual value.

ALTERNATIVE: The discretize flag was introduced to replace various classes for mapping from continuous-to-discrete, continuous-to-continuous ... This was done to allow for easier switching between the mapping "types". </skos:editorialNote>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://purl.org/rvl/subjectFilter">
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >subject filter</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/rvl/sparqlSelector"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >- TopBraid will not display a string field in the form-based editor when a range using OR is used.

- Unlike with objectFilter, there is no alternative to subjectFilter for constraining mapped statements by subject

- TODO LATER: Should filters also be applicable on the target (visual) side of (value) mappings? E.g. a set of suitable visual values could be selected by some criteria such as suitedForTheColorBlind=true 

TODO: range also flselector</skos:editorialNote>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >CARDINALITY AND UNIVERSALITY:
At the moment a subjectFilter is the only way to create mappings based on cardinality or universal restrictions. E.g. we can define a mapping (via a SPARQL expression) to be applied when a Person knows at least two other persons, or when a Person knows only books (but notthing else).</rdfs:comment>
    <dct:description rdf:resource="http://www-st.inf.tu-dresden.de/semvis/ontologies/rvl/img/filtering_overview.png"/>
    <rdfs:seeAlso rdf:resource="http://purl.org/rvl/objectFilter"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Reduces the set of statements to be mapped to those where the SUBJECT matches the filter defined by either a SPARQL or FSL selector. 
Although applying different mappings for the same relation should generally be avoided for reasons of visual inconsistency, there are cases where it perfectly makes sense to use differerent visual means for the the same property: For example, we will probably want represent the age of a person differerently from the age of trees.    </dct:description>
  </owl:DatatypeProperty>
  <owl:FunctionalProperty rdf:about="http://purl.org/rvl/targetGraphicRelation">
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target graphic relation (abstract)</rdfs:label>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TODO: Is the range correct? Should it be OP or only Property? Can it be functional otherwise?

TODO: Do we need the two sub-properties?</skos:editorialNote>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Abstract property. The graphic relation to be used in a mapping. Sub-properties need to be used in mappings - either targetGraphicAttribute or targetObjToObjRelation.</dct:description>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:FunctionalProperty>
  <owl:FunctionalProperty rdf:about="http://purl.org/rvl/subMapping-mapping">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >sub-mapping</rdfs:label>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/subMappingRelationProperty"/>
    <rdfs:range rdf:resource="http://purl.org/rvl/Mapping"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/SubMappingRelation"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Points to another mapping, that is used as a sub-mapping. Existing mappings may be reused here. Please refer to "SubMappingRelation" for details.</dct:description>
    <rdf:type rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
  </owl:FunctionalProperty>
  <owl:FunctionalProperty rdf:about="http://purl.org/rvl/targetAttribute">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target attribute</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/GraphicAttribute"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The graphic attribute to be mapped onto.</dct:description>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/targetGraphicRelation"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyToGraphicAttributeMapping"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:FunctionalProperty>
  <owl:FunctionalProperty rdf:about="http://purl.org/rvl/targetValueCycle">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >target value cycle</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Use with care - c.f. targetValueList.</rdfs:comment>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The values are to be interpreted as a cycle of ordered values.</dct:description>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/Visual_Value_List"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
    <rdfs:domain rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/targetValues"/>
  </owl:FunctionalProperty>
  <owl:FunctionalProperty rdf:about="http://purl.org/rvl/sourceProperty">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A sourceProperty always works as a basic filter, limiting the mapped statements to those where the predicate is the given sourceProperty. Note that addditional constraints on the statements to be mapped can be defined via constraining the subjects and objects (e.g. via subjectFilter).</rdfs:comment>
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >source property</rdfs:label>
    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The property from the data to be mapped.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >As range also expressions in SPARQL (attach via SPIN?? or as strings??) could be allowed in order to describe selektors (filters) which select triples (similar to the selektors used with FRESNEL propertyFormatDomain) instead of sets of resources. Doing so, it would be possible to define a complex context in which a mapping has to be applied. 

FSL-selectors: If we also allow expressions in a path-language: Can the necessary triples be selected this way? S,P,O need to be known after each matched selektion! FSL always selects a set of nodes or properties, so this will be difficult/impossible?! </skos:editorialNote>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:FunctionalProperty>
  <owl:FunctionalProperty rdf:about="http://purl.org/rvl/subMapping-onRole">
    <rdfs:subPropertyOf rdf:resource="http://purl.org/rvl/subMappingRelationProperty"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >on role</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/viso/graphic/SyntacticRole"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >States the role of graphic objects where this mapping will be applied. (If not set, the default which is "mark" will be used.) While submappings refer to a smaller and smaller subset of graphic objects, on the source side, the mappings all refer to the properties of the entity where the basic mapping was applied. Please refer to "SubMappingRelation" for details.</dct:description>
    <rdf:type rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >TODO: Make this optional, when only one new graphic object is introduced where submappings could be applied?! -&gt; Rather not. What about cases where there is no new GO at all??</skos:editorialNote>
    <rdfs:domain rdf:resource="http://purl.org/rvl/SubMappingRelation"/>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
  </owl:FunctionalProperty>
  <owl:InverseFunctionalProperty rdf:about="http://purl.org/rvl/valueMapping">
    <rdfs:domain rdf:resource="http://purl.org/rvl/PropertyToGraphicAttributeMapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >value mapping</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/rvl/ValueMapping"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >States that some value is mapped explicitly to some discrete visual value. This overrides implicitly assigned mappings if existent.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:InverseFunctionalProperty>
  <owl:AnnotationProperty rdf:about="http://www.w3.org/2000/01/rdf-schema#comment"/>
  <MissingSourceValueHandlingType rdf:about="http://purl.org/rvl/Average">
    <rdf:type rdf:resource="http://purl.org/rvl/MissingValueMappingHandlingType"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Average</rdfs:label>
    <rdf:type rdf:resource="http://purl.org/rvl/NeutralValueHandlingType"/>
  </MissingSourceValueHandlingType>
  <NeutralValueHandlingType rdf:about="http://purl.org/rvl/Style">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Style</rdfs:label>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Use the visual value defined by styling when no mapping to a graphic attribute exists.</dct:description>
  </NeutralValueHandlingType>
  <owl:AnnotationProperty rdf:about="http://purl.org/dc/terms/description"/>
  <MissingValueMappingHandlingType rdf:about="http://purl.org/rvl/Calculate">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Calculate</rdfs:label>
  </MissingValueMappingHandlingType>
  <ScaleTransformationType rdf:about="http://purl.org/rvl/Linear">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >linear</rdfs:label>
  </ScaleTransformationType>
  <owl:IrreflexiveProperty rdf:about="http://purl.org/rvl/fallsBackTo">
    <skos:example rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Example for value mappings: if "gold" cannot be displayed -&gt; fall back to "yellow". If "dotted" lines cannot be drawn, use "dashed" lines instead. 

Examples for property mappings:  If color ("hue") cannot be displayed -&gt; fall back to "brightness" -&gt; if this cannot be displayed either, fall back to "texture density".</skos:example>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.</rdfs:comment>
    <rdfs:domain rdf:resource="http://purl.org/rvl/Mapping"/>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >falls back to</rdfs:label>
    <rdfs:range rdf:resource="http://purl.org/rvl/Mapping"/>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The mapping that should be used as a "fall back", when some constraint, e.g. of the user-model or system-model is not met.</dct:description>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >stable</swstatus:term_status>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </owl:IrreflexiveProperty>
  <rdf:Description rdf:about="http://purl.org/viso/data/Scale_of_Measurement">
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >In contrast to the subproperty hierarchy of viso-data:has_numeral_value, here no inheritance is modelled. What is better? Be consistent!</skos:editorialNote>
  </rdf:Description>
  <owl:AnnotationProperty rdf:about="http://www.w3.org/2000/01/rdf-schema#label"/>
  <owl:AnnotationProperty rdf:about="http://www.w3.org/2000/01/rdf-schema#seeAlso"/>
  <MissingSourceValueHandlingType rdf:about="http://purl.org/rvl/Ignore">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Ignore</rdfs:label>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Merge with cut?</skos:editorialNote>
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Act as if an entities with the given value would not not exist.</dct:description>
    <rdf:type rdf:resource="http://purl.org/rvl/MissingValueMappingHandlingType"/>
  </MissingSourceValueHandlingType>
  <MissingSourceValueHandlingType rdf:about="http://purl.org/rvl/Neutral">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Neutral</rdfs:label>
    <rdf:type rdf:resource="http://purl.org/rvl/MissingValueMappingHandlingType"/>
  </MissingSourceValueHandlingType>
  <MissingValueMappingHandlingType rdf:about="http://purl.org/rvl/NoMapping">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >No mapping</rdfs:label>
    <swstatus:term_status rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unstable</swstatus:term_status>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Alternative to defining viso-graphic:Not_Set as a default value vor a visual means.</skos:editorialNote>
  </MissingValueMappingHandlingType>
  <ScaleTransformationType rdf:about="http://purl.org/rvl/Logarithmic">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >logarithmic</rdfs:label>
  </ScaleTransformationType>
  <OutOfBoundHandlingType rdf:about="http://purl.org/rvl/Cut">
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Values outside the defined interval are cut, i.e. resources with this value are not shown at all (neither will they be considered in calculations, e.g. the overall range of all values). </dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >cut</rdfs:label>
    <skos:editorialNote rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Merge with Ignore?</skos:editorialNote>
  </OutOfBoundHandlingType>
  <MissingSourceValueHandlingType rdf:about="http://purl.org/rvl/Hide">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Hide</rdfs:label>
    <rdf:type rdf:resource="http://purl.org/rvl/MissingValueMappingHandlingType"/>
  </MissingSourceValueHandlingType>
  <MissingSourceValueHandlingType rdf:about="http://purl.org/rvl/Missing">
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Missing</rdfs:label>
  </MissingSourceValueHandlingType>
  <OutOfBoundHandlingType rdf:about="http://purl.org/rvl/Clamp">
    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Values outside the defined interval are set to the boundaries of the interval.</dct:description>
    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >clamp</rdfs:label>
  </OutOfBoundHandlingType>
</rdf:RDF>

<!-- Created with TopBraid -->
